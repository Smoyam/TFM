#ifndef mpc_solver_h
#define mpc_solver_h

#define nn_ 3
#define mm_ 1
#define nm_ 4
#define NN_ 1
#define k_max 100
#define tol 0.100000000000000
#define in_engineering 0
#define TIME_VARYING 0
#define MEASURE_TIME 1
#define SCALAR_RHO
#define rho 15.000000000000000
#define rho_i 0.066666666666667


typedef struct {
    double z[NN_*nm_]; // Optimal z
    double v[NN_*nm_]; // Optimal v
    double lambda[NN_*nm_]; // Optimal lambda
    double update_time; // Time taken for the update of the ingredients of the optimization solver
    double solve_time; // Time spent in solving the optimization problem
    double polish_time; // Time taken for extra stuff
    double run_time; // Time taken in the execution of the whole MPC solver function, equal to the sum of all other times
} solution;

#if TIME_VARYING == 1
void laxMPC_ADMM(double *x0_in, double *xr_in, double *ur_in, double *A_in, double *B_in, double *Q_in, double *R_in, double *LB_in, double *UB_in, double *u_opt, int *k_in, int *e_flag, solution *sol);
#else
void laxMPC_ADMM(double *x0_in, double *xr_in, double *ur_in, double *u_opt, int *k_in, int *e_flag, solution *sol);
#endif

#endif

// This code is generated by the Spcies toolbox: https://github.com/GepocUS/Spcies
