
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000142e8 	andeq	r4, r1, r8, ror #5

00008028 <swi_handler>:
    8028:	000103dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	000142ec 	andeq	r4, r1, ip, ror #5

00008030 <data_handler>:
    8030:	000142f0 	strdeq	r4, [r1], -r0

00008034 <unused_handler>:
    8034:	000142f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00008038 <irq_handler>:
    8038:	00010490 	muleq	r1, r0, r4

0000803c <fiq_handler>:
    803c:	000142f8 	strdeq	r4, [r1], -r8

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002d65 	bl	13630 <irqBlock>
    8098:	ea0030b8 	b	14380 <main>
    809c:	00014770 	andeq	r4, r1, r0, ror r7
    80a0:	00015b50 	andeq	r5, r1, r0, asr fp

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   10230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000017 	bl	102ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb00003c 	bl	10344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e320f000 	nop	{0}
   10268:	e28bd000 	add	sp, fp, #0
   1026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10270:	e12fff1e 	bx	lr

00010274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   10274:	e92d4800 	push	{fp, lr}
   10278:	e28db004 	add	fp, sp, #4
   1027c:	e24dd008 	sub	sp, sp, #8
   10280:	e50b0008 	str	r0, [fp, #-8]
   10284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10288:	eb0009af 	bl	1294c <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   1028c:	eb000a82 	bl	12c9c <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10290:	e59f3010 	ldr	r3, [pc, #16]	; 102a8 <vTickISR+0x34>
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e320f000 	nop	{0}
   102a0:	e24bd004 	sub	sp, fp, #4
   102a4:	e8bd8800 	pop	{fp, pc}
   102a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000102ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102ac:	e92d4800 	push	{fp, lr}
   102b0:	e28db004 	add	fp, sp, #4
   102b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   102c0:	eb000cda 	bl	13630 <irqBlock>

	pRegs->CTL = 0x003E0000;
   102c4:	e59f3068 	ldr	r3, [pc, #104]	; 10334 <prvSetupTimerInterrupt+0x88>
   102c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102d0:	e59f305c 	ldr	r3, [pc, #92]	; 10334 <prvSetupTimerInterrupt+0x88>
   102d4:	e59f205c 	ldr	r2, [pc, #92]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102dc:	e59f3050 	ldr	r3, [pc, #80]	; 10334 <prvSetupTimerInterrupt+0x88>
   102e0:	e59f2050 	ldr	r2, [pc, #80]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e8:	e59f3044 	ldr	r3, [pc, #68]	; 10334 <prvSetupTimerInterrupt+0x88>
   102ec:	e3a020f9 	mov	r2, #249	; 0xf9
   102f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102f4:	e59f3038 	ldr	r3, [pc, #56]	; 10334 <prvSetupTimerInterrupt+0x88>
   102f8:	e3a02000 	mov	r2, #0
   102fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   10300:	e59f302c 	ldr	r3, [pc, #44]	; 10334 <prvSetupTimerInterrupt+0x88>
   10304:	e59f2030 	ldr	r2, [pc, #48]	; 1033c <prvSetupTimerInterrupt+0x90>
   10308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   1030c:	e3a02000 	mov	r2, #0
   10310:	e59f1028 	ldr	r1, [pc, #40]	; 10340 <prvSetupTimerInterrupt+0x94>
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000ccb 	bl	1364c <irqRegister>

	irqEnable(64);
   1031c:	e3a00040 	mov	r0, #64	; 0x40
   10320:	eb000ce2 	bl	136b0 <irqEnable>

	irqUnblock();
   10324:	eb000cba 	bl	13614 <irqUnblock>
}
   10328:	e320f000 	nop	{0}
   1032c:	e24bd004 	sub	sp, fp, #4
   10330:	e8bd8800 	pop	{fp, pc}
   10334:	2000b400 	andcs	fp, r0, r0, lsl #8
   10338:	000003e7 	andeq	r0, r0, r7, ror #7
   1033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10340:	00010274 	andeq	r0, r1, r4, ror r2

00010344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   1034c:	e59f307c 	ldr	r3, [pc, #124]	; 103d0 <vPortISRStartFirstTask+0x8c>
   10350:	e5933000 	ldr	r3, [r3]
   10354:	e2833001 	add	r3, r3, #1
   10358:	e59f2070 	ldr	r2, [pc, #112]	; 103d0 <vPortISRStartFirstTask+0x8c>
   1035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   1036c:	e59f0274 	ldr	r0, [pc, #628]	; 105e8 <vPortExitCritical+0x64>
   10370:	e5900000 	ldr	r0, [r0]
   10374:	e590e000 	ldr	lr, [r0]
   10378:	e59f026c 	ldr	r0, [pc, #620]	; 105ec <vPortExitCritical+0x68>
   1037c:	e8be0002 	ldm	lr!, {r1}
   10380:	e5801000 	str	r1, [r0]
   10384:	e8be0001 	ldm	lr!, {r0}
   10388:	e16ff000 	msr	SPSR_fsxc, r0
   1038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10390:	e320f000 	nop	{0}
   10394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10398:	e25ef004 	subs	pc, lr, #4
   1039c:	e320f000 	nop	{0}
   103a0:	e320f000 	nop	{0}
   103a4:	e59f3028 	ldr	r3, [pc, #40]	; 103d4 <vPortISRStartFirstTask+0x90>
   103a8:	e5933000 	ldr	r3, [r3]
   103ac:	e59f3024 	ldr	r3, [pc, #36]	; 103d8 <vPortISRStartFirstTask+0x94>
   103b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103b4:	e8bd4000 	ldmfd	sp!, {lr}
   103b8:	e24ee004 	sub	lr, lr, #4
   103bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103c0:	e320f000 	nop	{0}
   103c4:	e28bd000 	add	sp, fp, #0
   103c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103cc:	e12fff1e 	bx	lr
   103d0:	00014770 	andeq	r4, r1, r0, ror r7
   103d4:	00014760 	andeq	r4, r1, r0, ror #14
   103d8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000103dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103e0:	e92d0001 	stmfd	sp!, {r0}
   103e4:	e94d2000 	stmdb	sp, {sp}^
   103e8:	e24dd004 	sub	sp, sp, #4
   103ec:	e8bd0001 	ldmfd	sp!, {r0}
   103f0:	e9204000 	stmdb	r0!, {lr}
   103f4:	e1a0e000 	mov	lr, r0
   103f8:	e8bd0001 	ldmfd	sp!, {r0}
   103fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10400:	e320f000 	nop	{0}
   10404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10408:	e14f0000 	mrs	r0, SPSR
   1040c:	e92e0001 	stmdb	lr!, {r0}
   10410:	e59f01d4 	ldr	r0, [pc, #468]	; 105ec <vPortExitCritical+0x68>
   10414:	e5900000 	ldr	r0, [r0]
   10418:	e92e0001 	stmdb	lr!, {r0}
   1041c:	e59f01c4 	ldr	r0, [pc, #452]	; 105e8 <vPortExitCritical+0x64>
   10420:	e5900000 	ldr	r0, [r0]
   10424:	e580e000 	str	lr, [r0]
   10428:	e59f3058 	ldr	r3, [pc, #88]	; 10488 <vPortYieldProcessor+0xac>
   1042c:	e5933000 	ldr	r3, [r3]
   10430:	e59f3054 	ldr	r3, [pc, #84]	; 1048c <vPortYieldProcessor+0xb0>
   10434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10438:	eb000a17 	bl	12c9c <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1043c:	e59f01a4 	ldr	r0, [pc, #420]	; 105e8 <vPortExitCritical+0x64>
   10440:	e5900000 	ldr	r0, [r0]
   10444:	e590e000 	ldr	lr, [r0]
   10448:	e59f019c 	ldr	r0, [pc, #412]	; 105ec <vPortExitCritical+0x68>
   1044c:	e8be0002 	ldm	lr!, {r1}
   10450:	e5801000 	str	r1, [r0]
   10454:	e8be0001 	ldm	lr!, {r0}
   10458:	e16ff000 	msr	SPSR_fsxc, r0
   1045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10460:	e320f000 	nop	{0}
   10464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10468:	e25ef004 	subs	pc, lr, #4
   1046c:	e320f000 	nop	{0}
   10470:	e320f000 	nop	{0}
   10474:	e59f300c 	ldr	r3, [pc, #12]	; 10488 <vPortYieldProcessor+0xac>
   10478:	e5933000 	ldr	r3, [r3]
   1047c:	e59f3008 	ldr	r3, [pc, #8]	; 1048c <vPortYieldProcessor+0xb0>
   10480:	e5933000 	ldr	r3, [r3]
}
   10484:	e320f000 	nop	{0}
   10488:	00014760 	andeq	r4, r1, r0, ror #14
   1048c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10490:	e92d0001 	stmfd	sp!, {r0}
   10494:	e94d2000 	stmdb	sp, {sp}^
   10498:	e24dd004 	sub	sp, sp, #4
   1049c:	e8bd0001 	ldmfd	sp!, {r0}
   104a0:	e9204000 	stmdb	r0!, {lr}
   104a4:	e1a0e000 	mov	lr, r0
   104a8:	e8bd0001 	ldmfd	sp!, {r0}
   104ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104b0:	e320f000 	nop	{0}
   104b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104b8:	e14f0000 	mrs	r0, SPSR
   104bc:	e92e0001 	stmdb	lr!, {r0}
   104c0:	e59f0124 	ldr	r0, [pc, #292]	; 105ec <vPortExitCritical+0x68>
   104c4:	e5900000 	ldr	r0, [r0]
   104c8:	e92e0001 	stmdb	lr!, {r0}
   104cc:	e59f0114 	ldr	r0, [pc, #276]	; 105e8 <vPortExitCritical+0x64>
   104d0:	e5900000 	ldr	r0, [r0]
   104d4:	e580e000 	str	lr, [r0]
   104d8:	e59f3058 	ldr	r3, [pc, #88]	; 10538 <vFreeRTOS_ISR+0xa8>
   104dc:	e5933000 	ldr	r3, [r3]
   104e0:	e59f3054 	ldr	r3, [pc, #84]	; 1053c <vFreeRTOS_ISR+0xac>
   104e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104e8:	eb000c21 	bl	13574 <irqHandler>
	portRESTORE_CONTEXT();	
   104ec:	e59f00f4 	ldr	r0, [pc, #244]	; 105e8 <vPortExitCritical+0x64>
   104f0:	e5900000 	ldr	r0, [r0]
   104f4:	e590e000 	ldr	lr, [r0]
   104f8:	e59f00ec 	ldr	r0, [pc, #236]	; 105ec <vPortExitCritical+0x68>
   104fc:	e8be0002 	ldm	lr!, {r1}
   10500:	e5801000 	str	r1, [r0]
   10504:	e8be0001 	ldm	lr!, {r0}
   10508:	e16ff000 	msr	SPSR_fsxc, r0
   1050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10510:	e320f000 	nop	{0}
   10514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10518:	e25ef004 	subs	pc, lr, #4
   1051c:	e320f000 	nop	{0}
   10520:	e320f000 	nop	{0}
   10524:	e59f300c 	ldr	r3, [pc, #12]	; 10538 <vFreeRTOS_ISR+0xa8>
   10528:	e5933000 	ldr	r3, [r3]
   1052c:	e59f3008 	ldr	r3, [pc, #8]	; 1053c <vFreeRTOS_ISR+0xac>
   10530:	e5933000 	ldr	r3, [r3]
}
   10534:	e320f000 	nop	{0}
   10538:	00014760 	andeq	r4, r1, r0, ror #14
   1053c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10548:	e92d0001 	stmfd	sp!, {r0}
   1054c:	e10f0000 	mrs	r0, CPSR
   10550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10554:	e129f000 	msr	CPSR_fc, r0
   10558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1055c:	e59f301c 	ldr	r3, [pc, #28]	; 10580 <vPortEnterCritical+0x40>
   10560:	e5933000 	ldr	r3, [r3]
   10564:	e2833001 	add	r3, r3, #1
   10568:	e59f2010 	ldr	r2, [pc, #16]	; 10580 <vPortEnterCritical+0x40>
   1056c:	e5823000 	str	r3, [r2]
}
   10570:	e320f000 	nop	{0}
   10574:	e28bd000 	add	sp, fp, #0
   10578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1057c:	e12fff1e 	bx	lr
   10580:	00014760 	andeq	r4, r1, r0, ror #14

00010584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   1058c:	e59f3050 	ldr	r3, [pc, #80]	; 105e4 <vPortExitCritical+0x60>
   10590:	e5933000 	ldr	r3, [r3]
   10594:	e3530000 	cmp	r3, #0
   10598:	0a00000d 	beq	105d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   1059c:	e59f3040 	ldr	r3, [pc, #64]	; 105e4 <vPortExitCritical+0x60>
   105a0:	e5933000 	ldr	r3, [r3]
   105a4:	e2433001 	sub	r3, r3, #1
   105a8:	e59f2034 	ldr	r2, [pc, #52]	; 105e4 <vPortExitCritical+0x60>
   105ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b0:	e59f302c 	ldr	r3, [pc, #44]	; 105e4 <vPortExitCritical+0x60>
   105b4:	e5933000 	ldr	r3, [r3]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	1a000004 	bne	105d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c0:	e92d0001 	stmfd	sp!, {r0}
   105c4:	e10f0000 	mrs	r0, CPSR
   105c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105cc:	e129f000 	msr	CPSR_fc, r0
   105d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105d4:	e320f000 	nop	{0}
   105d8:	e28bd000 	add	sp, fp, #0
   105dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105e0:	e12fff1e 	bx	lr
   105e4:	00014760 	andeq	r4, r1, r0, ror #14
   105e8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   105ec:	00014760 	andeq	r4, r1, r0, ror #14

000105f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd018 	sub	sp, sp, #24
   105fc:	e50b0010 	str	r0, [fp, #-16]
   10600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10608:	e3a00038 	mov	r0, #56	; 0x38
   1060c:	eb000e0a 	bl	13e3c <pvPortMalloc>
   10610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   10614:	e51b300c 	ldr	r3, [fp, #-12]
   10618:	e3530000 	cmp	r3, #0
   1061c:	0a000044 	beq	10734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10620:	e59f3124 	ldr	r3, [pc, #292]	; 1074c <xCoRoutineCreate+0x15c>
   10624:	e5933000 	ldr	r3, [r3]
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000003 	bne	10640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10630:	e59f2114 	ldr	r2, [pc, #276]	; 1074c <xCoRoutineCreate+0x15c>
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   1063c:	eb000177 	bl	10c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10644:	e3530001 	cmp	r3, #1
   10648:	9a000001 	bls	10654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   1064c:	e3a03001 	mov	r3, #1
   10650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10654:	e51b300c 	ldr	r3, [fp, #-12]
   10658:	e3a02000 	mov	r2, #0
   1065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10660:	e51b300c 	ldr	r3, [fp, #-12]
   10664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   1066c:	e51b300c 	ldr	r3, [fp, #-12]
   10670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   10678:	e51b300c 	ldr	r3, [fp, #-12]
   1067c:	e51b2010 	ldr	r2, [fp, #-16]
   10680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e2833004 	add	r3, r3, #4
   1068c:	e1a00003 	mov	r0, r3
   10690:	eb0001c9 	bl	10dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10694:	e51b300c 	ldr	r3, [fp, #-12]
   10698:	e2833018 	add	r3, r3, #24
   1069c:	e1a00003 	mov	r0, r3
   106a0:	eb0001c5 	bl	10dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e51b200c 	ldr	r2, [fp, #-12]
   106ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   106b0:	e51b300c 	ldr	r3, [fp, #-12]
   106b4:	e51b200c 	ldr	r2, [fp, #-12]
   106b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   106bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   106c0:	e2632005 	rsb	r2, r3, #5
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106cc:	e51b300c 	ldr	r3, [fp, #-12]
   106d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d4:	e59f3074 	ldr	r3, [pc, #116]	; 10750 <xCoRoutineCreate+0x160>
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e1520003 	cmp	r2, r3
   106e0:	9a000003 	bls	106f4 <xCoRoutineCreate+0x104>
   106e4:	e51b300c 	ldr	r3, [fp, #-12]
   106e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   106ec:	e59f205c 	ldr	r2, [pc, #92]	; 10750 <xCoRoutineCreate+0x160>
   106f0:	e5823000 	str	r3, [r2]
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106fc:	e1a03002 	mov	r3, r2
   10700:	e1a03103 	lsl	r3, r3, #2
   10704:	e0833002 	add	r3, r3, r2
   10708:	e1a03103 	lsl	r3, r3, #2
   1070c:	e59f2040 	ldr	r2, [pc, #64]	; 10754 <xCoRoutineCreate+0x164>
   10710:	e0832002 	add	r2, r3, r2
   10714:	e51b300c 	ldr	r3, [fp, #-12]
   10718:	e2833004 	add	r3, r3, #4
   1071c:	e1a01003 	mov	r1, r3
   10720:	e1a00002 	mov	r0, r2
   10724:	eb0001af 	bl	10de8 <vListInsertEnd>

		xReturn = pdPASS;
   10728:	e3a03001 	mov	r3, #1
   1072c:	e50b3008 	str	r3, [fp, #-8]
   10730:	ea000001 	b	1073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10734:	e3e03000 	mvn	r3, #0
   10738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   1073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10740:	e1a00003 	mov	r0, r3
   10744:	e24bd004 	sub	sp, fp, #4
   10748:	e8bd8800 	pop	{fp, pc}
   1074c:	000147e0 	andeq	r4, r1, r0, ror #15
   10750:	000147e4 	andeq	r4, r1, r4, ror #15
   10754:	00014774 	andeq	r4, r1, r4, ror r7

00010758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   10758:	e92d4800 	push	{fp, lr}
   1075c:	e28db004 	add	fp, sp, #4
   10760:	e24dd010 	sub	sp, sp, #16
   10764:	e50b0010 	str	r0, [fp, #-16]
   10768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1076c:	e59f30b8 	ldr	r3, [pc, #184]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   10770:	e5933000 	ldr	r3, [r3]
   10774:	e51b2010 	ldr	r2, [fp, #-16]
   10778:	e0823003 	add	r3, r2, r3
   1077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10780:	e59f30a8 	ldr	r3, [pc, #168]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10784:	e5933000 	ldr	r3, [r3]
   10788:	e2833004 	add	r3, r3, #4
   1078c:	e1a00003 	mov	r0, r3
   10790:	eb0001f0 	bl	10f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10794:	e59f3094 	ldr	r3, [pc, #148]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e51b2008 	ldr	r2, [fp, #-8]
   107a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   107a4:	e59f3080 	ldr	r3, [pc, #128]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   107a8:	e5933000 	ldr	r3, [r3]
   107ac:	e51b2008 	ldr	r2, [fp, #-8]
   107b0:	e1520003 	cmp	r2, r3
   107b4:	2a000008 	bcs	107dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107b8:	e59f3074 	ldr	r3, [pc, #116]	; 10834 <vCoRoutineAddToDelayedList+0xdc>
   107bc:	e5932000 	ldr	r2, [r3]
   107c0:	e59f3068 	ldr	r3, [pc, #104]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107c4:	e5933000 	ldr	r3, [r3]
   107c8:	e2833004 	add	r3, r3, #4
   107cc:	e1a01003 	mov	r1, r3
   107d0:	e1a00002 	mov	r0, r2
   107d4:	eb0001a9 	bl	10e80 <vListInsert>
   107d8:	ea000007 	b	107fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107dc:	e59f3054 	ldr	r3, [pc, #84]	; 10838 <vCoRoutineAddToDelayedList+0xe0>
   107e0:	e5932000 	ldr	r2, [r3]
   107e4:	e59f3044 	ldr	r3, [pc, #68]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107e8:	e5933000 	ldr	r3, [r3]
   107ec:	e2833004 	add	r3, r3, #4
   107f0:	e1a01003 	mov	r1, r3
   107f4:	e1a00002 	mov	r0, r2
   107f8:	eb0001a0 	bl	10e80 <vListInsert>
	}

	if( pxEventList )
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e3530000 	cmp	r3, #0
   10804:	0a000005 	beq	10820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   10808:	e59f3020 	ldr	r3, [pc, #32]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   1080c:	e5933000 	ldr	r3, [r3]
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a01003 	mov	r1, r3
   10818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1081c:	eb000197 	bl	10e80 <vListInsert>
	}
}
   10820:	e320f000 	nop	{0}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	000147e8 	andeq	r4, r1, r8, ror #15
   10830:	000147e0 	andeq	r4, r1, r0, ror #15
   10834:	000147c8 	andeq	r4, r1, r8, asr #15
   10838:	000147c4 	andeq	r4, r1, r4, asr #15

0001083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   1084c:	e92d0001 	stmfd	sp!, {r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10860:	e59f30b4 	ldr	r3, [pc, #180]	; 1091c <prvCheckPendingReadyList+0xe0>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b5 	bl	10f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10880:	e92d0001 	stmfd	sp!, {r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001ac 	bl	10f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f306c 	ldr	r3, [pc, #108]	; 10920 <prvCheckPendingReadyList+0xe4>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   108c4:	e59f2054 	ldr	r2, [pc, #84]	; 10920 <prvCheckPendingReadyList+0xe4>
   108c8:	e5823000 	str	r3, [r2]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f2038 	ldr	r2, [pc, #56]	; 10924 <prvCheckPendingReadyList+0xe8>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a01003 	mov	r1, r3
   108f8:	e1a00002 	mov	r0, r2
   108fc:	eb000139 	bl	10de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10900:	e59f3014 	ldr	r3, [pc, #20]	; 1091c <prvCheckPendingReadyList+0xe0>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>
	}
}
   10910:	e320f000 	nop	{0}
   10914:	e24bd004 	sub	sp, fp, #4
   10918:	e8bd8800 	pop	{fp, pc}
   1091c:	000147cc 	andeq	r4, r1, ip, asr #15
   10920:	000147e4 	andeq	r4, r1, r4, ror #15
   10924:	00014774 	andeq	r4, r1, r4, ror r7

00010928 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10928:	e92d4800 	push	{fp, lr}
   1092c:	e28db004 	add	fp, sp, #4
   10930:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10934:	eb0007e0 	bl	128bc <xTaskGetTickCount>
   10938:	e1a02000 	mov	r2, r0
   1093c:	e59f3198 	ldr	r3, [pc, #408]	; 10adc <prvCheckDelayedList+0x1b4>
   10940:	e5933000 	ldr	r3, [r3]
   10944:	e0423003 	sub	r3, r2, r3
   10948:	e59f2190 	ldr	r2, [pc, #400]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1094c:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   10950:	ea000056 	b	10ab0 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   10954:	e59f3188 	ldr	r3, [pc, #392]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e2833001 	add	r3, r3, #1
   10960:	e59f217c 	ldr	r2, [pc, #380]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10964:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   10968:	e59f3170 	ldr	r3, [pc, #368]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1096c:	e5933000 	ldr	r3, [r3]
   10970:	e2433001 	sub	r3, r3, #1
   10974:	e59f2164 	ldr	r2, [pc, #356]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10978:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   1097c:	e59f3160 	ldr	r3, [pc, #352]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10980:	e5933000 	ldr	r3, [r3]
   10984:	e3530000 	cmp	r3, #0
   10988:	1a000043 	bne	10a9c <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   1098c:	e59f3154 	ldr	r3, [pc, #340]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10990:	e5933000 	ldr	r3, [r3]
   10994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10998:	e59f314c 	ldr	r3, [pc, #332]	; 10aec <prvCheckDelayedList+0x1c4>
   1099c:	e5933000 	ldr	r3, [r3]
   109a0:	e59f2140 	ldr	r2, [pc, #320]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   109a8:	e59f213c 	ldr	r2, [pc, #316]	; 10aec <prvCheckDelayedList+0x1c4>
   109ac:	e51b3008 	ldr	r3, [fp, #-8]
   109b0:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   109b4:	ea000038 	b	10a9c <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   109b8:	e59f3128 	ldr	r3, [pc, #296]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109bc:	e5933000 	ldr	r3, [r3]
   109c0:	e593300c 	ldr	r3, [r3, #12]
   109c4:	e593300c 	ldr	r3, [r3, #12]
   109c8:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109cc:	e51b300c 	ldr	r3, [fp, #-12]
   109d0:	e5932004 	ldr	r2, [r3, #4]
   109d4:	e59f3108 	ldr	r3, [pc, #264]	; 10ae4 <prvCheckDelayedList+0x1bc>
   109d8:	e5933000 	ldr	r3, [r3]
   109dc:	e1520003 	cmp	r2, r3
   109e0:	9a000000 	bls	109e8 <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   109e4:	ea000031 	b	10ab0 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   109e8:	e92d0001 	stmfd	sp!, {r0}
   109ec:	e10f0000 	mrs	r0, CPSR
   109f0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109f4:	e129f000 	msr	CPSR_fc, r0
   109f8:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   109fc:	e51b300c 	ldr	r3, [fp, #-12]
   10a00:	e2833004 	add	r3, r3, #4
   10a04:	e1a00003 	mov	r0, r3
   10a08:	eb000152 	bl	10f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10a0c:	e51b300c 	ldr	r3, [fp, #-12]
   10a10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a14:	e3530000 	cmp	r3, #0
   10a18:	0a000003 	beq	10a2c <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10a1c:	e51b300c 	ldr	r3, [fp, #-12]
   10a20:	e2833018 	add	r3, r3, #24
   10a24:	e1a00003 	mov	r0, r3
   10a28:	eb00014a 	bl	10f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a2c:	e92d0001 	stmfd	sp!, {r0}
   10a30:	e10f0000 	mrs	r0, CPSR
   10a34:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a38:	e129f000 	msr	CPSR_fc, r0
   10a3c:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a40:	e51b300c 	ldr	r3, [fp, #-12]
   10a44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a48:	e59f30a0 	ldr	r3, [pc, #160]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a4c:	e5933000 	ldr	r3, [r3]
   10a50:	e1520003 	cmp	r2, r3
   10a54:	9a000003 	bls	10a68 <prvCheckDelayedList+0x140>
   10a58:	e51b300c 	ldr	r3, [fp, #-12]
   10a5c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10a60:	e59f2088 	ldr	r2, [pc, #136]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a64:	e5823000 	str	r3, [r2]
   10a68:	e51b300c 	ldr	r3, [fp, #-12]
   10a6c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a70:	e1a03002 	mov	r3, r2
   10a74:	e1a03103 	lsl	r3, r3, #2
   10a78:	e0833002 	add	r3, r3, r2
   10a7c:	e1a03103 	lsl	r3, r3, #2
   10a80:	e59f206c 	ldr	r2, [pc, #108]	; 10af4 <prvCheckDelayedList+0x1cc>
   10a84:	e0832002 	add	r2, r3, r2
   10a88:	e51b300c 	ldr	r3, [fp, #-12]
   10a8c:	e2833004 	add	r3, r3, #4
   10a90:	e1a01003 	mov	r1, r3
   10a94:	e1a00002 	mov	r0, r2
   10a98:	eb0000d2 	bl	10de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10a9c:	e59f3044 	ldr	r3, [pc, #68]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10aa0:	e5933000 	ldr	r3, [r3]
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	1affffc1 	bne	109b8 <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   10ab0:	e59f3028 	ldr	r3, [pc, #40]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10ab4:	e5933000 	ldr	r3, [r3]
   10ab8:	e3530000 	cmp	r3, #0
   10abc:	1affffa4 	bne	10954 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10ac0:	e59f301c 	ldr	r3, [pc, #28]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10ac4:	e5933000 	ldr	r3, [r3]
   10ac8:	e59f200c 	ldr	r2, [pc, #12]	; 10adc <prvCheckDelayedList+0x1b4>
   10acc:	e5823000 	str	r3, [r2]
}
   10ad0:	e320f000 	nop	{0}
   10ad4:	e24bd004 	sub	sp, fp, #4
   10ad8:	e8bd8800 	pop	{fp, pc}
   10adc:	000147ec 	andeq	r4, r1, ip, ror #15
   10ae0:	000147f0 	strdeq	r4, [r1], -r0
   10ae4:	000147e8 	andeq	r4, r1, r8, ror #15
   10ae8:	000147c4 	andeq	r4, r1, r4, asr #15
   10aec:	000147c8 	andeq	r4, r1, r8, asr #15
   10af0:	000147e4 	andeq	r4, r1, r4, ror #15
   10af4:	00014774 	andeq	r4, r1, r4, ror r7

00010af8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10af8:	e92d4800 	push	{fp, lr}
   10afc:	e28db004 	add	fp, sp, #4
   10b00:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10b04:	ebffff4c 	bl	1083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10b08:	ebffff86 	bl	10928 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b0c:	ea000008 	b	10b34 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10b10:	e59f30fc 	ldr	r3, [pc, #252]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b14:	e5933000 	ldr	r3, [r3]
   10b18:	e3530000 	cmp	r3, #0
   10b1c:	0a000039 	beq	10c08 <vCoRoutineSchedule+0x110>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   10b20:	e59f30ec 	ldr	r3, [pc, #236]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b24:	e5933000 	ldr	r3, [r3]
   10b28:	e2433001 	sub	r3, r3, #1
   10b2c:	e59f20e0 	ldr	r2, [pc, #224]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b30:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b34:	e59f30d8 	ldr	r3, [pc, #216]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b38:	e5932000 	ldr	r2, [r3]
   10b3c:	e59f10d4 	ldr	r1, [pc, #212]	; 10c18 <vCoRoutineSchedule+0x120>
   10b40:	e1a03002 	mov	r3, r2
   10b44:	e1a03103 	lsl	r3, r3, #2
   10b48:	e0833002 	add	r3, r3, r2
   10b4c:	e1a03103 	lsl	r3, r3, #2
   10b50:	e0813003 	add	r3, r1, r3
   10b54:	e5933000 	ldr	r3, [r3]
   10b58:	e3530000 	cmp	r3, #0
   10b5c:	0affffeb 	beq	10b10 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b60:	e59f30ac 	ldr	r3, [pc, #172]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b64:	e5932000 	ldr	r2, [r3]
   10b68:	e1a03002 	mov	r3, r2
   10b6c:	e1a03103 	lsl	r3, r3, #2
   10b70:	e0833002 	add	r3, r3, r2
   10b74:	e1a03103 	lsl	r3, r3, #2
   10b78:	e59f2098 	ldr	r2, [pc, #152]	; 10c18 <vCoRoutineSchedule+0x120>
   10b7c:	e0833002 	add	r3, r3, r2
   10b80:	e50b3008 	str	r3, [fp, #-8]
   10b84:	e51b3008 	ldr	r3, [fp, #-8]
   10b88:	e5933004 	ldr	r3, [r3, #4]
   10b8c:	e5932004 	ldr	r2, [r3, #4]
   10b90:	e51b3008 	ldr	r3, [fp, #-8]
   10b94:	e5832004 	str	r2, [r3, #4]
   10b98:	e51b3008 	ldr	r3, [fp, #-8]
   10b9c:	e5932004 	ldr	r2, [r3, #4]
   10ba0:	e51b3008 	ldr	r3, [fp, #-8]
   10ba4:	e2833008 	add	r3, r3, #8
   10ba8:	e1520003 	cmp	r2, r3
   10bac:	1a000004 	bne	10bc4 <vCoRoutineSchedule+0xcc>
   10bb0:	e51b3008 	ldr	r3, [fp, #-8]
   10bb4:	e5933004 	ldr	r3, [r3, #4]
   10bb8:	e5932004 	ldr	r2, [r3, #4]
   10bbc:	e51b3008 	ldr	r3, [fp, #-8]
   10bc0:	e5832004 	str	r2, [r3, #4]
   10bc4:	e51b3008 	ldr	r3, [fp, #-8]
   10bc8:	e5933004 	ldr	r3, [r3, #4]
   10bcc:	e593300c 	ldr	r3, [r3, #12]
   10bd0:	e59f2044 	ldr	r2, [pc, #68]	; 10c1c <vCoRoutineSchedule+0x124>
   10bd4:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bd8:	e59f303c 	ldr	r3, [pc, #60]	; 10c1c <vCoRoutineSchedule+0x124>
   10bdc:	e5933000 	ldr	r3, [r3]
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e59f2030 	ldr	r2, [pc, #48]	; 10c1c <vCoRoutineSchedule+0x124>
   10be8:	e5920000 	ldr	r0, [r2]
   10bec:	e59f2028 	ldr	r2, [pc, #40]	; 10c1c <vCoRoutineSchedule+0x124>
   10bf0:	e5922000 	ldr	r2, [r2]
   10bf4:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bf8:	e1a01002 	mov	r1, r2
   10bfc:	e12fff33 	blx	r3

	return;
   10c00:	e320f000 	nop	{0}
   10c04:	ea000000 	b	10c0c <vCoRoutineSchedule+0x114>
			return;
   10c08:	e320f000 	nop	{0}
}
   10c0c:	e24bd004 	sub	sp, fp, #4
   10c10:	e8bd8800 	pop	{fp, pc}
   10c14:	000147e4 	andeq	r4, r1, r4, ror #15
   10c18:	00014774 	andeq	r4, r1, r4, ror r7
   10c1c:	000147e0 	andeq	r4, r1, r0, ror #15

00010c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10c20:	e92d4800 	push	{fp, lr}
   10c24:	e28db004 	add	fp, sp, #4
   10c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c2c:	e3a03000 	mov	r3, #0
   10c30:	e50b3008 	str	r3, [fp, #-8]
   10c34:	ea00000b 	b	10c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c38:	e51b2008 	ldr	r2, [fp, #-8]
   10c3c:	e1a03002 	mov	r3, r2
   10c40:	e1a03103 	lsl	r3, r3, #2
   10c44:	e0833002 	add	r3, r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e59f205c 	ldr	r2, [pc, #92]	; 10cb0 <prvInitialiseCoRoutineLists+0x90>
   10c50:	e0833002 	add	r3, r3, r2
   10c54:	e1a00003 	mov	r0, r3
   10c58:	eb00003d 	bl	10d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c5c:	e51b3008 	ldr	r3, [fp, #-8]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e50b3008 	str	r3, [fp, #-8]
   10c68:	e51b3008 	ldr	r3, [fp, #-8]
   10c6c:	e3530001 	cmp	r3, #1
   10c70:	9afffff0 	bls	10c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c74:	e59f0038 	ldr	r0, [pc, #56]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c78:	eb000035 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10c80:	eb000033 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x9c>
   10c88:	eb000031 	bl	10d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c8c:	e59f302c 	ldr	r3, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0xa0>
   10c90:	e59f201c 	ldr	r2, [pc, #28]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10c98:	e59f3024 	ldr	r3, [pc, #36]	; 10cc4 <prvInitialiseCoRoutineLists+0xa4>
   10c9c:	e59f2014 	ldr	r2, [pc, #20]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10ca0:	e5832000 	str	r2, [r3]
}
   10ca4:	e320f000 	nop	{0}
   10ca8:	e24bd004 	sub	sp, fp, #4
   10cac:	e8bd8800 	pop	{fp, pc}
   10cb0:	00014774 	andeq	r4, r1, r4, ror r7
   10cb4:	0001479c 	muleq	r1, ip, r7
   10cb8:	000147b0 			; <UNDEFINED> instruction: 0x000147b0
   10cbc:	000147cc 	andeq	r4, r1, ip, asr #15
   10cc0:	000147c4 	andeq	r4, r1, r4, asr #15
   10cc4:	000147c8 	andeq	r4, r1, r8, asr #15

00010cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10cc8:	e92d4800 	push	{fp, lr}
   10ccc:	e28db004 	add	fp, sp, #4
   10cd0:	e24dd010 	sub	sp, sp, #16
   10cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cd8:	e51b3010 	ldr	r3, [fp, #-16]
   10cdc:	e593300c 	ldr	r3, [r3, #12]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10ce8:	e51b300c 	ldr	r3, [fp, #-12]
   10cec:	e2833018 	add	r3, r3, #24
   10cf0:	e1a00003 	mov	r0, r3
   10cf4:	eb000097 	bl	10f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10cf8:	e51b300c 	ldr	r3, [fp, #-12]
   10cfc:	e2833018 	add	r3, r3, #24
   10d00:	e1a01003 	mov	r1, r3
   10d04:	e59f0040 	ldr	r0, [pc, #64]	; 10d4c <xCoRoutineRemoveFromEventList+0x84>
   10d08:	eb000036 	bl	10de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10d0c:	e51b300c 	ldr	r3, [fp, #-12]
   10d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d14:	e59f3034 	ldr	r3, [pc, #52]	; 10d50 <xCoRoutineRemoveFromEventList+0x88>
   10d18:	e5933000 	ldr	r3, [r3]
   10d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d20:	e1520003 	cmp	r2, r3
   10d24:	3a000002 	bcc	10d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10d28:	e3a03001 	mov	r3, #1
   10d2c:	e50b3008 	str	r3, [fp, #-8]
   10d30:	ea000001 	b	10d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d34:	e3a03000 	mov	r3, #0
   10d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d40:	e1a00003 	mov	r0, r3
   10d44:	e24bd004 	sub	sp, fp, #4
   10d48:	e8bd8800 	pop	{fp, pc}
   10d4c:	000147cc 	andeq	r4, r1, ip, asr #15
   10d50:	000147e0 	andeq	r4, r1, r0, ror #15

00010d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d58:	e28db000 	add	fp, sp, #0
   10d5c:	e24dd00c 	sub	sp, sp, #12
   10d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3e02000 	mvn	r2, #0
   10d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d80:	e51b3008 	ldr	r3, [fp, #-8]
   10d84:	e2832008 	add	r2, r3, #8
   10d88:	e51b3008 	ldr	r3, [fp, #-8]
   10d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d90:	e51b3008 	ldr	r3, [fp, #-8]
   10d94:	e2832008 	add	r2, r3, #8
   10d98:	e51b3008 	ldr	r3, [fp, #-8]
   10d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10da0:	e51b3008 	ldr	r3, [fp, #-8]
   10da4:	e3a02000 	mov	r2, #0
   10da8:	e5832000 	str	r2, [r3]
}
   10dac:	e320f000 	nop	{0}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e320f000 	nop	{0}
   10ddc:	e28bd000 	add	sp, fp, #0
   10de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10de4:	e12fff1e 	bx	lr

00010de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dec:	e28db000 	add	fp, sp, #0
   10df0:	e24dd014 	sub	sp, sp, #20
   10df4:	e50b0010 	str	r0, [fp, #-16]
   10df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10dfc:	e51b3010 	ldr	r3, [fp, #-16]
   10e00:	e5933004 	ldr	r3, [r3, #4]
   10e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10e08:	e51b3008 	ldr	r3, [fp, #-8]
   10e0c:	e5932004 	ldr	r2, [r3, #4]
   10e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5932004 	ldr	r2, [r3, #4]
   10e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10e28:	e51b3008 	ldr	r3, [fp, #-8]
   10e2c:	e5933004 	ldr	r3, [r3, #4]
   10e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e38:	e51b3008 	ldr	r3, [fp, #-8]
   10e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e44:	e51b3010 	ldr	r3, [fp, #-16]
   10e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e54:	e51b2010 	ldr	r2, [fp, #-16]
   10e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e5c:	e51b3010 	ldr	r3, [fp, #-16]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e2832001 	add	r2, r3, #1
   10e68:	e51b3010 	ldr	r3, [fp, #-16]
   10e6c:	e5832000 	str	r2, [r3]
}
   10e70:	e320f000 	nop	{0}
   10e74:	e28bd000 	add	sp, fp, #0
   10e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e7c:	e12fff1e 	bx	lr

00010e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e84:	e28db000 	add	fp, sp, #0
   10e88:	e24dd014 	sub	sp, sp, #20
   10e8c:	e50b0010 	str	r0, [fp, #-16]
   10e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e98:	e5933000 	ldr	r3, [r3]
   10e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10ea0:	e51b300c 	ldr	r3, [fp, #-12]
   10ea4:	e3730001 	cmn	r3, #1
   10ea8:	1a000003 	bne	10ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10eac:	e51b3010 	ldr	r3, [fp, #-16]
   10eb0:	e5933010 	ldr	r3, [r3, #16]
   10eb4:	e50b3008 	str	r3, [fp, #-8]
   10eb8:	ea00000c 	b	10ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10ebc:	e51b3010 	ldr	r3, [fp, #-16]
   10ec0:	e2833008 	add	r3, r3, #8
   10ec4:	e50b3008 	str	r3, [fp, #-8]
   10ec8:	ea000002 	b	10ed8 <vListInsert+0x58>
   10ecc:	e51b3008 	ldr	r3, [fp, #-8]
   10ed0:	e5933004 	ldr	r3, [r3, #4]
   10ed4:	e50b3008 	str	r3, [fp, #-8]
   10ed8:	e51b3008 	ldr	r3, [fp, #-8]
   10edc:	e5933004 	ldr	r3, [r3, #4]
   10ee0:	e5933000 	ldr	r3, [r3]
   10ee4:	e51b200c 	ldr	r2, [fp, #-12]
   10ee8:	e1520003 	cmp	r2, r3
   10eec:	2afffff6 	bcs	10ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10ef0:	e51b3008 	ldr	r3, [fp, #-8]
   10ef4:	e5932004 	ldr	r2, [r3, #4]
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f04:	e5933004 	ldr	r3, [r3, #4]
   10f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f14:	e51b2008 	ldr	r2, [fp, #-8]
   10f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10f1c:	e51b3008 	ldr	r3, [fp, #-8]
   10f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f2c:	e51b2010 	ldr	r2, [fp, #-16]
   10f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10f34:	e51b3010 	ldr	r3, [fp, #-16]
   10f38:	e5933000 	ldr	r3, [r3]
   10f3c:	e2832001 	add	r2, r3, #1
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5832000 	str	r2, [r3]
}
   10f48:	e320f000 	nop	{0}
   10f4c:	e28bd000 	add	sp, fp, #0
   10f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f54:	e12fff1e 	bx	lr

00010f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f5c:	e28db000 	add	fp, sp, #0
   10f60:	e24dd014 	sub	sp, sp, #20
   10f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e5933004 	ldr	r3, [r3, #4]
   10f70:	e51b2010 	ldr	r2, [fp, #-16]
   10f74:	e5922008 	ldr	r2, [r2, #8]
   10f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f7c:	e51b3010 	ldr	r3, [fp, #-16]
   10f80:	e5933008 	ldr	r3, [r3, #8]
   10f84:	e51b2010 	ldr	r2, [fp, #-16]
   10f88:	e5922004 	ldr	r2, [r2, #4]
   10f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f90:	e51b3010 	ldr	r3, [fp, #-16]
   10f94:	e5933010 	ldr	r3, [r3, #16]
   10f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5933004 	ldr	r3, [r3, #4]
   10fa4:	e51b2010 	ldr	r2, [fp, #-16]
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	1a000003 	bne	10fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10fb0:	e51b3010 	ldr	r3, [fp, #-16]
   10fb4:	e5932008 	ldr	r2, [r3, #8]
   10fb8:	e51b3008 	ldr	r3, [fp, #-8]
   10fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10fc0:	e51b3010 	ldr	r3, [fp, #-16]
   10fc4:	e3a02000 	mov	r2, #0
   10fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5933000 	ldr	r3, [r3]
   10fd4:	e2432001 	sub	r2, r3, #1
   10fd8:	e51b3008 	ldr	r3, [fp, #-8]
   10fdc:	e5832000 	str	r2, [r3]
}
   10fe0:	e320f000 	nop	{0}
   10fe4:	e28bd000 	add	sp, fp, #0
   10fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fec:	e12fff1e 	bx	lr

00010ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10ff0:	e92d4800 	push	{fp, lr}
   10ff4:	e28db004 	add	fp, sp, #4
   10ff8:	e24dd008 	sub	sp, sp, #8
   10ffc:	e50b0008 	str	r0, [fp, #-8]
   11000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11004:	ebfffd4d 	bl	10540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   11008:	e51b3008 	ldr	r3, [fp, #-8]
   1100c:	e5932000 	ldr	r2, [r3]
   11010:	e51b3008 	ldr	r3, [fp, #-8]
   11014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11018:	e51b1008 	ldr	r1, [fp, #-8]
   1101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11020:	e0030391 	mul	r3, r1, r3
   11024:	e0822003 	add	r2, r2, r3
   11028:	e51b3008 	ldr	r3, [fp, #-8]
   1102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e3a02000 	mov	r2, #0
   11038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1104c:	e51b3008 	ldr	r3, [fp, #-8]
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e51b3008 	ldr	r3, [fp, #-8]
   11058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1105c:	e2433001 	sub	r3, r3, #1
   11060:	e51b1008 	ldr	r1, [fp, #-8]
   11064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11068:	e0030391 	mul	r3, r1, r3
   1106c:	e0822003 	add	r2, r2, r3
   11070:	e51b3008 	ldr	r3, [fp, #-8]
   11074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11078:	e51b3008 	ldr	r3, [fp, #-8]
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11084:	e51b3008 	ldr	r3, [fp, #-8]
   11088:	e3e02000 	mvn	r2, #0
   1108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11090:	e51b300c 	ldr	r3, [fp, #-12]
   11094:	e3530000 	cmp	r3, #0
   11098:	1a00000c 	bne	110d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e5933010 	ldr	r3, [r3, #16]
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000010 	beq	110f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   110ac:	e51b3008 	ldr	r3, [fp, #-8]
   110b0:	e2833010 	add	r3, r3, #16
   110b4:	e1a00003 	mov	r0, r3
   110b8:	eb000760 	bl	12e40 <xTaskRemoveFromEventList>
   110bc:	e1a03000 	mov	r3, r0
   110c0:	e3530001 	cmp	r3, #1
   110c4:	1a000009 	bne	110f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   110c8:	ef000000 	svc	0x00000000
   110cc:	ea000007 	b	110f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833010 	add	r3, r3, #16
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1c 	bl	10d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110e0:	e51b3008 	ldr	r3, [fp, #-8]
   110e4:	e2833024 	add	r3, r3, #36	; 0x24
   110e8:	e1a00003 	mov	r0, r3
   110ec:	ebffff18 	bl	10d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110f0:	ebfffd23 	bl	10584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110f4:	e3a03001 	mov	r3, #1
}
   110f8:	e1a00003 	mov	r0, r3
   110fc:	e24bd004 	sub	sp, fp, #4
   11100:	e8bd8800 	pop	{fp, pc}

00011104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   11104:	e92d4800 	push	{fp, lr}
   11108:	e28db004 	add	fp, sp, #4
   1110c:	e24dd020 	sub	sp, sp, #32
   11110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11118:	e1a03002 	mov	r3, r2
   1111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   11120:	e3a03000 	mov	r3, #0
   11124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   11128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1112c:	e3530000 	cmp	r3, #0
   11130:	0a000021 	beq	111bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11134:	e3a0004c 	mov	r0, #76	; 0x4c
   11138:	eb000b3f 	bl	13e3c <pvPortMalloc>
   1113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11140:	e51b300c 	ldr	r3, [fp, #-12]
   11144:	e3530000 	cmp	r3, #0
   11148:	0a00001b 	beq	111bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11154:	e0030392 	mul	r3, r2, r3
   11158:	e2833001 	add	r3, r3, #1
   1115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11160:	e51b0010 	ldr	r0, [fp, #-16]
   11164:	eb000b34 	bl	13e3c <pvPortMalloc>
   11168:	e1a02000 	mov	r2, r0
   1116c:	e51b300c 	ldr	r3, [fp, #-12]
   11170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e5933000 	ldr	r3, [r3]
   1117c:	e3530000 	cmp	r3, #0
   11180:	0a00000b 	beq	111b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11184:	e51b300c 	ldr	r3, [fp, #-12]
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11190:	e51b300c 	ldr	r3, [fp, #-12]
   11194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1119c:	e3a01001 	mov	r1, #1
   111a0:	e51b000c 	ldr	r0, [fp, #-12]
   111a4:	ebffff91 	bl	10ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   111a8:	e51b300c 	ldr	r3, [fp, #-12]
   111ac:	e50b3008 	str	r3, [fp, #-8]
   111b0:	ea000001 	b	111bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   111b4:	e51b000c 	ldr	r0, [fp, #-12]
   111b8:	eb000b91 	bl	14004 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   111bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   111c0:	e1a00003 	mov	r0, r3
   111c4:	e24bd004 	sub	sp, fp, #4
   111c8:	e8bd8800 	pop	{fp, pc}

000111cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   111cc:	e92d4800 	push	{fp, lr}
   111d0:	e28db004 	add	fp, sp, #4
   111d4:	e24dd020 	sub	sp, sp, #32
   111d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   111e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111e8:	e3a03000 	mov	r3, #0
   111ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111f0:	ebfffcd2 	bl	10540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11204:	e1520003 	cmp	r2, r3
   11208:	2a000012 	bcs	11258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11218:	eb00016a 	bl	117c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000007 	beq	1124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	e2833024 	add	r3, r3, #36	; 0x24
   11234:	e1a00003 	mov	r0, r3
   11238:	eb000700 	bl	12e40 <xTaskRemoveFromEventList>
   1123c:	e1a03000 	mov	r3, r0
   11240:	e3530001 	cmp	r3, #1
   11244:	1a000000 	bne	1124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1124c:	ebfffccc 	bl	10584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11250:	e3a03001 	mov	r3, #1
   11254:	ea000042 	b	11364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1125c:	e3530000 	cmp	r3, #0
   11260:	1a000002 	bne	11270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11264:	ebfffcc6 	bl	10584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11268:	e3a03000 	mov	r3, #0
   1126c:	ea00003c 	b	11364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   11270:	e51b3008 	ldr	r3, [fp, #-8]
   11274:	e3530000 	cmp	r3, #0
   11278:	1a000004 	bne	11290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1127c:	e24b3010 	sub	r3, fp, #16
   11280:	e1a00003 	mov	r0, r3
   11284:	eb000733 	bl	12f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11288:	e3a03001 	mov	r3, #1
   1128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11290:	ebfffcbb 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11294:	eb000513 	bl	126e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11298:	ebfffca8 	bl	10540 <vPortEnterCritical>
   1129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   112a4:	e3730001 	cmn	r3, #1
   112a8:	1a000002 	bne	112b8 <xQueueGenericSend+0xec>
   112ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112c0:	e3730001 	cmn	r3, #1
   112c4:	1a000002 	bne	112d4 <xQueueGenericSend+0x108>
   112c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112cc:	e3a02000 	mov	r2, #0
   112d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   112d4:	ebfffcaa 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112d8:	e24b2020 	sub	r2, fp, #32
   112dc:	e24b3010 	sub	r3, fp, #16
   112e0:	e1a01002 	mov	r1, r2
   112e4:	e1a00003 	mov	r0, r3
   112e8:	eb00072c 	bl	12fa0 <xTaskCheckForTimeOut>
   112ec:	e1a03000 	mov	r3, r0
   112f0:	e3530000 	cmp	r3, #0
   112f4:	1a000016 	bne	11354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   112fc:	eb000202 	bl	11b0c <prvIsQueueFull>
   11300:	e1a03000 	mov	r3, r0
   11304:	e3530000 	cmp	r3, #0
   11308:	0a00000d 	beq	11344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e2833010 	add	r3, r3, #16
   11314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   11318:	e1a01002 	mov	r1, r2
   1131c:	e1a00003 	mov	r0, r3
   11320:	eb00069f 	bl	12da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11328:	eb000195 	bl	11984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1132c:	eb0004f9 	bl	12718 <xTaskResumeAll>
   11330:	e1a03000 	mov	r3, r0
   11334:	e3530000 	cmp	r3, #0
   11338:	1affffac 	bne	111f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   1133c:	ef000000 	svc	0x00000000
   11340:	eaffffaa 	b	111f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11348:	eb00018d 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1134c:	eb0004f1 	bl	12718 <xTaskResumeAll>
   11350:	eaffffa6 	b	111f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11358:	eb000189 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1135c:	eb0004ed 	bl	12718 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11360:	e3a03000 	mov	r3, #0
		}
	}
}
   11364:	e1a00003 	mov	r0, r3
   11368:	e24bd004 	sub	sp, fp, #4
   1136c:	e8bd8800 	pop	{fp, pc}

00011370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11370:	e92d4800 	push	{fp, lr}
   11374:	e28db004 	add	fp, sp, #4
   11378:	e24dd018 	sub	sp, sp, #24
   1137c:	e50b0010 	str	r0, [fp, #-16]
   11380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1138c:	e3a03000 	mov	r3, #0
   11390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1139c:	e51b3010 	ldr	r3, [fp, #-16]
   113a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113a4:	e1520003 	cmp	r2, r3
   113a8:	2a000021 	bcs	11434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   113ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   113b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   113b4:	e51b0010 	ldr	r0, [fp, #-16]
   113b8:	eb000102 	bl	117c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   113bc:	e51b3010 	ldr	r3, [fp, #-16]
   113c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113c4:	e3730001 	cmn	r3, #1
   113c8:	1a000011 	bne	11414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113cc:	e51b3010 	ldr	r3, [fp, #-16]
   113d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0a000012 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e2833024 	add	r3, r3, #36	; 0x24
   113e4:	e1a00003 	mov	r0, r3
   113e8:	eb000694 	bl	12e40 <xTaskRemoveFromEventList>
   113ec:	e1a03000 	mov	r3, r0
   113f0:	e3530000 	cmp	r3, #0
   113f4:	0a00000b 	beq	11428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	e3530000 	cmp	r3, #0
   11400:	0a000008 	beq	11428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11408:	e3a02001 	mov	r2, #1
   1140c:	e5832000 	str	r2, [r3]
   11410:	ea000004 	b	11428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   11414:	e51b3010 	ldr	r3, [fp, #-16]
   11418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1141c:	e2832001 	add	r2, r3, #1
   11420:	e51b3010 	ldr	r3, [fp, #-16]
   11424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11428:	e3a03001 	mov	r3, #1
   1142c:	e50b3008 	str	r3, [fp, #-8]
   11430:	ea000001 	b	1143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   11434:	e3a03000 	mov	r3, #0
   11438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11440:	e1a00003 	mov	r0, r3
   11444:	e24bd004 	sub	sp, fp, #4
   11448:	e8bd8800 	pop	{fp, pc}

0001144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1144c:	e92d4800 	push	{fp, lr}
   11450:	e28db004 	add	fp, sp, #4
   11454:	e24dd020 	sub	sp, sp, #32
   11458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11468:	e3a03000 	mov	r3, #0
   1146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11470:	ebfffc32 	bl	10540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   11484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   114a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb000658 	bl	12e40 <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb000648 	bl	12e40 <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   1152c:	ebfffc14 	bl	10584 <vPortExitCritical>
				return pdPASS;
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11544:	ebfffc0e 	bl	10584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00067b 	bl	12f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11570:	ebfffc03 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11574:	eb00045b 	bl	126e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11578:	ebfffbf0 	bl	10540 <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x14c>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x168>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf2 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   115b8:	e24b2020 	sub	r2, fp, #32
   115bc:	e24b3014 	sub	r3, fp, #20
   115c0:	e1a01002 	mov	r1, r2
   115c4:	e1a00003 	mov	r0, r3
   115c8:	eb000674 	bl	12fa0 <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   115dc:	eb000129 	bl	11a88 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	e2833024 	add	r3, r3, #36	; 0x24
   115f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   115f8:	e1a01002 	mov	r1, r2
   115fc:	e1a00003 	mov	r0, r3
   11600:	eb0005e7 	bl	12da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1160c:	eb000441 	bl	12718 <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff94 	bne	11470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   1161c:	ef000000 	svc	0x00000000
   11620:	eaffff92 	b	11470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1162c:	eb000439 	bl	12718 <xTaskResumeAll>
   11630:	eaffff8e 	b	11470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1163c:	eb000435 	bl	12718 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11640:	e3a03000 	mov	r3, #0
		}
	}
}
   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11684:	e51b0010 	ldr	r0, [fp, #-16]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005db 	bl	12e40 <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11720:	e51b3008 	ldr	r3, [fp, #-8]
}
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11740:	ebfffb7e 	bl	10540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11750:	ebfffb8b 	bl	10584 <vPortExitCritical>

	return uxReturn;
   11754:	e51b3008 	ldr	r3, [fp, #-8]
}
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11780:	e51b3008 	ldr	r3, [fp, #-8]
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb000a13 	bl	14004 <vPortFree>
	vPortFree( pxQueue );
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb000a11 	bl	14004 <vPortFree>
}
   117bc:	e320f000 	nop	{0}
   117c0:	e24bd004 	sub	sp, fp, #4
   117c4:	e8bd8800 	pop	{fp, pc}

000117c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   117c8:	e92d4800 	push	{fp, lr}
   117cc:	e28db004 	add	fp, sp, #4
   117d0:	e24dd010 	sub	sp, sp, #16
   117d4:	e50b0008 	str	r0, [fp, #-8]
   117d8:	e50b100c 	str	r1, [fp, #-12]
   117dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117e0:	e51b3008 	ldr	r3, [fp, #-8]
   117e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e8:	e3530000 	cmp	r3, #0
   117ec:	0a000038 	beq	118d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117f0:	e51b3010 	ldr	r3, [fp, #-16]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	1a000018 	bne	11860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5930008 	ldr	r0, [r3, #8]
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1180c:	e1a02003 	mov	r2, r3
   11810:	e51b100c 	ldr	r1, [fp, #-12]
   11814:	eb000aff 	bl	14418 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000021 	bcc	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001c 	b	118d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593000c 	ldr	r0, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a02003 	mov	r2, r3
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	eb000ae6 	bl	14418 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   1187c:	e51b3008 	ldr	r3, [fp, #-8]
   11880:	e593200c 	ldr	r2, [r3, #12]
   11884:	e51b3008 	ldr	r3, [fp, #-8]
   11888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1188c:	e2633000 	rsb	r3, r3, #0
   11890:	e0822003 	add	r2, r2, r3
   11894:	e51b3008 	ldr	r3, [fp, #-8]
   11898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   1189c:	e51b3008 	ldr	r3, [fp, #-8]
   118a0:	e593200c 	ldr	r2, [r3, #12]
   118a4:	e51b3008 	ldr	r3, [fp, #-8]
   118a8:	e5933000 	ldr	r3, [r3]
   118ac:	e1520003 	cmp	r2, r3
   118b0:	2a000007 	bcs	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5932004 	ldr	r2, [r3, #4]
   118bc:	e51b3008 	ldr	r3, [fp, #-8]
   118c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c4:	e2633000 	rsb	r3, r3, #0
   118c8:	e0822003 	add	r2, r2, r3
   118cc:	e51b3008 	ldr	r3, [fp, #-8]
   118d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118d4:	e51b3008 	ldr	r3, [fp, #-8]
   118d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118dc:	e2832001 	add	r2, r3, #1
   118e0:	e51b3008 	ldr	r3, [fp, #-8]
   118e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118e8:	e320f000 	nop	{0}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000017 	beq	11978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593100c 	ldr	r1, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e1a02003 	mov	r2, r3
   11970:	e51b000c 	ldr	r0, [fp, #-12]
   11974:	eb000aa7 	bl	14418 <memcpy>
	}
}
   11978:	e320f000 	nop	{0}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11994:	ebfffae9 	bl	10540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb000520 	bl	12e40 <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   119c8:	eb0005b1 	bl	13094 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   119f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11a04:	ebfffade 	bl	10584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11a08:	ebfffacc 	bl	10540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb000503 	bl	12e40 <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a3c:	eb000594 	bl	13094 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   11a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a78:	ebfffac1 	bl	10584 <vPortExitCritical>
}
   11a7c:	e320f000 	nop	{0}
   11a80:	e24bd004 	sub	sp, fp, #4
   11a84:	e8bd8800 	pop	{fp, pc}

00011a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a88:	e92d4800 	push	{fp, lr}
   11a8c:	e28db004 	add	fp, sp, #4
   11a90:	e24dd010 	sub	sp, sp, #16
   11a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a98:	ebfffaa8 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a9c:	e51b3010 	ldr	r3, [fp, #-16]
   11aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa4:	e3530000 	cmp	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	13a03000 	movne	r3, #0
   11ab0:	e6ef3073 	uxtb	r3, r3
   11ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11ab8:	ebfffab1 	bl	10584 <vPortExitCritical>

	return xReturn;
   11abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ac0:	e1a00003 	mov	r0, r3
   11ac4:	e24bd004 	sub	sp, fp, #4
   11ac8:	e8bd8800 	pop	{fp, pc}

00011acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11ad0:	e28db000 	add	fp, sp, #0
   11ad4:	e24dd014 	sub	sp, sp, #20
   11ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11adc:	e51b3010 	ldr	r3, [fp, #-16]
   11ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	13a03000 	movne	r3, #0
   11af0:	e6ef3073 	uxtb	r3, r3
   11af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11afc:	e1a00003 	mov	r0, r3
   11b00:	e28bd000 	add	sp, fp, #0
   11b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b08:	e12fff1e 	bx	lr

00011b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11b0c:	e92d4800 	push	{fp, lr}
   11b10:	e28db004 	add	fp, sp, #4
   11b14:	e24dd010 	sub	sp, sp, #16
   11b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11b1c:	ebfffa87 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b20:	e51b3010 	ldr	r3, [fp, #-16]
   11b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b28:	e51b3010 	ldr	r3, [fp, #-16]
   11b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b30:	e1520003 	cmp	r2, r3
   11b34:	03a03001 	moveq	r3, #1
   11b38:	13a03000 	movne	r3, #0
   11b3c:	e6ef3073 	uxtb	r3, r3
   11b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b44:	ebfffa8e 	bl	10584 <vPortExitCritical>

	return xReturn;
   11b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b4c:	e1a00003 	mov	r0, r3
   11b50:	e24bd004 	sub	sp, fp, #4
   11b54:	e8bd8800 	pop	{fp, pc}

00011b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b5c:	e28db000 	add	fp, sp, #0
   11b60:	e24dd014 	sub	sp, sp, #20
   11b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b68:	e51b3010 	ldr	r3, [fp, #-16]
   11b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b70:	e51b3010 	ldr	r3, [fp, #-16]
   11b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	13a03000 	movne	r3, #0
   11b84:	e6ef3073 	uxtb	r3, r3
   11b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b90:	e1a00003 	mov	r0, r3
   11b94:	e28bd000 	add	sp, fp, #0
   11b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b9c:	e12fff1e 	bx	lr

00011ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11ba0:	e92d4800 	push	{fp, lr}
   11ba4:	e28db004 	add	fp, sp, #4
   11ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   11bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   11bb8:	e1a03002 	mov	r3, r2
   11bbc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11bc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bc4:	e59b100c 	ldr	r1, [fp, #12]
   11bc8:	e1a00003 	mov	r0, r3
   11bcc:	eb000603 	bl	133e0 <prvAllocateTCBAndStack>
   11bd0:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11bd4:	e51b300c 	ldr	r3, [fp, #-12]
   11bd8:	e3530000 	cmp	r3, #0
   11bdc:	0a000067 	beq	11d80 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11be0:	e51b300c 	ldr	r3, [fp, #-12]
   11be4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bec:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bf0:	e1a03103 	lsl	r3, r3, #2
   11bf4:	e0823003 	add	r3, r2, r3
   11bf8:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bfc:	e51b3010 	ldr	r3, [fp, #-16]
   11c00:	e3c33007 	bic	r3, r3, #7
   11c04:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11c08:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c0c:	e58d3000 	str	r3, [sp]
   11c10:	e59b3010 	ldr	r3, [fp, #16]
   11c14:	e59b2004 	ldr	r2, [fp, #4]
   11c18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c1c:	e51b000c 	ldr	r0, [fp, #-12]
   11c20:	eb000531 	bl	130ec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11c24:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11c28:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c2c:	e51b0010 	ldr	r0, [fp, #-16]
   11c30:	ebfff8f2 	bl	10000 <pxPortInitialiseStack>
   11c34:	e1a02000 	mov	r2, r0
   11c38:	e51b300c 	ldr	r3, [fp, #-12]
   11c3c:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c40:	e59b3008 	ldr	r3, [fp, #8]
   11c44:	e3530000 	cmp	r3, #0
   11c48:	0a000002 	beq	11c58 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c4c:	e59b3008 	ldr	r3, [fp, #8]
   11c50:	e51b200c 	ldr	r2, [fp, #-12]
   11c54:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c58:	ebfffa38 	bl	10540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c5c:	e59f316c 	ldr	r3, [pc, #364]	; 11dd0 <xTaskGenericCreate+0x230>
   11c60:	e5933000 	ldr	r3, [r3]
   11c64:	e2833001 	add	r3, r3, #1
   11c68:	e59f2160 	ldr	r2, [pc, #352]	; 11dd0 <xTaskGenericCreate+0x230>
   11c6c:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   11c70:	e59f315c 	ldr	r3, [pc, #348]	; 11dd4 <xTaskGenericCreate+0x234>
   11c74:	e5933000 	ldr	r3, [r3]
   11c78:	e3530000 	cmp	r3, #0
   11c7c:	1a000008 	bne	11ca4 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c80:	e59f214c 	ldr	r2, [pc, #332]	; 11dd4 <xTaskGenericCreate+0x234>
   11c84:	e51b300c 	ldr	r3, [fp, #-12]
   11c88:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c8c:	e59f313c 	ldr	r3, [pc, #316]	; 11dd0 <xTaskGenericCreate+0x230>
   11c90:	e5933000 	ldr	r3, [r3]
   11c94:	e3530001 	cmp	r3, #1
   11c98:	1a00000e 	bne	11cd8 <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c9c:	eb000542 	bl	131ac <prvInitialiseTaskLists>
   11ca0:	ea00000c 	b	11cd8 <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11ca4:	e59f312c 	ldr	r3, [pc, #300]	; 11dd8 <xTaskGenericCreate+0x238>
   11ca8:	e5933000 	ldr	r3, [r3]
   11cac:	e3530000 	cmp	r3, #0
   11cb0:	1a000008 	bne	11cd8 <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11cb4:	e59f3118 	ldr	r3, [pc, #280]	; 11dd4 <xTaskGenericCreate+0x234>
   11cb8:	e5933000 	ldr	r3, [r3]
   11cbc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cc0:	e59b2004 	ldr	r2, [fp, #4]
   11cc4:	e1520003 	cmp	r2, r3
   11cc8:	3a000002 	bcc	11cd8 <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   11ccc:	e59f2100 	ldr	r2, [pc, #256]	; 11dd4 <xTaskGenericCreate+0x234>
   11cd0:	e51b300c 	ldr	r3, [fp, #-12]
   11cd4:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11cd8:	e51b300c 	ldr	r3, [fp, #-12]
   11cdc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11ce0:	e59f30f4 	ldr	r3, [pc, #244]	; 11ddc <xTaskGenericCreate+0x23c>
   11ce4:	e5933000 	ldr	r3, [r3]
   11ce8:	e1520003 	cmp	r2, r3
   11cec:	9a000003 	bls	11d00 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11cf0:	e51b300c 	ldr	r3, [fp, #-12]
   11cf4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cf8:	e59f20dc 	ldr	r2, [pc, #220]	; 11ddc <xTaskGenericCreate+0x23c>
   11cfc:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11d00:	e59f30d8 	ldr	r3, [pc, #216]	; 11de0 <xTaskGenericCreate+0x240>
   11d04:	e5933000 	ldr	r3, [r3]
   11d08:	e2833001 	add	r3, r3, #1
   11d0c:	e59f20cc 	ldr	r2, [pc, #204]	; 11de0 <xTaskGenericCreate+0x240>
   11d10:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   11d14:	e51b300c 	ldr	r3, [fp, #-12]
   11d18:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d1c:	e59f30c0 	ldr	r3, [pc, #192]	; 11de4 <xTaskGenericCreate+0x244>
   11d20:	e5933000 	ldr	r3, [r3]
   11d24:	e1520003 	cmp	r2, r3
   11d28:	9a000003 	bls	11d3c <xTaskGenericCreate+0x19c>
   11d2c:	e51b300c 	ldr	r3, [fp, #-12]
   11d30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11d34:	e59f20a8 	ldr	r2, [pc, #168]	; 11de4 <xTaskGenericCreate+0x244>
   11d38:	e5823000 	str	r3, [r2]
   11d3c:	e51b300c 	ldr	r3, [fp, #-12]
   11d40:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d44:	e1a03002 	mov	r3, r2
   11d48:	e1a03103 	lsl	r3, r3, #2
   11d4c:	e0833002 	add	r3, r3, r2
   11d50:	e1a03103 	lsl	r3, r3, #2
   11d54:	e59f208c 	ldr	r2, [pc, #140]	; 11de8 <xTaskGenericCreate+0x248>
   11d58:	e0832002 	add	r2, r3, r2
   11d5c:	e51b300c 	ldr	r3, [fp, #-12]
   11d60:	e2833004 	add	r3, r3, #4
   11d64:	e1a01003 	mov	r1, r3
   11d68:	e1a00002 	mov	r0, r2
   11d6c:	ebfffc1d 	bl	10de8 <vListInsertEnd>

			xReturn = pdPASS;
   11d70:	e3a03001 	mov	r3, #1
   11d74:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d78:	ebfffa01 	bl	10584 <vPortExitCritical>
   11d7c:	ea000001 	b	11d88 <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d80:	e3e03000 	mvn	r3, #0
   11d84:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d88:	e51b3008 	ldr	r3, [fp, #-8]
   11d8c:	e3530001 	cmp	r3, #1
   11d90:	1a00000a 	bne	11dc0 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   11d94:	e59f303c 	ldr	r3, [pc, #60]	; 11dd8 <xTaskGenericCreate+0x238>
   11d98:	e5933000 	ldr	r3, [r3]
   11d9c:	e3530000 	cmp	r3, #0
   11da0:	0a000006 	beq	11dc0 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11da4:	e59f3028 	ldr	r3, [pc, #40]	; 11dd4 <xTaskGenericCreate+0x234>
   11da8:	e5933000 	ldr	r3, [r3]
   11dac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11db0:	e59b2004 	ldr	r2, [fp, #4]
   11db4:	e1520003 	cmp	r2, r3
   11db8:	9a000000 	bls	11dc0 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   11dbc:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11dc0:	e51b3008 	ldr	r3, [fp, #-8]
}
   11dc4:	e1a00003 	mov	r0, r3
   11dc8:	e24bd004 	sub	sp, fp, #4
   11dcc:	e8bd8800 	pop	{fp, pc}
   11dd0:	000148cc 	andeq	r4, r1, ip, asr #17
   11dd4:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11dd8:	000148dc 	ldrdeq	r4, [r1], -ip
   11ddc:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11de0:	000148f0 	strdeq	r4, [r1], -r0
   11de4:	000148d8 	ldrdeq	r4, [r1], -r8
   11de8:	000147f8 	strdeq	r4, [r1], -r8

00011dec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11dec:	e92d4800 	push	{fp, lr}
   11df0:	e28db004 	add	fp, sp, #4
   11df4:	e24dd010 	sub	sp, sp, #16
   11df8:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11dfc:	ebfff9cf 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11e00:	e59f30d0 	ldr	r3, [pc, #208]	; 11ed8 <vTaskDelete+0xec>
   11e04:	e5933000 	ldr	r3, [r3]
   11e08:	e51b2010 	ldr	r2, [fp, #-16]
   11e0c:	e1520003 	cmp	r2, r3
   11e10:	1a000001 	bne	11e1c <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11e14:	e3a03000 	mov	r3, #0
   11e18:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11e1c:	e51b3010 	ldr	r3, [fp, #-16]
   11e20:	e3530000 	cmp	r3, #0
   11e24:	1a000002 	bne	11e34 <vTaskDelete+0x48>
   11e28:	e59f30a8 	ldr	r3, [pc, #168]	; 11ed8 <vTaskDelete+0xec>
   11e2c:	e5933000 	ldr	r3, [r3]
   11e30:	ea000000 	b	11e38 <vTaskDelete+0x4c>
   11e34:	e51b3010 	ldr	r3, [fp, #-16]
   11e38:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e3c:	e51b3008 	ldr	r3, [fp, #-8]
   11e40:	e2833004 	add	r3, r3, #4
   11e44:	e1a00003 	mov	r0, r3
   11e48:	ebfffc42 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e4c:	e51b3008 	ldr	r3, [fp, #-8]
   11e50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e54:	e3530000 	cmp	r3, #0
   11e58:	0a000003 	beq	11e6c <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e5c:	e51b3008 	ldr	r3, [fp, #-8]
   11e60:	e2833018 	add	r3, r3, #24
   11e64:	e1a00003 	mov	r0, r3
   11e68:	ebfffc3a 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e6c:	e51b3008 	ldr	r3, [fp, #-8]
   11e70:	e2833004 	add	r3, r3, #4
   11e74:	e1a01003 	mov	r1, r3
   11e78:	e59f005c 	ldr	r0, [pc, #92]	; 11edc <vTaskDelete+0xf0>
   11e7c:	ebfffbd9 	bl	10de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e80:	e59f3058 	ldr	r3, [pc, #88]	; 11ee0 <vTaskDelete+0xf4>
   11e84:	e5933000 	ldr	r3, [r3]
   11e88:	e2833001 	add	r3, r3, #1
   11e8c:	e59f204c 	ldr	r2, [pc, #76]	; 11ee0 <vTaskDelete+0xf4>
   11e90:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e94:	e59f3048 	ldr	r3, [pc, #72]	; 11ee4 <vTaskDelete+0xf8>
   11e98:	e5933000 	ldr	r3, [r3]
   11e9c:	e2833001 	add	r3, r3, #1
   11ea0:	e59f203c 	ldr	r2, [pc, #60]	; 11ee4 <vTaskDelete+0xf8>
   11ea4:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11ea8:	ebfff9b5 	bl	10584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11eac:	e59f3034 	ldr	r3, [pc, #52]	; 11ee8 <vTaskDelete+0xfc>
   11eb0:	e5933000 	ldr	r3, [r3]
   11eb4:	e3530000 	cmp	r3, #0
   11eb8:	0a000003 	beq	11ecc <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11ebc:	e51b3010 	ldr	r3, [fp, #-16]
   11ec0:	e3530000 	cmp	r3, #0
   11ec4:	1a000000 	bne	11ecc <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11ec8:	ef000000 	svc	0x00000000
			}
		}
	}
   11ecc:	e320f000 	nop	{0}
   11ed0:	e24bd004 	sub	sp, fp, #4
   11ed4:	e8bd8800 	pop	{fp, pc}
   11ed8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11edc:	000148a0 	andeq	r4, r1, r0, lsr #17
   11ee0:	000148b4 			; <UNDEFINED> instruction: 0x000148b4
   11ee4:	000148f0 	strdeq	r4, [r1], -r0
   11ee8:	000148dc 	ldrdeq	r4, [r1], -ip

00011eec <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11eec:	e92d4800 	push	{fp, lr}
   11ef0:	e28db004 	add	fp, sp, #4
   11ef4:	e24dd018 	sub	sp, sp, #24
   11ef8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11efc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11f00:	e3a03000 	mov	r3, #0
   11f04:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11f08:	eb0001f6 	bl	126e8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f10:	e5933000 	ldr	r3, [r3]
   11f14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11f18:	e0823003 	add	r3, r2, r3
   11f1c:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f24:	e5932000 	ldr	r2, [r3]
   11f28:	e59f30c4 	ldr	r3, [pc, #196]	; 11ff4 <vTaskDelayUntil+0x108>
   11f2c:	e5933000 	ldr	r3, [r3]
   11f30:	e1520003 	cmp	r2, r3
   11f34:	9a00000c 	bls	11f6c <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f3c:	e5933000 	ldr	r3, [r3]
   11f40:	e51b200c 	ldr	r2, [fp, #-12]
   11f44:	e1520003 	cmp	r2, r3
   11f48:	2a000013 	bcs	11f9c <vTaskDelayUntil+0xb0>
   11f4c:	e59f30a0 	ldr	r3, [pc, #160]	; 11ff4 <vTaskDelayUntil+0x108>
   11f50:	e5933000 	ldr	r3, [r3]
   11f54:	e51b200c 	ldr	r2, [fp, #-12]
   11f58:	e1520003 	cmp	r2, r3
   11f5c:	9a00000e 	bls	11f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f60:	e3a03001 	mov	r3, #1
   11f64:	e50b3008 	str	r3, [fp, #-8]
   11f68:	ea00000b 	b	11f9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f70:	e5933000 	ldr	r3, [r3]
   11f74:	e51b200c 	ldr	r2, [fp, #-12]
   11f78:	e1520003 	cmp	r2, r3
   11f7c:	3a000004 	bcc	11f94 <vTaskDelayUntil+0xa8>
   11f80:	e59f306c 	ldr	r3, [pc, #108]	; 11ff4 <vTaskDelayUntil+0x108>
   11f84:	e5933000 	ldr	r3, [r3]
   11f88:	e51b200c 	ldr	r2, [fp, #-12]
   11f8c:	e1520003 	cmp	r2, r3
   11f90:	9a000001 	bls	11f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f94:	e3a03001 	mov	r3, #1
   11f98:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fa0:	e51b200c 	ldr	r2, [fp, #-12]
   11fa4:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11fa8:	e51b3008 	ldr	r3, [fp, #-8]
   11fac:	e3530000 	cmp	r3, #0
   11fb0:	0a000006 	beq	11fd0 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11fb4:	e59f303c 	ldr	r3, [pc, #60]	; 11ff8 <vTaskDelayUntil+0x10c>
   11fb8:	e5933000 	ldr	r3, [r3]
   11fbc:	e2833004 	add	r3, r3, #4
   11fc0:	e1a00003 	mov	r0, r3
   11fc4:	ebfffbe3 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11fc8:	e51b000c 	ldr	r0, [fp, #-12]
   11fcc:	eb0004d5 	bl	13328 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11fd0:	eb0001d0 	bl	12718 <xTaskResumeAll>
   11fd4:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11fd8:	e51b3010 	ldr	r3, [fp, #-16]
   11fdc:	e3530000 	cmp	r3, #0
   11fe0:	1a000000 	bne	11fe8 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fe4:	ef000000 	svc	0x00000000
		}
	}
   11fe8:	e320f000 	nop	{0}
   11fec:	e24bd004 	sub	sp, fp, #4
   11ff0:	e8bd8800 	pop	{fp, pc}
   11ff4:	000148d0 	ldrdeq	r4, [r1], -r0
   11ff8:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00011ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11ffc:	e92d4800 	push	{fp, lr}
   12000:	e28db004 	add	fp, sp, #4
   12004:	e24dd010 	sub	sp, sp, #16
   12008:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   1200c:	e3a03000 	mov	r3, #0
   12010:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12014:	e51b3010 	ldr	r3, [fp, #-16]
   12018:	e3530000 	cmp	r3, #0
   1201c:	0a00000e 	beq	1205c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   12020:	eb0001b0 	bl	126e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12024:	e59f304c 	ldr	r3, [pc, #76]	; 12078 <vTaskDelay+0x7c>
   12028:	e5933000 	ldr	r3, [r3]
   1202c:	e51b2010 	ldr	r2, [fp, #-16]
   12030:	e0823003 	add	r3, r2, r3
   12034:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12038:	e59f303c 	ldr	r3, [pc, #60]	; 1207c <vTaskDelay+0x80>
   1203c:	e5933000 	ldr	r3, [r3]
   12040:	e2833004 	add	r3, r3, #4
   12044:	e1a00003 	mov	r0, r3
   12048:	ebfffbc2 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   1204c:	e51b000c 	ldr	r0, [fp, #-12]
   12050:	eb0004b4 	bl	13328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12054:	eb0001af 	bl	12718 <xTaskResumeAll>
   12058:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1205c:	e51b3008 	ldr	r3, [fp, #-8]
   12060:	e3530000 	cmp	r3, #0
   12064:	1a000000 	bne	1206c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12068:	ef000000 	svc	0x00000000
		}
	}
   1206c:	e320f000 	nop	{0}
   12070:	e24bd004 	sub	sp, fp, #4
   12074:	e8bd8800 	pop	{fp, pc}
   12078:	000148d0 	ldrdeq	r4, [r1], -r0
   1207c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012080 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   12080:	e92d4800 	push	{fp, lr}
   12084:	e28db004 	add	fp, sp, #4
   12088:	e24dd010 	sub	sp, sp, #16
   1208c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   12090:	ebfff92a 	bl	10540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12094:	e51b3010 	ldr	r3, [fp, #-16]
   12098:	e3530000 	cmp	r3, #0
   1209c:	1a000002 	bne	120ac <uxTaskPriorityGet+0x2c>
   120a0:	e59f302c 	ldr	r3, [pc, #44]	; 120d4 <uxTaskPriorityGet+0x54>
   120a4:	e5933000 	ldr	r3, [r3]
   120a8:	ea000000 	b	120b0 <uxTaskPriorityGet+0x30>
   120ac:	e51b3010 	ldr	r3, [fp, #-16]
   120b0:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   120b4:	e51b3008 	ldr	r3, [fp, #-8]
   120b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120bc:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   120c0:	ebfff92f 	bl	10584 <vPortExitCritical>

		return uxReturn;
   120c4:	e51b300c 	ldr	r3, [fp, #-12]
	}
   120c8:	e1a00003 	mov	r0, r3
   120cc:	e24bd004 	sub	sp, fp, #4
   120d0:	e8bd8800 	pop	{fp, pc}
   120d4:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000120d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   120d8:	e92d4800 	push	{fp, lr}
   120dc:	e28db004 	add	fp, sp, #4
   120e0:	e24dd018 	sub	sp, sp, #24
   120e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120ec:	e3a03000 	mov	r3, #0
   120f0:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f8:	e3530004 	cmp	r3, #4
   120fc:	9a000001 	bls	12108 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   12100:	e3a03004 	mov	r3, #4
   12104:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   12108:	ebfff90c 	bl	10540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   1210c:	e59f3160 	ldr	r3, [pc, #352]	; 12274 <vTaskPrioritySet+0x19c>
   12110:	e5933000 	ldr	r3, [r3]
   12114:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12118:	e1520003 	cmp	r2, r3
   1211c:	1a000001 	bne	12128 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   12120:	e3a03000 	mov	r3, #0
   12124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1212c:	e3530000 	cmp	r3, #0
   12130:	1a000002 	bne	12140 <vTaskPrioritySet+0x68>
   12134:	e59f3138 	ldr	r3, [pc, #312]	; 12274 <vTaskPrioritySet+0x19c>
   12138:	e5933000 	ldr	r3, [r3]
   1213c:	ea000000 	b	12144 <vTaskPrioritySet+0x6c>
   12140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12144:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12148:	e51b300c 	ldr	r3, [fp, #-12]
   1214c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12150:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12154:	e51b2010 	ldr	r2, [fp, #-16]
   12158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1215c:	e1520003 	cmp	r2, r3
   12160:	0a00003f 	beq	12264 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   12168:	e51b3010 	ldr	r3, [fp, #-16]
   1216c:	e1520003 	cmp	r2, r3
   12170:	9a000005 	bls	1218c <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12178:	e3530000 	cmp	r3, #0
   1217c:	0a000007 	beq	121a0 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   12180:	e3a03001 	mov	r3, #1
   12184:	e50b3008 	str	r3, [fp, #-8]
   12188:	ea000004 	b	121a0 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   1218c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12190:	e3530000 	cmp	r3, #0
   12194:	1a000001 	bne	121a0 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12198:	e3a03001 	mov	r3, #1
   1219c:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   121a0:	e51b300c 	ldr	r3, [fp, #-12]
   121a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   121a8:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   121ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   121b0:	e2632005 	rsb	r2, r3, #5
   121b4:	e51b300c 	ldr	r3, [fp, #-12]
   121b8:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   121bc:	e51b300c 	ldr	r3, [fp, #-12]
   121c0:	e5931014 	ldr	r1, [r3, #20]
   121c4:	e51b2010 	ldr	r2, [fp, #-16]
   121c8:	e1a03002 	mov	r3, r2
   121cc:	e1a03103 	lsl	r3, r3, #2
   121d0:	e0833002 	add	r3, r3, r2
   121d4:	e1a03103 	lsl	r3, r3, #2
   121d8:	e59f2098 	ldr	r2, [pc, #152]	; 12278 <vTaskPrioritySet+0x1a0>
   121dc:	e0833002 	add	r3, r3, r2
   121e0:	e1510003 	cmp	r1, r3
   121e4:	1a00001a 	bne	12254 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121e8:	e51b300c 	ldr	r3, [fp, #-12]
   121ec:	e2833004 	add	r3, r3, #4
   121f0:	e1a00003 	mov	r0, r3
   121f4:	ebfffb57 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121f8:	e51b300c 	ldr	r3, [fp, #-12]
   121fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12200:	e59f3074 	ldr	r3, [pc, #116]	; 1227c <vTaskPrioritySet+0x1a4>
   12204:	e5933000 	ldr	r3, [r3]
   12208:	e1520003 	cmp	r2, r3
   1220c:	9a000003 	bls	12220 <vTaskPrioritySet+0x148>
   12210:	e51b300c 	ldr	r3, [fp, #-12]
   12214:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12218:	e59f205c 	ldr	r2, [pc, #92]	; 1227c <vTaskPrioritySet+0x1a4>
   1221c:	e5823000 	str	r3, [r2]
   12220:	e51b300c 	ldr	r3, [fp, #-12]
   12224:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12228:	e1a03002 	mov	r3, r2
   1222c:	e1a03103 	lsl	r3, r3, #2
   12230:	e0833002 	add	r3, r3, r2
   12234:	e1a03103 	lsl	r3, r3, #2
   12238:	e59f2038 	ldr	r2, [pc, #56]	; 12278 <vTaskPrioritySet+0x1a0>
   1223c:	e0832002 	add	r2, r3, r2
   12240:	e51b300c 	ldr	r3, [fp, #-12]
   12244:	e2833004 	add	r3, r3, #4
   12248:	e1a01003 	mov	r1, r3
   1224c:	e1a00002 	mov	r0, r2
   12250:	ebfffae4 	bl	10de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12254:	e51b3008 	ldr	r3, [fp, #-8]
   12258:	e3530001 	cmp	r3, #1
   1225c:	1a000000 	bne	12264 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   12260:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12264:	ebfff8c6 	bl	10584 <vPortExitCritical>
	}
   12268:	e320f000 	nop	{0}
   1226c:	e24bd004 	sub	sp, fp, #4
   12270:	e8bd8800 	pop	{fp, pc}
   12274:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12278:	000147f8 	strdeq	r4, [r1], -r8
   1227c:	000148d8 	ldrdeq	r4, [r1], -r8

00012280 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12280:	e92d4800 	push	{fp, lr}
   12284:	e28db004 	add	fp, sp, #4
   12288:	e24dd010 	sub	sp, sp, #16
   1228c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12290:	ebfff8aa 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12294:	e59f30d8 	ldr	r3, [pc, #216]	; 12374 <vTaskSuspend+0xf4>
   12298:	e5933000 	ldr	r3, [r3]
   1229c:	e51b2010 	ldr	r2, [fp, #-16]
   122a0:	e1520003 	cmp	r2, r3
   122a4:	1a000001 	bne	122b0 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   122a8:	e3a03000 	mov	r3, #0
   122ac:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   122b0:	e51b3010 	ldr	r3, [fp, #-16]
   122b4:	e3530000 	cmp	r3, #0
   122b8:	1a000002 	bne	122c8 <vTaskSuspend+0x48>
   122bc:	e59f30b0 	ldr	r3, [pc, #176]	; 12374 <vTaskSuspend+0xf4>
   122c0:	e5933000 	ldr	r3, [r3]
   122c4:	ea000000 	b	122cc <vTaskSuspend+0x4c>
   122c8:	e51b3010 	ldr	r3, [fp, #-16]
   122cc:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   122d0:	e51b3008 	ldr	r3, [fp, #-8]
   122d4:	e2833004 	add	r3, r3, #4
   122d8:	e1a00003 	mov	r0, r3
   122dc:	ebfffb1d 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   122e0:	e51b3008 	ldr	r3, [fp, #-8]
   122e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122e8:	e3530000 	cmp	r3, #0
   122ec:	0a000003 	beq	12300 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122f0:	e51b3008 	ldr	r3, [fp, #-8]
   122f4:	e2833018 	add	r3, r3, #24
   122f8:	e1a00003 	mov	r0, r3
   122fc:	ebfffb15 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   12300:	e51b3008 	ldr	r3, [fp, #-8]
   12304:	e2833004 	add	r3, r3, #4
   12308:	e1a01003 	mov	r1, r3
   1230c:	e59f0064 	ldr	r0, [pc, #100]	; 12378 <vTaskSuspend+0xf8>
   12310:	ebfffab4 	bl	10de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   12314:	ebfff89a 	bl	10584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12318:	e51b3010 	ldr	r3, [fp, #-16]
   1231c:	e3530000 	cmp	r3, #0
   12320:	1a000010 	bne	12368 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   12324:	e59f3050 	ldr	r3, [pc, #80]	; 1237c <vTaskSuspend+0xfc>
   12328:	e5933000 	ldr	r3, [r3]
   1232c:	e3530000 	cmp	r3, #0
   12330:	0a000001 	beq	1233c <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12334:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   12338:	ea00000a 	b	12368 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1233c:	e59f3034 	ldr	r3, [pc, #52]	; 12378 <vTaskSuspend+0xf8>
   12340:	e5932000 	ldr	r2, [r3]
   12344:	e59f3034 	ldr	r3, [pc, #52]	; 12380 <vTaskSuspend+0x100>
   12348:	e5933000 	ldr	r3, [r3]
   1234c:	e1520003 	cmp	r2, r3
   12350:	1a000003 	bne	12364 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   12354:	e59f3018 	ldr	r3, [pc, #24]	; 12374 <vTaskSuspend+0xf4>
   12358:	e3a02000 	mov	r2, #0
   1235c:	e5832000 	str	r2, [r3]
	}
   12360:	ea000000 	b	12368 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   12364:	eb00024c 	bl	12c9c <vTaskSwitchContext>
	}
   12368:	e320f000 	nop	{0}
   1236c:	e24bd004 	sub	sp, fp, #4
   12370:	e8bd8800 	pop	{fp, pc}
   12374:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12378:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   1237c:	000148dc 	ldrdeq	r4, [r1], -ip
   12380:	000148cc 	andeq	r4, r1, ip, asr #17

00012384 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12384:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12388:	e28db000 	add	fp, sp, #0
   1238c:	e24dd014 	sub	sp, sp, #20
   12390:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12394:	e3a03000 	mov	r3, #0
   12398:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   1239c:	e51b3010 	ldr	r3, [fp, #-16]
   123a0:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   123a4:	e51b300c 	ldr	r3, [fp, #-12]
   123a8:	e5933014 	ldr	r3, [r3, #20]
   123ac:	e59f2044 	ldr	r2, [pc, #68]	; 123f8 <xTaskIsTaskSuspended+0x74>
   123b0:	e1530002 	cmp	r3, r2
   123b4:	1a00000a 	bne	123e4 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   123b8:	e51b300c 	ldr	r3, [fp, #-12]
   123bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123c0:	e59f2034 	ldr	r2, [pc, #52]	; 123fc <xTaskIsTaskSuspended+0x78>
   123c4:	e1530002 	cmp	r3, r2
   123c8:	0a000005 	beq	123e4 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   123cc:	e51b300c 	ldr	r3, [fp, #-12]
   123d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123d4:	e3530000 	cmp	r3, #0
   123d8:	1a000001 	bne	123e4 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   123dc:	e3a03001 	mov	r3, #1
   123e0:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   123e4:	e51b3008 	ldr	r3, [fp, #-8]
	}
   123e8:	e1a00003 	mov	r0, r3
   123ec:	e28bd000 	add	sp, fp, #0
   123f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123f4:	e12fff1e 	bx	lr
   123f8:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   123fc:	0001488c 	andeq	r4, r1, ip, lsl #17

00012400 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   12400:	e92d4800 	push	{fp, lr}
   12404:	e28db004 	add	fp, sp, #4
   12408:	e24dd010 	sub	sp, sp, #16
   1240c:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   12410:	e51b3010 	ldr	r3, [fp, #-16]
   12414:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12418:	e51b3008 	ldr	r3, [fp, #-8]
   1241c:	e3530000 	cmp	r3, #0
   12420:	0a00002e 	beq	124e0 <vTaskResume+0xe0>
   12424:	e59f30c0 	ldr	r3, [pc, #192]	; 124ec <vTaskResume+0xec>
   12428:	e5933000 	ldr	r3, [r3]
   1242c:	e51b2008 	ldr	r2, [fp, #-8]
   12430:	e1520003 	cmp	r2, r3
   12434:	0a000029 	beq	124e0 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   12438:	ebfff840 	bl	10540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   1243c:	e51b0008 	ldr	r0, [fp, #-8]
   12440:	ebffffcf 	bl	12384 <xTaskIsTaskSuspended>
   12444:	e1a03000 	mov	r3, r0
   12448:	e3530001 	cmp	r3, #1
   1244c:	1a000022 	bne	124dc <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12450:	e51b3008 	ldr	r3, [fp, #-8]
   12454:	e2833004 	add	r3, r3, #4
   12458:	e1a00003 	mov	r0, r3
   1245c:	ebfffabd 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12460:	e51b3008 	ldr	r3, [fp, #-8]
   12464:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12468:	e59f3080 	ldr	r3, [pc, #128]	; 124f0 <vTaskResume+0xf0>
   1246c:	e5933000 	ldr	r3, [r3]
   12470:	e1520003 	cmp	r2, r3
   12474:	9a000003 	bls	12488 <vTaskResume+0x88>
   12478:	e51b3008 	ldr	r3, [fp, #-8]
   1247c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12480:	e59f2068 	ldr	r2, [pc, #104]	; 124f0 <vTaskResume+0xf0>
   12484:	e5823000 	str	r3, [r2]
   12488:	e51b3008 	ldr	r3, [fp, #-8]
   1248c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12490:	e1a03002 	mov	r3, r2
   12494:	e1a03103 	lsl	r3, r3, #2
   12498:	e0833002 	add	r3, r3, r2
   1249c:	e1a03103 	lsl	r3, r3, #2
   124a0:	e59f204c 	ldr	r2, [pc, #76]	; 124f4 <vTaskResume+0xf4>
   124a4:	e0832002 	add	r2, r3, r2
   124a8:	e51b3008 	ldr	r3, [fp, #-8]
   124ac:	e2833004 	add	r3, r3, #4
   124b0:	e1a01003 	mov	r1, r3
   124b4:	e1a00002 	mov	r0, r2
   124b8:	ebfffa4a 	bl	10de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   124bc:	e51b3008 	ldr	r3, [fp, #-8]
   124c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124c4:	e59f3020 	ldr	r3, [pc, #32]	; 124ec <vTaskResume+0xec>
   124c8:	e5933000 	ldr	r3, [r3]
   124cc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124d0:	e1520003 	cmp	r2, r3
   124d4:	3a000000 	bcc	124dc <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   124d8:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   124dc:	ebfff828 	bl	10584 <vPortExitCritical>
		}
	}
   124e0:	e320f000 	nop	{0}
   124e4:	e24bd004 	sub	sp, fp, #4
   124e8:	e8bd8800 	pop	{fp, pc}
   124ec:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   124f0:	000148d8 	ldrdeq	r4, [r1], -r8
   124f4:	000147f8 	strdeq	r4, [r1], -r8

000124f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124f8:	e92d4800 	push	{fp, lr}
   124fc:	e28db004 	add	fp, sp, #4
   12500:	e24dd018 	sub	sp, sp, #24
   12504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   12508:	e3a03000 	mov	r3, #0
   1250c:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   12510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12514:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12518:	e3a03000 	mov	r3, #0
   1251c:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12520:	e51b000c 	ldr	r0, [fp, #-12]
   12524:	ebffff96 	bl	12384 <xTaskIsTaskSuspended>
   12528:	e1a03000 	mov	r3, r0
   1252c:	e3530001 	cmp	r3, #1
   12530:	1a00002e 	bne	125f0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12534:	e59f30c4 	ldr	r3, [pc, #196]	; 12600 <xTaskResumeFromISR+0x108>
   12538:	e5933000 	ldr	r3, [r3]
   1253c:	e3530000 	cmp	r3, #0
   12540:	1a000025 	bne	125dc <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12544:	e51b300c 	ldr	r3, [fp, #-12]
   12548:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1254c:	e59f30b0 	ldr	r3, [pc, #176]	; 12604 <xTaskResumeFromISR+0x10c>
   12550:	e5933000 	ldr	r3, [r3]
   12554:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12558:	e1520003 	cmp	r2, r3
   1255c:	23a03001 	movcs	r3, #1
   12560:	33a03000 	movcc	r3, #0
   12564:	e6ef3073 	uxtb	r3, r3
   12568:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1256c:	e51b300c 	ldr	r3, [fp, #-12]
   12570:	e2833004 	add	r3, r3, #4
   12574:	e1a00003 	mov	r0, r3
   12578:	ebfffa76 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1257c:	e51b300c 	ldr	r3, [fp, #-12]
   12580:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12584:	e59f307c 	ldr	r3, [pc, #124]	; 12608 <xTaskResumeFromISR+0x110>
   12588:	e5933000 	ldr	r3, [r3]
   1258c:	e1520003 	cmp	r2, r3
   12590:	9a000003 	bls	125a4 <xTaskResumeFromISR+0xac>
   12594:	e51b300c 	ldr	r3, [fp, #-12]
   12598:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1259c:	e59f2064 	ldr	r2, [pc, #100]	; 12608 <xTaskResumeFromISR+0x110>
   125a0:	e5823000 	str	r3, [r2]
   125a4:	e51b300c 	ldr	r3, [fp, #-12]
   125a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   125ac:	e1a03002 	mov	r3, r2
   125b0:	e1a03103 	lsl	r3, r3, #2
   125b4:	e0833002 	add	r3, r3, r2
   125b8:	e1a03103 	lsl	r3, r3, #2
   125bc:	e59f2048 	ldr	r2, [pc, #72]	; 1260c <xTaskResumeFromISR+0x114>
   125c0:	e0832002 	add	r2, r3, r2
   125c4:	e51b300c 	ldr	r3, [fp, #-12]
   125c8:	e2833004 	add	r3, r3, #4
   125cc:	e1a01003 	mov	r1, r3
   125d0:	e1a00002 	mov	r0, r2
   125d4:	ebfffa03 	bl	10de8 <vListInsertEnd>
   125d8:	ea000004 	b	125f0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   125dc:	e51b300c 	ldr	r3, [fp, #-12]
   125e0:	e2833018 	add	r3, r3, #24
   125e4:	e1a01003 	mov	r1, r3
   125e8:	e59f0020 	ldr	r0, [pc, #32]	; 12610 <xTaskResumeFromISR+0x118>
   125ec:	ebfff9fd 	bl	10de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125f0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125f4:	e1a00003 	mov	r0, r3
   125f8:	e24bd004 	sub	sp, fp, #4
   125fc:	e8bd8800 	pop	{fp, pc}
   12600:	000148e0 	andeq	r4, r1, r0, ror #17
   12604:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12608:	000148d8 	ldrdeq	r4, [r1], -r8
   1260c:	000147f8 	strdeq	r4, [r1], -r8
   12610:	0001488c 	andeq	r4, r1, ip, lsl #17

00012614 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12614:	e92d4800 	push	{fp, lr}
   12618:	e28db004 	add	fp, sp, #4
   1261c:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   12620:	e3a03000 	mov	r3, #0
   12624:	e58d300c 	str	r3, [sp, #12]
   12628:	e3a03000 	mov	r3, #0
   1262c:	e58d3008 	str	r3, [sp, #8]
   12630:	e3a03000 	mov	r3, #0
   12634:	e58d3004 	str	r3, [sp, #4]
   12638:	e3a03000 	mov	r3, #0
   1263c:	e58d3000 	str	r3, [sp]
   12640:	e3a03000 	mov	r3, #0
   12644:	e3a02080 	mov	r2, #128	; 0x80
   12648:	e59f1050 	ldr	r1, [pc, #80]	; 126a0 <vTaskStartScheduler+0x8c>
   1264c:	e59f0050 	ldr	r0, [pc, #80]	; 126a4 <vTaskStartScheduler+0x90>
   12650:	ebfffd52 	bl	11ba0 <xTaskGenericCreate>
   12654:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12658:	e51b3008 	ldr	r3, [fp, #-8]
   1265c:	e3530001 	cmp	r3, #1
   12660:	1a00000b 	bne	12694 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12664:	e92d0001 	stmfd	sp!, {r0}
   12668:	e10f0000 	mrs	r0, CPSR
   1266c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12670:	e129f000 	msr	CPSR_fc, r0
   12674:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12678:	e59f3028 	ldr	r3, [pc, #40]	; 126a8 <vTaskStartScheduler+0x94>
   1267c:	e3a02001 	mov	r2, #1
   12680:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12684:	e59f3020 	ldr	r3, [pc, #32]	; 126ac <vTaskStartScheduler+0x98>
   12688:	e3a02000 	mov	r2, #0
   1268c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12690:	ebfff6ea 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12694:	e320f000 	nop	{0}
   12698:	e24bd004 	sub	sp, fp, #4
   1269c:	e8bd8800 	pop	{fp, pc}
   126a0:	00014738 	andeq	r4, r1, r8, lsr r7
   126a4:	000130bc 	strheq	r3, [r1], -ip
   126a8:	000148dc 	ldrdeq	r4, [r1], -ip
   126ac:	000148d0 	ldrdeq	r4, [r1], -r0

000126b0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   126b0:	e92d4800 	push	{fp, lr}
   126b4:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   126b8:	e92d0001 	stmfd	sp!, {r0}
   126bc:	e10f0000 	mrs	r0, CPSR
   126c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126c4:	e129f000 	msr	CPSR_fc, r0
   126c8:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   126cc:	e59f3010 	ldr	r3, [pc, #16]	; 126e4 <vTaskEndScheduler+0x34>
   126d0:	e3a02000 	mov	r2, #0
   126d4:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   126d8:	ebfff6df 	bl	1025c <vPortEndScheduler>
}
   126dc:	e320f000 	nop	{0}
   126e0:	e8bd8800 	pop	{fp, pc}
   126e4:	000148dc 	ldrdeq	r4, [r1], -ip

000126e8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   126e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126ec:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   126f0:	e59f301c 	ldr	r3, [pc, #28]	; 12714 <vTaskSuspendAll+0x2c>
   126f4:	e5933000 	ldr	r3, [r3]
   126f8:	e2833001 	add	r3, r3, #1
   126fc:	e59f2010 	ldr	r2, [pc, #16]	; 12714 <vTaskSuspendAll+0x2c>
   12700:	e5823000 	str	r3, [r2]
}
   12704:	e320f000 	nop	{0}
   12708:	e28bd000 	add	sp, fp, #0
   1270c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12710:	e12fff1e 	bx	lr
   12714:	000148e0 	andeq	r4, r1, r0, ror #17

00012718 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12718:	e92d4810 	push	{r4, fp, lr}
   1271c:	e28db008 	add	fp, sp, #8
   12720:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12724:	e3a03000 	mov	r3, #0
   12728:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1272c:	ebfff783 	bl	10540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   12730:	e59f3164 	ldr	r3, [pc, #356]	; 1289c <xTaskResumeAll+0x184>
   12734:	e5933000 	ldr	r3, [r3]
   12738:	e2433001 	sub	r3, r3, #1
   1273c:	e59f2158 	ldr	r2, [pc, #344]	; 1289c <xTaskResumeAll+0x184>
   12740:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12744:	e59f3150 	ldr	r3, [pc, #336]	; 1289c <xTaskResumeAll+0x184>
   12748:	e5933000 	ldr	r3, [r3]
   1274c:	e3530000 	cmp	r3, #0
   12750:	1a00004c 	bne	12888 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   12754:	e59f3144 	ldr	r3, [pc, #324]	; 128a0 <xTaskResumeAll+0x188>
   12758:	e5933000 	ldr	r3, [r3]
   1275c:	e3530000 	cmp	r3, #0
   12760:	0a000048 	beq	12888 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12764:	e3a03000 	mov	r3, #0
   12768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   1276c:	ea000023 	b	12800 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   12770:	e59f312c 	ldr	r3, [pc, #300]	; 128a4 <xTaskResumeAll+0x18c>
   12774:	e593300c 	ldr	r3, [r3, #12]
   12778:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   1277c:	e2843018 	add	r3, r4, #24
   12780:	e1a00003 	mov	r0, r3
   12784:	ebfff9f3 	bl	10f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   12788:	e2843004 	add	r3, r4, #4
   1278c:	e1a00003 	mov	r0, r3
   12790:	ebfff9f0 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12794:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12798:	e59f3108 	ldr	r3, [pc, #264]	; 128a8 <xTaskResumeAll+0x190>
   1279c:	e5933000 	ldr	r3, [r3]
   127a0:	e1520003 	cmp	r2, r3
   127a4:	9a000002 	bls	127b4 <xTaskResumeAll+0x9c>
   127a8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   127ac:	e59f20f4 	ldr	r2, [pc, #244]	; 128a8 <xTaskResumeAll+0x190>
   127b0:	e5823000 	str	r3, [r2]
   127b4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b8:	e1a03002 	mov	r3, r2
   127bc:	e1a03103 	lsl	r3, r3, #2
   127c0:	e0833002 	add	r3, r3, r2
   127c4:	e1a03103 	lsl	r3, r3, #2
   127c8:	e59f20dc 	ldr	r2, [pc, #220]	; 128ac <xTaskResumeAll+0x194>
   127cc:	e0833002 	add	r3, r3, r2
   127d0:	e2842004 	add	r2, r4, #4
   127d4:	e1a01002 	mov	r1, r2
   127d8:	e1a00003 	mov	r0, r3
   127dc:	ebfff981 	bl	10de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   127e0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127e4:	e59f30c4 	ldr	r3, [pc, #196]	; 128b0 <xTaskResumeAll+0x198>
   127e8:	e5933000 	ldr	r3, [r3]
   127ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127f0:	e1520003 	cmp	r2, r3
   127f4:	3a000001 	bcc	12800 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   127f8:	e3a03001 	mov	r3, #1
   127fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12800:	e59f309c 	ldr	r3, [pc, #156]	; 128a4 <xTaskResumeAll+0x18c>
   12804:	e5933000 	ldr	r3, [r3]
   12808:	e3530000 	cmp	r3, #0
   1280c:	1affffd7 	bne	12770 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12810:	e59f309c 	ldr	r3, [pc, #156]	; 128b4 <xTaskResumeAll+0x19c>
   12814:	e5933000 	ldr	r3, [r3]
   12818:	e3530000 	cmp	r3, #0
   1281c:	0a00000c 	beq	12854 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12820:	ea000005 	b	1283c <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   12824:	eb000048 	bl	1294c <vTaskIncrementTick>
						--uxMissedTicks;
   12828:	e59f3084 	ldr	r3, [pc, #132]	; 128b4 <xTaskResumeAll+0x19c>
   1282c:	e5933000 	ldr	r3, [r3]
   12830:	e2433001 	sub	r3, r3, #1
   12834:	e59f2078 	ldr	r2, [pc, #120]	; 128b4 <xTaskResumeAll+0x19c>
   12838:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1283c:	e59f3070 	ldr	r3, [pc, #112]	; 128b4 <xTaskResumeAll+0x19c>
   12840:	e5933000 	ldr	r3, [r3]
   12844:	e3530000 	cmp	r3, #0
   12848:	1afffff5 	bne	12824 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   1284c:	e3a03001 	mov	r3, #1
   12850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   12854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12858:	e3530001 	cmp	r3, #1
   1285c:	0a000003 	beq	12870 <xTaskResumeAll+0x158>
   12860:	e59f3050 	ldr	r3, [pc, #80]	; 128b8 <xTaskResumeAll+0x1a0>
   12864:	e5933000 	ldr	r3, [r3]
   12868:	e3530001 	cmp	r3, #1
   1286c:	1a000005 	bne	12888 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   12870:	e3a03001 	mov	r3, #1
   12874:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   12878:	e59f3038 	ldr	r3, [pc, #56]	; 128b8 <xTaskResumeAll+0x1a0>
   1287c:	e3a02000 	mov	r2, #0
   12880:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12884:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   12888:	ebfff73d 	bl	10584 <vPortExitCritical>

	return xAlreadyYielded;
   1288c:	e51b3010 	ldr	r3, [fp, #-16]
}
   12890:	e1a00003 	mov	r0, r3
   12894:	e24bd008 	sub	sp, fp, #8
   12898:	e8bd8810 	pop	{r4, fp, pc}
   1289c:	000148e0 	andeq	r4, r1, r0, ror #17
   128a0:	000148cc 	andeq	r4, r1, ip, asr #17
   128a4:	0001488c 	andeq	r4, r1, ip, lsl #17
   128a8:	000148d8 	ldrdeq	r4, [r1], -r8
   128ac:	000147f8 	strdeq	r4, [r1], -r8
   128b0:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   128b4:	000148e4 	andeq	r4, r1, r4, ror #17
   128b8:	000148e8 	andeq	r4, r1, r8, ror #17

000128bc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   128bc:	e92d4800 	push	{fp, lr}
   128c0:	e28db004 	add	fp, sp, #4
   128c4:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   128c8:	ebfff71c 	bl	10540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   128cc:	e59f3018 	ldr	r3, [pc, #24]	; 128ec <xTaskGetTickCount+0x30>
   128d0:	e5933000 	ldr	r3, [r3]
   128d4:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   128d8:	ebfff729 	bl	10584 <vPortExitCritical>

	return xTicks;
   128dc:	e51b3008 	ldr	r3, [fp, #-8]
}
   128e0:	e1a00003 	mov	r0, r3
   128e4:	e24bd004 	sub	sp, fp, #4
   128e8:	e8bd8800 	pop	{fp, pc}
   128ec:	000148d0 	ldrdeq	r4, [r1], -r0

000128f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   128f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128f4:	e28db000 	add	fp, sp, #0
   128f8:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128fc:	e3a03000 	mov	r3, #0
   12900:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   12904:	e59f3018 	ldr	r3, [pc, #24]	; 12924 <xTaskGetTickCountFromISR+0x34>
   12908:	e5933000 	ldr	r3, [r3]
   1290c:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   12910:	e51b300c 	ldr	r3, [fp, #-12]
}
   12914:	e1a00003 	mov	r0, r3
   12918:	e28bd000 	add	sp, fp, #0
   1291c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12920:	e12fff1e 	bx	lr
   12924:	000148d0 	ldrdeq	r4, [r1], -r0

00012928 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   12928:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1292c:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   12930:	e59f3010 	ldr	r3, [pc, #16]	; 12948 <uxTaskGetNumberOfTasks+0x20>
   12934:	e5933000 	ldr	r3, [r3]
}
   12938:	e1a00003 	mov	r0, r3
   1293c:	e28bd000 	add	sp, fp, #0
   12940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12944:	e12fff1e 	bx	lr
   12948:	000148cc 	andeq	r4, r1, ip, asr #17

0001294c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   1294c:	e92d4800 	push	{fp, lr}
   12950:	e28db004 	add	fp, sp, #4
   12954:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12958:	e59f31e4 	ldr	r3, [pc, #484]	; 12b44 <vTaskIncrementTick+0x1f8>
   1295c:	e5933000 	ldr	r3, [r3]
   12960:	e3530000 	cmp	r3, #0
   12964:	1a00006d 	bne	12b20 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   12968:	e59f31d8 	ldr	r3, [pc, #472]	; 12b48 <vTaskIncrementTick+0x1fc>
   1296c:	e5933000 	ldr	r3, [r3]
   12970:	e2833001 	add	r3, r3, #1
   12974:	e59f21cc 	ldr	r2, [pc, #460]	; 12b48 <vTaskIncrementTick+0x1fc>
   12978:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   1297c:	e59f31c4 	ldr	r3, [pc, #452]	; 12b48 <vTaskIncrementTick+0x1fc>
   12980:	e5933000 	ldr	r3, [r3]
   12984:	e3530000 	cmp	r3, #0
   12988:	1a000020 	bne	12a10 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   1298c:	e59f31b8 	ldr	r3, [pc, #440]	; 12b4c <vTaskIncrementTick+0x200>
   12990:	e5933000 	ldr	r3, [r3]
   12994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   12998:	e59f31b0 	ldr	r3, [pc, #432]	; 12b50 <vTaskIncrementTick+0x204>
   1299c:	e5933000 	ldr	r3, [r3]
   129a0:	e59f21a4 	ldr	r2, [pc, #420]	; 12b4c <vTaskIncrementTick+0x200>
   129a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   129a8:	e59f21a0 	ldr	r2, [pc, #416]	; 12b50 <vTaskIncrementTick+0x204>
   129ac:	e51b3008 	ldr	r3, [fp, #-8]
   129b0:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   129b4:	e59f3198 	ldr	r3, [pc, #408]	; 12b54 <vTaskIncrementTick+0x208>
   129b8:	e5933000 	ldr	r3, [r3]
   129bc:	e2833001 	add	r3, r3, #1
   129c0:	e59f218c 	ldr	r2, [pc, #396]	; 12b54 <vTaskIncrementTick+0x208>
   129c4:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   129c8:	e59f317c 	ldr	r3, [pc, #380]	; 12b4c <vTaskIncrementTick+0x200>
   129cc:	e5933000 	ldr	r3, [r3]
   129d0:	e5933000 	ldr	r3, [r3]
   129d4:	e3530000 	cmp	r3, #0
   129d8:	1a000003 	bne	129ec <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   129dc:	e59f3174 	ldr	r3, [pc, #372]	; 12b58 <vTaskIncrementTick+0x20c>
   129e0:	e3e02000 	mvn	r2, #0
   129e4:	e5832000 	str	r2, [r3]
   129e8:	ea000008 	b	12a10 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   129ec:	e59f3158 	ldr	r3, [pc, #344]	; 12b4c <vTaskIncrementTick+0x200>
   129f0:	e5933000 	ldr	r3, [r3]
   129f4:	e593300c 	ldr	r3, [r3, #12]
   129f8:	e593300c 	ldr	r3, [r3, #12]
   129fc:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   12a00:	e51b300c 	ldr	r3, [fp, #-12]
   12a04:	e5933004 	ldr	r3, [r3, #4]
   12a08:	e59f2148 	ldr	r2, [pc, #328]	; 12b58 <vTaskIncrementTick+0x20c>
   12a0c:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   12a10:	e59f3130 	ldr	r3, [pc, #304]	; 12b48 <vTaskIncrementTick+0x1fc>
   12a14:	e5932000 	ldr	r2, [r3]
   12a18:	e59f3138 	ldr	r3, [pc, #312]	; 12b58 <vTaskIncrementTick+0x20c>
   12a1c:	e5933000 	ldr	r3, [r3]
   12a20:	e1520003 	cmp	r2, r3
   12a24:	3a000043 	bcc	12b38 <vTaskIncrementTick+0x1ec>
   12a28:	e59f311c 	ldr	r3, [pc, #284]	; 12b4c <vTaskIncrementTick+0x200>
   12a2c:	e5933000 	ldr	r3, [r3]
   12a30:	e5933000 	ldr	r3, [r3]
   12a34:	e3530000 	cmp	r3, #0
   12a38:	1a000003 	bne	12a4c <vTaskIncrementTick+0x100>
   12a3c:	e59f3114 	ldr	r3, [pc, #276]	; 12b58 <vTaskIncrementTick+0x20c>
   12a40:	e3e02000 	mvn	r2, #0
   12a44:	e5832000 	str	r2, [r3]
   12a48:	ea00003a 	b	12b38 <vTaskIncrementTick+0x1ec>
   12a4c:	e59f30f8 	ldr	r3, [pc, #248]	; 12b4c <vTaskIncrementTick+0x200>
   12a50:	e5933000 	ldr	r3, [r3]
   12a54:	e593300c 	ldr	r3, [r3, #12]
   12a58:	e593300c 	ldr	r3, [r3, #12]
   12a5c:	e50b300c 	str	r3, [fp, #-12]
   12a60:	e51b300c 	ldr	r3, [fp, #-12]
   12a64:	e5933004 	ldr	r3, [r3, #4]
   12a68:	e50b3010 	str	r3, [fp, #-16]
   12a6c:	e59f30d4 	ldr	r3, [pc, #212]	; 12b48 <vTaskIncrementTick+0x1fc>
   12a70:	e5933000 	ldr	r3, [r3]
   12a74:	e51b2010 	ldr	r2, [fp, #-16]
   12a78:	e1520003 	cmp	r2, r3
   12a7c:	9a000003 	bls	12a90 <vTaskIncrementTick+0x144>
   12a80:	e59f20d0 	ldr	r2, [pc, #208]	; 12b58 <vTaskIncrementTick+0x20c>
   12a84:	e51b3010 	ldr	r3, [fp, #-16]
   12a88:	e5823000 	str	r3, [r2]
   12a8c:	ea000029 	b	12b38 <vTaskIncrementTick+0x1ec>
   12a90:	e51b300c 	ldr	r3, [fp, #-12]
   12a94:	e2833004 	add	r3, r3, #4
   12a98:	e1a00003 	mov	r0, r3
   12a9c:	ebfff92d 	bl	10f58 <vListRemove>
   12aa0:	e51b300c 	ldr	r3, [fp, #-12]
   12aa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aa8:	e3530000 	cmp	r3, #0
   12aac:	0a000003 	beq	12ac0 <vTaskIncrementTick+0x174>
   12ab0:	e51b300c 	ldr	r3, [fp, #-12]
   12ab4:	e2833018 	add	r3, r3, #24
   12ab8:	e1a00003 	mov	r0, r3
   12abc:	ebfff925 	bl	10f58 <vListRemove>
   12ac0:	e51b300c 	ldr	r3, [fp, #-12]
   12ac4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac8:	e59f308c 	ldr	r3, [pc, #140]	; 12b5c <vTaskIncrementTick+0x210>
   12acc:	e5933000 	ldr	r3, [r3]
   12ad0:	e1520003 	cmp	r2, r3
   12ad4:	9a000003 	bls	12ae8 <vTaskIncrementTick+0x19c>
   12ad8:	e51b300c 	ldr	r3, [fp, #-12]
   12adc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12ae0:	e59f2074 	ldr	r2, [pc, #116]	; 12b5c <vTaskIncrementTick+0x210>
   12ae4:	e5823000 	str	r3, [r2]
   12ae8:	e51b300c 	ldr	r3, [fp, #-12]
   12aec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12af0:	e1a03002 	mov	r3, r2
   12af4:	e1a03103 	lsl	r3, r3, #2
   12af8:	e0833002 	add	r3, r3, r2
   12afc:	e1a03103 	lsl	r3, r3, #2
   12b00:	e59f2058 	ldr	r2, [pc, #88]	; 12b60 <vTaskIncrementTick+0x214>
   12b04:	e0832002 	add	r2, r3, r2
   12b08:	e51b300c 	ldr	r3, [fp, #-12]
   12b0c:	e2833004 	add	r3, r3, #4
   12b10:	e1a01003 	mov	r1, r3
   12b14:	e1a00002 	mov	r0, r2
   12b18:	ebfff8b2 	bl	10de8 <vListInsertEnd>
   12b1c:	eaffffc1 	b	12a28 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   12b20:	e59f303c 	ldr	r3, [pc, #60]	; 12b64 <vTaskIncrementTick+0x218>
   12b24:	e5933000 	ldr	r3, [r3]
   12b28:	e2833001 	add	r3, r3, #1
   12b2c:	e59f2030 	ldr	r2, [pc, #48]	; 12b64 <vTaskIncrementTick+0x218>
   12b30:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12b34:	eaffffff 	b	12b38 <vTaskIncrementTick+0x1ec>
   12b38:	e320f000 	nop	{0}
   12b3c:	e24bd004 	sub	sp, fp, #4
   12b40:	e8bd8800 	pop	{fp, pc}
   12b44:	000148e0 	andeq	r4, r1, r0, ror #17
   12b48:	000148d0 	ldrdeq	r4, [r1], -r0
   12b4c:	00014884 	andeq	r4, r1, r4, lsl #17
   12b50:	00014888 	andeq	r4, r1, r8, lsl #17
   12b54:	000148ec 	andeq	r4, r1, ip, ror #17
   12b58:	00014764 	andeq	r4, r1, r4, ror #14
   12b5c:	000148d8 	ldrdeq	r4, [r1], -r8
   12b60:	000147f8 	strdeq	r4, [r1], -r8
   12b64:	000148e4 	andeq	r4, r1, r4, ror #17

00012b68 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b68:	e92d4800 	push	{fp, lr}
   12b6c:	e28db004 	add	fp, sp, #4
   12b70:	e24dd010 	sub	sp, sp, #16
   12b74:	e50b0010 	str	r0, [fp, #-16]
   12b78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b7c:	e51b3010 	ldr	r3, [fp, #-16]
   12b80:	e3530000 	cmp	r3, #0
   12b84:	1a000003 	bne	12b98 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b88:	e59f3030 	ldr	r3, [pc, #48]	; 12bc0 <vTaskSetApplicationTaskTag+0x58>
   12b8c:	e5933000 	ldr	r3, [r3]
   12b90:	e50b3008 	str	r3, [fp, #-8]
   12b94:	ea000001 	b	12ba0 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b98:	e51b3010 	ldr	r3, [fp, #-16]
   12b9c:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12ba0:	ebfff666 	bl	10540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12ba4:	e51b3008 	ldr	r3, [fp, #-8]
   12ba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12bac:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12bb0:	ebfff673 	bl	10584 <vPortExitCritical>
	}
   12bb4:	e320f000 	nop	{0}
   12bb8:	e24bd004 	sub	sp, fp, #4
   12bbc:	e8bd8800 	pop	{fp, pc}
   12bc0:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012bc4 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12bc4:	e92d4800 	push	{fp, lr}
   12bc8:	e28db004 	add	fp, sp, #4
   12bcc:	e24dd010 	sub	sp, sp, #16
   12bd0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12bd4:	e51b3010 	ldr	r3, [fp, #-16]
   12bd8:	e3530000 	cmp	r3, #0
   12bdc:	1a000003 	bne	12bf0 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12be0:	e59f3034 	ldr	r3, [pc, #52]	; 12c1c <xTaskGetApplicationTaskTag+0x58>
   12be4:	e5933000 	ldr	r3, [r3]
   12be8:	e50b3008 	str	r3, [fp, #-8]
   12bec:	ea000001 	b	12bf8 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bf0:	e51b3010 	ldr	r3, [fp, #-16]
   12bf4:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12bf8:	ebfff650 	bl	10540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12bfc:	e51b3008 	ldr	r3, [fp, #-8]
   12c00:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c04:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12c08:	ebfff65d 	bl	10584 <vPortExitCritical>

		return xReturn;
   12c0c:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c10:	e1a00003 	mov	r0, r3
   12c14:	e24bd004 	sub	sp, fp, #4
   12c18:	e8bd8800 	pop	{fp, pc}
   12c1c:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c20 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12c20:	e92d4800 	push	{fp, lr}
   12c24:	e28db004 	add	fp, sp, #4
   12c28:	e24dd010 	sub	sp, sp, #16
   12c2c:	e50b0010 	str	r0, [fp, #-16]
   12c30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12c34:	e51b3010 	ldr	r3, [fp, #-16]
   12c38:	e3530000 	cmp	r3, #0
   12c3c:	1a000003 	bne	12c50 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12c40:	e59f3050 	ldr	r3, [pc, #80]	; 12c98 <xTaskCallApplicationTaskHook+0x78>
   12c44:	e5933000 	ldr	r3, [r3]
   12c48:	e50b3008 	str	r3, [fp, #-8]
   12c4c:	ea000001 	b	12c58 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12c50:	e51b3010 	ldr	r3, [fp, #-16]
   12c54:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12c58:	e51b3008 	ldr	r3, [fp, #-8]
   12c5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c60:	e3530000 	cmp	r3, #0
   12c64:	0a000005 	beq	12c80 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c68:	e51b3008 	ldr	r3, [fp, #-8]
   12c6c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12c74:	e12fff33 	blx	r3
   12c78:	e50b000c 	str	r0, [fp, #-12]
   12c7c:	ea000001 	b	12c88 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c80:	e3a03000 	mov	r3, #0
   12c84:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c88:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c8c:	e1a00003 	mov	r0, r3
   12c90:	e24bd004 	sub	sp, fp, #4
   12c94:	e8bd8800 	pop	{fp, pc}
   12c98:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012c9c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12ca0:	e28db000 	add	fp, sp, #0
   12ca4:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12ca8:	e59f30e0 	ldr	r3, [pc, #224]	; 12d90 <vTaskSwitchContext+0xf4>
   12cac:	e5933000 	ldr	r3, [r3]
   12cb0:	e3530000 	cmp	r3, #0
   12cb4:	0a000008 	beq	12cdc <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12cb8:	e59f30d4 	ldr	r3, [pc, #212]	; 12d94 <vTaskSwitchContext+0xf8>
   12cbc:	e3a02001 	mov	r2, #1
   12cc0:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12cc4:	ea00002d 	b	12d80 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   12cc8:	e59f30c8 	ldr	r3, [pc, #200]	; 12d98 <vTaskSwitchContext+0xfc>
   12ccc:	e5933000 	ldr	r3, [r3]
   12cd0:	e2433001 	sub	r3, r3, #1
   12cd4:	e59f20bc 	ldr	r2, [pc, #188]	; 12d98 <vTaskSwitchContext+0xfc>
   12cd8:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12cdc:	e59f30b4 	ldr	r3, [pc, #180]	; 12d98 <vTaskSwitchContext+0xfc>
   12ce0:	e5932000 	ldr	r2, [r3]
   12ce4:	e59f10b0 	ldr	r1, [pc, #176]	; 12d9c <vTaskSwitchContext+0x100>
   12ce8:	e1a03002 	mov	r3, r2
   12cec:	e1a03103 	lsl	r3, r3, #2
   12cf0:	e0833002 	add	r3, r3, r2
   12cf4:	e1a03103 	lsl	r3, r3, #2
   12cf8:	e0813003 	add	r3, r1, r3
   12cfc:	e5933000 	ldr	r3, [r3]
   12d00:	e3530000 	cmp	r3, #0
   12d04:	0affffef 	beq	12cc8 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12d08:	e59f3088 	ldr	r3, [pc, #136]	; 12d98 <vTaskSwitchContext+0xfc>
   12d0c:	e5932000 	ldr	r2, [r3]
   12d10:	e1a03002 	mov	r3, r2
   12d14:	e1a03103 	lsl	r3, r3, #2
   12d18:	e0833002 	add	r3, r3, r2
   12d1c:	e1a03103 	lsl	r3, r3, #2
   12d20:	e59f2074 	ldr	r2, [pc, #116]	; 12d9c <vTaskSwitchContext+0x100>
   12d24:	e0833002 	add	r3, r3, r2
   12d28:	e50b3008 	str	r3, [fp, #-8]
   12d2c:	e51b3008 	ldr	r3, [fp, #-8]
   12d30:	e5933004 	ldr	r3, [r3, #4]
   12d34:	e5932004 	ldr	r2, [r3, #4]
   12d38:	e51b3008 	ldr	r3, [fp, #-8]
   12d3c:	e5832004 	str	r2, [r3, #4]
   12d40:	e51b3008 	ldr	r3, [fp, #-8]
   12d44:	e5932004 	ldr	r2, [r3, #4]
   12d48:	e51b3008 	ldr	r3, [fp, #-8]
   12d4c:	e2833008 	add	r3, r3, #8
   12d50:	e1520003 	cmp	r2, r3
   12d54:	1a000004 	bne	12d6c <vTaskSwitchContext+0xd0>
   12d58:	e51b3008 	ldr	r3, [fp, #-8]
   12d5c:	e5933004 	ldr	r3, [r3, #4]
   12d60:	e5932004 	ldr	r2, [r3, #4]
   12d64:	e51b3008 	ldr	r3, [fp, #-8]
   12d68:	e5832004 	str	r2, [r3, #4]
   12d6c:	e51b3008 	ldr	r3, [fp, #-8]
   12d70:	e5933004 	ldr	r3, [r3, #4]
   12d74:	e593300c 	ldr	r3, [r3, #12]
   12d78:	e59f2020 	ldr	r2, [pc, #32]	; 12da0 <vTaskSwitchContext+0x104>
   12d7c:	e5823000 	str	r3, [r2]
}
   12d80:	e320f000 	nop	{0}
   12d84:	e28bd000 	add	sp, fp, #0
   12d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d8c:	e12fff1e 	bx	lr
   12d90:	000148e0 	andeq	r4, r1, r0, ror #17
   12d94:	000148e8 	andeq	r4, r1, r8, ror #17
   12d98:	000148d8 	ldrdeq	r4, [r1], -r8
   12d9c:	000147f8 	strdeq	r4, [r1], -r8
   12da0:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12da4:	e92d4800 	push	{fp, lr}
   12da8:	e28db004 	add	fp, sp, #4
   12dac:	e24dd010 	sub	sp, sp, #16
   12db0:	e50b0010 	str	r0, [fp, #-16]
   12db4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12db8:	e59f3074 	ldr	r3, [pc, #116]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12dbc:	e5933000 	ldr	r3, [r3]
   12dc0:	e2833018 	add	r3, r3, #24
   12dc4:	e1a01003 	mov	r1, r3
   12dc8:	e51b0010 	ldr	r0, [fp, #-16]
   12dcc:	ebfff82b 	bl	10e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dd0:	e59f305c 	ldr	r3, [pc, #92]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12dd4:	e5933000 	ldr	r3, [r3]
   12dd8:	e2833004 	add	r3, r3, #4
   12ddc:	e1a00003 	mov	r0, r3
   12de0:	ebfff85c 	bl	10f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de8:	e3730001 	cmn	r3, #1
   12dec:	1a000006 	bne	12e0c <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12df0:	e59f303c 	ldr	r3, [pc, #60]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12df4:	e5933000 	ldr	r3, [r3]
   12df8:	e2833004 	add	r3, r3, #4
   12dfc:	e1a01003 	mov	r1, r3
   12e00:	e59f0030 	ldr	r0, [pc, #48]	; 12e38 <vTaskPlaceOnEventList+0x94>
   12e04:	ebfff7f7 	bl	10de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12e08:	ea000006 	b	12e28 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   12e0c:	e59f3028 	ldr	r3, [pc, #40]	; 12e3c <vTaskPlaceOnEventList+0x98>
   12e10:	e5933000 	ldr	r3, [r3]
   12e14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12e18:	e0823003 	add	r3, r2, r3
   12e1c:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12e20:	e51b0008 	ldr	r0, [fp, #-8]
   12e24:	eb00013f 	bl	13328 <prvAddCurrentTaskToDelayedList>
}
   12e28:	e320f000 	nop	{0}
   12e2c:	e24bd004 	sub	sp, fp, #4
   12e30:	e8bd8800 	pop	{fp, pc}
   12e34:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12e38:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   12e3c:	000148d0 	ldrdeq	r4, [r1], -r0

00012e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12e40:	e92d4800 	push	{fp, lr}
   12e44:	e28db004 	add	fp, sp, #4
   12e48:	e24dd010 	sub	sp, sp, #16
   12e4c:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12e50:	e51b3010 	ldr	r3, [fp, #-16]
   12e54:	e593300c 	ldr	r3, [r3, #12]
   12e58:	e593300c 	ldr	r3, [r3, #12]
   12e5c:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12e60:	e51b300c 	ldr	r3, [fp, #-12]
   12e64:	e2833018 	add	r3, r3, #24
   12e68:	e1a00003 	mov	r0, r3
   12e6c:	ebfff839 	bl	10f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e70:	e59f30cc 	ldr	r3, [pc, #204]	; 12f44 <xTaskRemoveFromEventList+0x104>
   12e74:	e5933000 	ldr	r3, [r3]
   12e78:	e3530000 	cmp	r3, #0
   12e7c:	1a00001b 	bne	12ef0 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e80:	e51b300c 	ldr	r3, [fp, #-12]
   12e84:	e2833004 	add	r3, r3, #4
   12e88:	e1a00003 	mov	r0, r3
   12e8c:	ebfff831 	bl	10f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e90:	e51b300c 	ldr	r3, [fp, #-12]
   12e94:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e98:	e59f30a8 	ldr	r3, [pc, #168]	; 12f48 <xTaskRemoveFromEventList+0x108>
   12e9c:	e5933000 	ldr	r3, [r3]
   12ea0:	e1520003 	cmp	r2, r3
   12ea4:	9a000003 	bls	12eb8 <xTaskRemoveFromEventList+0x78>
   12ea8:	e51b300c 	ldr	r3, [fp, #-12]
   12eac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eb0:	e59f2090 	ldr	r2, [pc, #144]	; 12f48 <xTaskRemoveFromEventList+0x108>
   12eb4:	e5823000 	str	r3, [r2]
   12eb8:	e51b300c 	ldr	r3, [fp, #-12]
   12ebc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ec0:	e1a03002 	mov	r3, r2
   12ec4:	e1a03103 	lsl	r3, r3, #2
   12ec8:	e0833002 	add	r3, r3, r2
   12ecc:	e1a03103 	lsl	r3, r3, #2
   12ed0:	e59f2074 	ldr	r2, [pc, #116]	; 12f4c <xTaskRemoveFromEventList+0x10c>
   12ed4:	e0832002 	add	r2, r3, r2
   12ed8:	e51b300c 	ldr	r3, [fp, #-12]
   12edc:	e2833004 	add	r3, r3, #4
   12ee0:	e1a01003 	mov	r1, r3
   12ee4:	e1a00002 	mov	r0, r2
   12ee8:	ebfff7be 	bl	10de8 <vListInsertEnd>
   12eec:	ea000004 	b	12f04 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12ef0:	e51b300c 	ldr	r3, [fp, #-12]
   12ef4:	e2833018 	add	r3, r3, #24
   12ef8:	e1a01003 	mov	r1, r3
   12efc:	e59f004c 	ldr	r0, [pc, #76]	; 12f50 <xTaskRemoveFromEventList+0x110>
   12f00:	ebfff7b8 	bl	10de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12f04:	e51b300c 	ldr	r3, [fp, #-12]
   12f08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12f0c:	e59f3040 	ldr	r3, [pc, #64]	; 12f54 <xTaskRemoveFromEventList+0x114>
   12f10:	e5933000 	ldr	r3, [r3]
   12f14:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12f18:	e1520003 	cmp	r2, r3
   12f1c:	3a000002 	bcc	12f2c <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12f20:	e3a03001 	mov	r3, #1
   12f24:	e50b3008 	str	r3, [fp, #-8]
   12f28:	ea000001 	b	12f34 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12f2c:	e3a03000 	mov	r3, #0
   12f30:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12f34:	e51b3008 	ldr	r3, [fp, #-8]
}
   12f38:	e1a00003 	mov	r0, r3
   12f3c:	e24bd004 	sub	sp, fp, #4
   12f40:	e8bd8800 	pop	{fp, pc}
   12f44:	000148e0 	andeq	r4, r1, r0, ror #17
   12f48:	000148d8 	ldrdeq	r4, [r1], -r8
   12f4c:	000147f8 	strdeq	r4, [r1], -r8
   12f50:	0001488c 	andeq	r4, r1, ip, lsl #17
   12f54:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012f58 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f5c:	e28db000 	add	fp, sp, #0
   12f60:	e24dd00c 	sub	sp, sp, #12
   12f64:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f68:	e59f3028 	ldr	r3, [pc, #40]	; 12f98 <vTaskSetTimeOutState+0x40>
   12f6c:	e5932000 	ldr	r2, [r3]
   12f70:	e51b3008 	ldr	r3, [fp, #-8]
   12f74:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f78:	e59f301c 	ldr	r3, [pc, #28]	; 12f9c <vTaskSetTimeOutState+0x44>
   12f7c:	e5932000 	ldr	r2, [r3]
   12f80:	e51b3008 	ldr	r3, [fp, #-8]
   12f84:	e5832004 	str	r2, [r3, #4]
}
   12f88:	e320f000 	nop	{0}
   12f8c:	e28bd000 	add	sp, fp, #0
   12f90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f94:	e12fff1e 	bx	lr
   12f98:	000148ec 	andeq	r4, r1, ip, ror #17
   12f9c:	000148d0 	ldrdeq	r4, [r1], -r0

00012fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12fa0:	e92d4800 	push	{fp, lr}
   12fa4:	e28db004 	add	fp, sp, #4
   12fa8:	e24dd010 	sub	sp, sp, #16
   12fac:	e50b0010 	str	r0, [fp, #-16]
   12fb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12fb4:	ebfff561 	bl	10540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12fbc:	e5933000 	ldr	r3, [r3]
   12fc0:	e3730001 	cmn	r3, #1
   12fc4:	1a000002 	bne	12fd4 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12fc8:	e3a03000 	mov	r3, #0
   12fcc:	e50b3008 	str	r3, [fp, #-8]
   12fd0:	ea000028 	b	13078 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12fd4:	e51b3010 	ldr	r3, [fp, #-16]
   12fd8:	e5932000 	ldr	r2, [r3]
   12fdc:	e59f30a8 	ldr	r3, [pc, #168]	; 1308c <xTaskCheckForTimeOut+0xec>
   12fe0:	e5933000 	ldr	r3, [r3]
   12fe4:	e1520003 	cmp	r2, r3
   12fe8:	0a000008 	beq	13010 <xTaskCheckForTimeOut+0x70>
   12fec:	e51b3010 	ldr	r3, [fp, #-16]
   12ff0:	e5932004 	ldr	r2, [r3, #4]
   12ff4:	e59f3094 	ldr	r3, [pc, #148]	; 13090 <xTaskCheckForTimeOut+0xf0>
   12ff8:	e5933000 	ldr	r3, [r3]
   12ffc:	e1520003 	cmp	r2, r3
   13000:	8a000002 	bhi	13010 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13004:	e3a03001 	mov	r3, #1
   13008:	e50b3008 	str	r3, [fp, #-8]
   1300c:	ea000019 	b	13078 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   13010:	e59f3078 	ldr	r3, [pc, #120]	; 13090 <xTaskCheckForTimeOut+0xf0>
   13014:	e5932000 	ldr	r2, [r3]
   13018:	e51b3010 	ldr	r3, [fp, #-16]
   1301c:	e5933004 	ldr	r3, [r3, #4]
   13020:	e0422003 	sub	r2, r2, r3
   13024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13028:	e5933000 	ldr	r3, [r3]
   1302c:	e1520003 	cmp	r2, r3
   13030:	2a00000e 	bcs	13070 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13034:	e59f3054 	ldr	r3, [pc, #84]	; 13090 <xTaskCheckForTimeOut+0xf0>
   13038:	e5932000 	ldr	r2, [r3]
   1303c:	e51b3010 	ldr	r3, [fp, #-16]
   13040:	e5933004 	ldr	r3, [r3, #4]
   13044:	e0423003 	sub	r3, r2, r3
   13048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1304c:	e5922000 	ldr	r2, [r2]
   13050:	e0422003 	sub	r2, r2, r3
   13054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13058:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   1305c:	e51b0010 	ldr	r0, [fp, #-16]
   13060:	ebffffbc 	bl	12f58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13064:	e3a03000 	mov	r3, #0
   13068:	e50b3008 	str	r3, [fp, #-8]
   1306c:	ea000001 	b	13078 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   13070:	e3a03001 	mov	r3, #1
   13074:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   13078:	ebfff541 	bl	10584 <vPortExitCritical>

	return xReturn;
   1307c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13080:	e1a00003 	mov	r0, r3
   13084:	e24bd004 	sub	sp, fp, #4
   13088:	e8bd8800 	pop	{fp, pc}
   1308c:	000148ec 	andeq	r4, r1, ip, ror #17
   13090:	000148d0 	ldrdeq	r4, [r1], -r0

00013094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13094:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13098:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   1309c:	e59f3014 	ldr	r3, [pc, #20]	; 130b8 <vTaskMissedYield+0x24>
   130a0:	e3a02001 	mov	r2, #1
   130a4:	e5832000 	str	r2, [r3]
}
   130a8:	e320f000 	nop	{0}
   130ac:	e28bd000 	add	sp, fp, #0
   130b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   130b4:	e12fff1e 	bx	lr
   130b8:	000148e8 	andeq	r4, r1, r8, ror #17

000130bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   130bc:	e92d4800 	push	{fp, lr}
   130c0:	e28db004 	add	fp, sp, #4
   130c4:	e24dd008 	sub	sp, sp, #8
   130c8:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   130cc:	eb000066 	bl	1326c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   130d0:	e59f3010 	ldr	r3, [pc, #16]	; 130e8 <prvIdleTask+0x2c>
   130d4:	e5933000 	ldr	r3, [r3]
   130d8:	e3530001 	cmp	r3, #1
   130dc:	9afffffa 	bls	130cc <prvIdleTask+0x10>
			{
				taskYIELD();
   130e0:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   130e4:	eafffff8 	b	130cc <prvIdleTask+0x10>
   130e8:	000147f8 	strdeq	r4, [r1], -r8

000130ec <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   130ec:	e92d4800 	push	{fp, lr}
   130f0:	e28db004 	add	fp, sp, #4
   130f4:	e24dd010 	sub	sp, sp, #16
   130f8:	e50b0008 	str	r0, [fp, #-8]
   130fc:	e50b100c 	str	r1, [fp, #-12]
   13100:	e50b2010 	str	r2, [fp, #-16]
   13104:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13108:	e51b3008 	ldr	r3, [fp, #-8]
   1310c:	e2833034 	add	r3, r3, #52	; 0x34
   13110:	e3a02010 	mov	r2, #16
   13114:	e51b100c 	ldr	r1, [fp, #-12]
   13118:	e1a00003 	mov	r0, r3
   1311c:	eb00054a 	bl	1464c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   13120:	e51b3008 	ldr	r3, [fp, #-8]
   13124:	e3a02000 	mov	r2, #0
   13128:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   1312c:	e51b3010 	ldr	r3, [fp, #-16]
   13130:	e3530004 	cmp	r3, #4
   13134:	9a000001 	bls	13140 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13138:	e3a03004 	mov	r3, #4
   1313c:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   13140:	e51b3008 	ldr	r3, [fp, #-8]
   13144:	e51b2010 	ldr	r2, [fp, #-16]
   13148:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   1314c:	e51b3008 	ldr	r3, [fp, #-8]
   13150:	e2833004 	add	r3, r3, #4
   13154:	e1a00003 	mov	r0, r3
   13158:	ebfff717 	bl	10dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   1315c:	e51b3008 	ldr	r3, [fp, #-8]
   13160:	e2833018 	add	r3, r3, #24
   13164:	e1a00003 	mov	r0, r3
   13168:	ebfff713 	bl	10dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   1316c:	e51b3008 	ldr	r3, [fp, #-8]
   13170:	e51b2008 	ldr	r2, [fp, #-8]
   13174:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13178:	e51b3010 	ldr	r3, [fp, #-16]
   1317c:	e2632005 	rsb	r2, r3, #5
   13180:	e51b3008 	ldr	r3, [fp, #-8]
   13184:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13188:	e51b3008 	ldr	r3, [fp, #-8]
   1318c:	e51b2008 	ldr	r2, [fp, #-8]
   13190:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13194:	e51b3008 	ldr	r3, [fp, #-8]
   13198:	e3a02000 	mov	r2, #0
   1319c:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   131a0:	e320f000 	nop	{0}
   131a4:	e24bd004 	sub	sp, fp, #4
   131a8:	e8bd8800 	pop	{fp, pc}

000131ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   131ac:	e92d4800 	push	{fp, lr}
   131b0:	e28db004 	add	fp, sp, #4
   131b4:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131b8:	e3a03000 	mov	r3, #0
   131bc:	e50b3008 	str	r3, [fp, #-8]
   131c0:	ea00000b 	b	131f4 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   131c4:	e51b2008 	ldr	r2, [fp, #-8]
   131c8:	e1a03002 	mov	r3, r2
   131cc:	e1a03103 	lsl	r3, r3, #2
   131d0:	e0833002 	add	r3, r3, r2
   131d4:	e1a03103 	lsl	r3, r3, #2
   131d8:	e59f206c 	ldr	r2, [pc, #108]	; 1324c <prvInitialiseTaskLists+0xa0>
   131dc:	e0833002 	add	r3, r3, r2
   131e0:	e1a00003 	mov	r0, r3
   131e4:	ebfff6da 	bl	10d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131e8:	e51b3008 	ldr	r3, [fp, #-8]
   131ec:	e2833001 	add	r3, r3, #1
   131f0:	e50b3008 	str	r3, [fp, #-8]
   131f4:	e51b3008 	ldr	r3, [fp, #-8]
   131f8:	e3530004 	cmp	r3, #4
   131fc:	9afffff0 	bls	131c4 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   13200:	e59f0048 	ldr	r0, [pc, #72]	; 13250 <prvInitialiseTaskLists+0xa4>
   13204:	ebfff6d2 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13208:	e59f0044 	ldr	r0, [pc, #68]	; 13254 <prvInitialiseTaskLists+0xa8>
   1320c:	ebfff6d0 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   13210:	e59f0040 	ldr	r0, [pc, #64]	; 13258 <prvInitialiseTaskLists+0xac>
   13214:	ebfff6ce 	bl	10d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13218:	e59f003c 	ldr	r0, [pc, #60]	; 1325c <prvInitialiseTaskLists+0xb0>
   1321c:	ebfff6cc 	bl	10d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   13220:	e59f0038 	ldr	r0, [pc, #56]	; 13260 <prvInitialiseTaskLists+0xb4>
   13224:	ebfff6ca 	bl	10d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13228:	e59f3034 	ldr	r3, [pc, #52]	; 13264 <prvInitialiseTaskLists+0xb8>
   1322c:	e59f201c 	ldr	r2, [pc, #28]	; 13250 <prvInitialiseTaskLists+0xa4>
   13230:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13234:	e59f302c 	ldr	r3, [pc, #44]	; 13268 <prvInitialiseTaskLists+0xbc>
   13238:	e59f2014 	ldr	r2, [pc, #20]	; 13254 <prvInitialiseTaskLists+0xa8>
   1323c:	e5832000 	str	r2, [r3]
}
   13240:	e320f000 	nop	{0}
   13244:	e24bd004 	sub	sp, fp, #4
   13248:	e8bd8800 	pop	{fp, pc}
   1324c:	000147f8 	strdeq	r4, [r1], -r8
   13250:	0001485c 	andeq	r4, r1, ip, asr r8
   13254:	00014870 	andeq	r4, r1, r0, ror r8
   13258:	0001488c 	andeq	r4, r1, ip, lsl #17
   1325c:	000148a0 	andeq	r4, r1, r0, lsr #17
   13260:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
   13264:	00014884 	andeq	r4, r1, r4, lsl #17
   13268:	00014888 	andeq	r4, r1, r8, lsl #17

0001326c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1326c:	e92d4800 	push	{fp, lr}
   13270:	e28db004 	add	fp, sp, #4
   13274:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13278:	e59f309c 	ldr	r3, [pc, #156]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   1327c:	e5933000 	ldr	r3, [r3]
   13280:	e3530000 	cmp	r3, #0
   13284:	0a000021 	beq	13310 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13288:	ebfffd16 	bl	126e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   1328c:	e59f308c 	ldr	r3, [pc, #140]	; 13320 <prvCheckTasksWaitingTermination+0xb4>
   13290:	e5933000 	ldr	r3, [r3]
   13294:	e3530000 	cmp	r3, #0
   13298:	03a03001 	moveq	r3, #1
   1329c:	13a03000 	movne	r3, #0
   132a0:	e6ef3073 	uxtb	r3, r3
   132a4:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   132a8:	ebfffd1a 	bl	12718 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   132ac:	e51b3008 	ldr	r3, [fp, #-8]
   132b0:	e3530000 	cmp	r3, #0
   132b4:	1a000015 	bne	13310 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   132b8:	ebfff4a0 	bl	10540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   132bc:	e59f305c 	ldr	r3, [pc, #92]	; 13320 <prvCheckTasksWaitingTermination+0xb4>
   132c0:	e593300c 	ldr	r3, [r3, #12]
   132c4:	e593300c 	ldr	r3, [r3, #12]
   132c8:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   132cc:	e51b300c 	ldr	r3, [fp, #-12]
   132d0:	e2833004 	add	r3, r3, #4
   132d4:	e1a00003 	mov	r0, r3
   132d8:	ebfff71e 	bl	10f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   132dc:	e59f3040 	ldr	r3, [pc, #64]	; 13324 <prvCheckTasksWaitingTermination+0xb8>
   132e0:	e5933000 	ldr	r3, [r3]
   132e4:	e2433001 	sub	r3, r3, #1
   132e8:	e59f2034 	ldr	r2, [pc, #52]	; 13324 <prvCheckTasksWaitingTermination+0xb8>
   132ec:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   132f0:	e59f3024 	ldr	r3, [pc, #36]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   132f4:	e5933000 	ldr	r3, [r3]
   132f8:	e2433001 	sub	r3, r3, #1
   132fc:	e59f2018 	ldr	r2, [pc, #24]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   13300:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   13304:	ebfff49e 	bl	10584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13308:	e51b000c 	ldr	r0, [fp, #-12]
   1330c:	eb00005f 	bl	13490 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   13310:	e320f000 	nop	{0}
   13314:	e24bd004 	sub	sp, fp, #4
   13318:	e8bd8800 	pop	{fp, pc}
   1331c:	000148b4 			; <UNDEFINED> instruction: 0x000148b4
   13320:	000148a0 	andeq	r4, r1, r0, lsr #17
   13324:	000148cc 	andeq	r4, r1, ip, asr #17

00013328 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   13328:	e92d4800 	push	{fp, lr}
   1332c:	e28db004 	add	fp, sp, #4
   13330:	e24dd008 	sub	sp, sp, #8
   13334:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   13338:	e59f308c 	ldr	r3, [pc, #140]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   1333c:	e5933000 	ldr	r3, [r3]
   13340:	e51b2008 	ldr	r2, [fp, #-8]
   13344:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13348:	e59f3080 	ldr	r3, [pc, #128]	; 133d0 <prvAddCurrentTaskToDelayedList+0xa8>
   1334c:	e5933000 	ldr	r3, [r3]
   13350:	e51b2008 	ldr	r2, [fp, #-8]
   13354:	e1520003 	cmp	r2, r3
   13358:	2a000008 	bcs	13380 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1335c:	e59f3070 	ldr	r3, [pc, #112]	; 133d4 <prvAddCurrentTaskToDelayedList+0xac>
   13360:	e5932000 	ldr	r2, [r3]
   13364:	e59f3060 	ldr	r3, [pc, #96]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   13368:	e5933000 	ldr	r3, [r3]
   1336c:	e2833004 	add	r3, r3, #4
   13370:	e1a01003 	mov	r1, r3
   13374:	e1a00002 	mov	r0, r2
   13378:	ebfff6c0 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   1337c:	ea00000f 	b	133c0 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13380:	e59f3050 	ldr	r3, [pc, #80]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb0>
   13384:	e5932000 	ldr	r2, [r3]
   13388:	e59f303c 	ldr	r3, [pc, #60]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   1338c:	e5933000 	ldr	r3, [r3]
   13390:	e2833004 	add	r3, r3, #4
   13394:	e1a01003 	mov	r1, r3
   13398:	e1a00002 	mov	r0, r2
   1339c:	ebfff6b7 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   133a0:	e59f3034 	ldr	r3, [pc, #52]	; 133dc <prvAddCurrentTaskToDelayedList+0xb4>
   133a4:	e5933000 	ldr	r3, [r3]
   133a8:	e51b2008 	ldr	r2, [fp, #-8]
   133ac:	e1520003 	cmp	r2, r3
   133b0:	2a000002 	bcs	133c0 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   133b4:	e59f2020 	ldr	r2, [pc, #32]	; 133dc <prvAddCurrentTaskToDelayedList+0xb4>
   133b8:	e51b3008 	ldr	r3, [fp, #-8]
   133bc:	e5823000 	str	r3, [r2]
}
   133c0:	e320f000 	nop	{0}
   133c4:	e24bd004 	sub	sp, fp, #4
   133c8:	e8bd8800 	pop	{fp, pc}
   133cc:	000147f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   133d0:	000148d0 	ldrdeq	r4, [r1], -r0
   133d4:	00014888 	andeq	r4, r1, r8, lsl #17
   133d8:	00014884 	andeq	r4, r1, r4, lsl #17
   133dc:	00014764 	andeq	r4, r1, r4, ror #14

000133e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   133e0:	e92d4800 	push	{fp, lr}
   133e4:	e28db004 	add	fp, sp, #4
   133e8:	e24dd010 	sub	sp, sp, #16
   133ec:	e1a03000 	mov	r3, r0
   133f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   133f4:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   133f8:	e3a00048 	mov	r0, #72	; 0x48
   133fc:	eb00028e 	bl	13e3c <pvPortMalloc>
   13400:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   13404:	e51b3008 	ldr	r3, [fp, #-8]
   13408:	e3530000 	cmp	r3, #0
   1340c:	0a00001b 	beq	13480 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   13410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13414:	e3530000 	cmp	r3, #0
   13418:	1a000005 	bne	13434 <prvAllocateTCBAndStack+0x54>
   1341c:	e15b30be 	ldrh	r3, [fp, #-14]
   13420:	e1a03103 	lsl	r3, r3, #2
   13424:	e1a00003 	mov	r0, r3
   13428:	eb000283 	bl	13e3c <pvPortMalloc>
   1342c:	e1a03000 	mov	r3, r0
   13430:	ea000000 	b	13438 <prvAllocateTCBAndStack+0x58>
   13434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13438:	e51b2008 	ldr	r2, [fp, #-8]
   1343c:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   13440:	e51b3008 	ldr	r3, [fp, #-8]
   13444:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13448:	e3530000 	cmp	r3, #0
   1344c:	1a000004 	bne	13464 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   13450:	e51b0008 	ldr	r0, [fp, #-8]
   13454:	eb0002ea 	bl	14004 <vPortFree>
			pxNewTCB = NULL;
   13458:	e3a03000 	mov	r3, #0
   1345c:	e50b3008 	str	r3, [fp, #-8]
   13460:	ea000006 	b	13480 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   13464:	e51b3008 	ldr	r3, [fp, #-8]
   13468:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   1346c:	e15b30be 	ldrh	r3, [fp, #-14]
   13470:	e1a03103 	lsl	r3, r3, #2
   13474:	e1a02003 	mov	r2, r3
   13478:	e3a010a5 	mov	r1, #165	; 0xa5
   1347c:	eb00042c 	bl	14534 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   13480:	e51b3008 	ldr	r3, [fp, #-8]
}
   13484:	e1a00003 	mov	r0, r3
   13488:	e24bd004 	sub	sp, fp, #4
   1348c:	e8bd8800 	pop	{fp, pc}

00013490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   13490:	e92d4800 	push	{fp, lr}
   13494:	e28db004 	add	fp, sp, #4
   13498:	e24dd008 	sub	sp, sp, #8
   1349c:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   134a0:	e51b3008 	ldr	r3, [fp, #-8]
   134a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   134a8:	e1a00003 	mov	r0, r3
   134ac:	eb0002d4 	bl	14004 <vPortFree>
		vPortFree( pxTCB );
   134b0:	e51b0008 	ldr	r0, [fp, #-8]
   134b4:	eb0002d2 	bl	14004 <vPortFree>
	}
   134b8:	e320f000 	nop	{0}
   134bc:	e24bd004 	sub	sp, fp, #4
   134c0:	e8bd8800 	pop	{fp, pc}

000134c4 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   134c4:	e92d4800 	push	{fp, lr}
   134c8:	e28db004 	add	fp, sp, #4
   134cc:	e24dd010 	sub	sp, sp, #16
   134d0:	e50b0010 	str	r0, [fp, #-16]
   134d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   134d8:	ea00001e 	b	13558 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   134dc:	e51b3010 	ldr	r3, [fp, #-16]
   134e0:	e16f3f13 	clz	r3, r3
   134e4:	e263301f 	rsb	r3, r3, #31
   134e8:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   134ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   134f0:	e51b3008 	ldr	r3, [fp, #-8]
   134f4:	e0823003 	add	r3, r2, r3
   134f8:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   134fc:	e59f206c 	ldr	r2, [pc, #108]	; 13570 <handleRange+0xac>
   13500:	e51b300c 	ldr	r3, [fp, #-12]
   13504:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   13508:	e3530000 	cmp	r3, #0
   1350c:	0a00000a 	beq	1353c <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   13510:	e59f2058 	ldr	r2, [pc, #88]	; 13570 <handleRange+0xac>
   13514:	e51b300c 	ldr	r3, [fp, #-12]
   13518:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   1351c:	e59f104c 	ldr	r1, [pc, #76]	; 13570 <handleRange+0xac>
   13520:	e51b300c 	ldr	r3, [fp, #-12]
   13524:	e1a03183 	lsl	r3, r3, #3
   13528:	e0813003 	add	r3, r1, r3
   1352c:	e5933004 	ldr	r3, [r3, #4]
   13530:	e1a01003 	mov	r1, r3
   13534:	e51b000c 	ldr	r0, [fp, #-12]
   13538:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   1353c:	e3a02001 	mov	r2, #1
   13540:	e51b3008 	ldr	r3, [fp, #-8]
   13544:	e1a03312 	lsl	r3, r2, r3
   13548:	e1e03003 	mvn	r3, r3
   1354c:	e51b2010 	ldr	r2, [fp, #-16]
   13550:	e0033002 	and	r3, r3, r2
   13554:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   13558:	e51b3010 	ldr	r3, [fp, #-16]
   1355c:	e3530000 	cmp	r3, #0
   13560:	1affffdd 	bne	134dc <handleRange+0x18>
	}
}
   13564:	e320f000 	nop	{0}
   13568:	e24bd004 	sub	sp, fp, #4
   1356c:	e8bd8800 	pop	{fp, pc}
   13570:	000148f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00013574 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   13574:	e92d4830 	push	{r4, r5, fp, lr}
   13578:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   1357c:	e59f3088 	ldr	r3, [pc, #136]	; 1360c <irqHandler+0x98>
   13580:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   13584:	e2043c01 	and	r3, r4, #256	; 0x100
   13588:	e3530000 	cmp	r3, #0
   1358c:	0a000007 	beq	135b0 <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   13590:	e59f3074 	ldr	r3, [pc, #116]	; 1360c <irqHandler+0x98>
   13594:	e5932004 	ldr	r2, [r3, #4]
   13598:	e59f3070 	ldr	r3, [pc, #112]	; 13610 <irqHandler+0x9c>
   1359c:	e5933000 	ldr	r3, [r3]
   135a0:	e0033002 	and	r3, r3, r2
   135a4:	e3a01000 	mov	r1, #0
   135a8:	e1a00003 	mov	r0, r3
   135ac:	ebffffc4 	bl	134c4 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   135b0:	e2043c02 	and	r3, r4, #512	; 0x200
   135b4:	e3530000 	cmp	r3, #0
   135b8:	0a000007 	beq	135dc <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   135bc:	e59f3048 	ldr	r3, [pc, #72]	; 1360c <irqHandler+0x98>
   135c0:	e5932008 	ldr	r2, [r3, #8]
   135c4:	e59f3044 	ldr	r3, [pc, #68]	; 13610 <irqHandler+0x9c>
   135c8:	e5933004 	ldr	r3, [r3, #4]
   135cc:	e0033002 	and	r3, r3, r2
   135d0:	e3a01020 	mov	r1, #32
   135d4:	e1a00003 	mov	r0, r3
   135d8:	ebffffb9 	bl	134c4 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   135dc:	e6ef3074 	uxtb	r3, r4
   135e0:	e3530000 	cmp	r3, #0
   135e4:	0a000006 	beq	13604 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   135e8:	e59f3020 	ldr	r3, [pc, #32]	; 13610 <irqHandler+0x9c>
   135ec:	e5933008 	ldr	r3, [r3, #8]
   135f0:	e0033004 	and	r3, r3, r4
   135f4:	e6ef3073 	uxtb	r3, r3
   135f8:	e3a01040 	mov	r1, #64	; 0x40
   135fc:	e1a00003 	mov	r0, r3
   13600:	ebffffaf 	bl	134c4 <handleRange>
}
   13604:	e320f000 	nop	{0}
   13608:	e8bd8830 	pop	{r4, r5, fp, pc}
   1360c:	2000b200 	andcs	fp, r0, r0, lsl #4
   13610:	00014b34 	andeq	r4, r1, r4, lsr fp

00013614 <irqUnblock>:

void irqUnblock (void)
{
   13614:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13618:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   1361c:	f1080080 	cpsie	i
}
   13620:	e320f000 	nop	{0}
   13624:	e28bd000 	add	sp, fp, #0
   13628:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1362c:	e12fff1e 	bx	lr

00013630 <irqBlock>:

void irqBlock (void)
{
   13630:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13634:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   13638:	f10c0080 	cpsid	i
}
   1363c:	e320f000 	nop	{0}
   13640:	e28bd000 	add	sp, fp, #0
   13644:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13648:	e12fff1e 	bx	lr

0001364c <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   1364c:	e92d4800 	push	{fp, lr}
   13650:	e28db004 	add	fp, sp, #4
   13654:	e24dd010 	sub	sp, sp, #16
   13658:	e50b0008 	str	r0, [fp, #-8]
   1365c:	e50b100c 	str	r1, [fp, #-12]
   13660:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13664:	e51b3008 	ldr	r3, [fp, #-8]
   13668:	e3530047 	cmp	r3, #71	; 0x47
   1366c:	8a00000b 	bhi	136a0 <irqRegister+0x54>
		irqBlock();
   13670:	ebffffee 	bl	13630 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   13674:	e59f1030 	ldr	r1, [pc, #48]	; 136ac <irqRegister+0x60>
   13678:	e51b3008 	ldr	r3, [fp, #-8]
   1367c:	e51b200c 	ldr	r2, [fp, #-12]
   13680:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   13684:	e59f2020 	ldr	r2, [pc, #32]	; 136ac <irqRegister+0x60>
   13688:	e51b3008 	ldr	r3, [fp, #-8]
   1368c:	e1a03183 	lsl	r3, r3, #3
   13690:	e0823003 	add	r3, r2, r3
   13694:	e51b2010 	ldr	r2, [fp, #-16]
   13698:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   1369c:	ebffffdc 	bl	13614 <irqUnblock>
	}
}
   136a0:	e320f000 	nop	{0}
   136a4:	e24bd004 	sub	sp, fp, #4
   136a8:	e8bd8800 	pop	{fp, pc}
   136ac:	000148f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

000136b0 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   136b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136b4:	e28db000 	add	fp, sp, #0
   136b8:	e24dd014 	sub	sp, sp, #20
   136bc:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   136c0:	e51b3010 	ldr	r3, [fp, #-16]
   136c4:	e203301f 	and	r3, r3, #31
   136c8:	e3a02001 	mov	r2, #1
   136cc:	e1a03312 	lsl	r3, r2, r3
   136d0:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   136d4:	e51b3010 	ldr	r3, [fp, #-16]
   136d8:	e353001f 	cmp	r3, #31
   136dc:	8a000009 	bhi	13708 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   136e0:	e59f2094 	ldr	r2, [pc, #148]	; 1377c <irqEnable+0xcc>
   136e4:	e51b3008 	ldr	r3, [fp, #-8]
   136e8:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   136ec:	e59f308c 	ldr	r3, [pc, #140]	; 13780 <irqEnable+0xd0>
   136f0:	e5932000 	ldr	r2, [r3]
   136f4:	e51b3008 	ldr	r3, [fp, #-8]
   136f8:	e1823003 	orr	r3, r2, r3
   136fc:	e59f207c 	ldr	r2, [pc, #124]	; 13780 <irqEnable+0xd0>
   13700:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   13704:	ea000018 	b	1376c <irqEnable+0xbc>
	else if (irq <= 63) {
   13708:	e51b3010 	ldr	r3, [fp, #-16]
   1370c:	e353003f 	cmp	r3, #63	; 0x3f
   13710:	8a000009 	bhi	1373c <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   13714:	e59f2060 	ldr	r2, [pc, #96]	; 1377c <irqEnable+0xcc>
   13718:	e51b3008 	ldr	r3, [fp, #-8]
   1371c:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   13720:	e59f3058 	ldr	r3, [pc, #88]	; 13780 <irqEnable+0xd0>
   13724:	e5932004 	ldr	r2, [r3, #4]
   13728:	e51b3008 	ldr	r3, [fp, #-8]
   1372c:	e1823003 	orr	r3, r2, r3
   13730:	e59f2048 	ldr	r2, [pc, #72]	; 13780 <irqEnable+0xd0>
   13734:	e5823004 	str	r3, [r2, #4]
}
   13738:	ea00000b 	b	1376c <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   1373c:	e51b3010 	ldr	r3, [fp, #-16]
   13740:	e3530047 	cmp	r3, #71	; 0x47
   13744:	8a000008 	bhi	1376c <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   13748:	e59f202c 	ldr	r2, [pc, #44]	; 1377c <irqEnable+0xcc>
   1374c:	e51b3008 	ldr	r3, [fp, #-8]
   13750:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   13754:	e59f3024 	ldr	r3, [pc, #36]	; 13780 <irqEnable+0xd0>
   13758:	e5932008 	ldr	r2, [r3, #8]
   1375c:	e51b3008 	ldr	r3, [fp, #-8]
   13760:	e1823003 	orr	r3, r2, r3
   13764:	e59f2014 	ldr	r2, [pc, #20]	; 13780 <irqEnable+0xd0>
   13768:	e5823008 	str	r3, [r2, #8]
}
   1376c:	e320f000 	nop	{0}
   13770:	e28bd000 	add	sp, fp, #0
   13774:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13778:	e12fff1e 	bx	lr
   1377c:	2000b200 	andcs	fp, r0, r0, lsl #4
   13780:	00014b34 	andeq	r4, r1, r4, lsr fp

00013784 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   13784:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13788:	e28db000 	add	fp, sp, #0
   1378c:	e24dd014 	sub	sp, sp, #20
   13790:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   13794:	e51b3010 	ldr	r3, [fp, #-16]
   13798:	e203301f 	and	r3, r3, #31
   1379c:	e3a02001 	mov	r2, #1
   137a0:	e1a03312 	lsl	r3, r2, r3
   137a4:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   137a8:	e51b3010 	ldr	r3, [fp, #-16]
   137ac:	e353001f 	cmp	r3, #31
   137b0:	8a00000a 	bhi	137e0 <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   137b4:	e59f20a0 	ldr	r2, [pc, #160]	; 1385c <irqDisable+0xd8>
   137b8:	e51b3008 	ldr	r3, [fp, #-8]
   137bc:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   137c0:	e59f3098 	ldr	r3, [pc, #152]	; 13860 <irqDisable+0xdc>
   137c4:	e5932000 	ldr	r2, [r3]
   137c8:	e51b3008 	ldr	r3, [fp, #-8]
   137cc:	e1e03003 	mvn	r3, r3
   137d0:	e0033002 	and	r3, r3, r2
   137d4:	e59f2084 	ldr	r2, [pc, #132]	; 13860 <irqDisable+0xdc>
   137d8:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   137dc:	ea00001a 	b	1384c <irqDisable+0xc8>
	else if (irq <= 63) {
   137e0:	e51b3010 	ldr	r3, [fp, #-16]
   137e4:	e353003f 	cmp	r3, #63	; 0x3f
   137e8:	8a00000a 	bhi	13818 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   137ec:	e59f2068 	ldr	r2, [pc, #104]	; 1385c <irqDisable+0xd8>
   137f0:	e51b3008 	ldr	r3, [fp, #-8]
   137f4:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   137f8:	e59f3060 	ldr	r3, [pc, #96]	; 13860 <irqDisable+0xdc>
   137fc:	e5932004 	ldr	r2, [r3, #4]
   13800:	e51b3008 	ldr	r3, [fp, #-8]
   13804:	e1e03003 	mvn	r3, r3
   13808:	e0033002 	and	r3, r3, r2
   1380c:	e59f204c 	ldr	r2, [pc, #76]	; 13860 <irqDisable+0xdc>
   13810:	e5823004 	str	r3, [r2, #4]
}
   13814:	ea00000c 	b	1384c <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13818:	e51b3010 	ldr	r3, [fp, #-16]
   1381c:	e3530047 	cmp	r3, #71	; 0x47
   13820:	8a000009 	bhi	1384c <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   13824:	e59f2030 	ldr	r2, [pc, #48]	; 1385c <irqDisable+0xd8>
   13828:	e51b3008 	ldr	r3, [fp, #-8]
   1382c:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   13830:	e59f3028 	ldr	r3, [pc, #40]	; 13860 <irqDisable+0xdc>
   13834:	e5932008 	ldr	r2, [r3, #8]
   13838:	e51b3008 	ldr	r3, [fp, #-8]
   1383c:	e1e03003 	mvn	r3, r3
   13840:	e0033002 	and	r3, r3, r2
   13844:	e59f2014 	ldr	r2, [pc, #20]	; 13860 <irqDisable+0xdc>
   13848:	e5823008 	str	r3, [r2, #8]
}
   1384c:	e320f000 	nop	{0}
   13850:	e28bd000 	add	sp, fp, #0
   13854:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13858:	e12fff1e 	bx	lr
   1385c:	2000b200 	andcs	fp, r0, r0, lsl #4
   13860:	00014b34 	andeq	r4, r1, r4, lsr fp

00013864 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13864:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13868:	e28db000 	add	fp, sp, #0
   1386c:	e24dd01c 	sub	sp, sp, #28
   13870:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13874:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   13878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1387c:	e59f20b4 	ldr	r2, [pc, #180]	; 13938 <SetGpioFunction+0xd4>
   13880:	e0832392 	umull	r2, r3, r2, r3
   13884:	e1a031a3 	lsr	r3, r3, #3
   13888:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   1388c:	e59f20a8 	ldr	r2, [pc, #168]	; 1393c <SetGpioFunction+0xd8>
   13890:	e51b3008 	ldr	r3, [fp, #-8]
   13894:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   13898:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   1389c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   138a0:	e59f3090 	ldr	r3, [pc, #144]	; 13938 <SetGpioFunction+0xd4>
   138a4:	e0832193 	umull	r2, r3, r3, r1
   138a8:	e1a021a3 	lsr	r2, r3, #3
   138ac:	e1a03002 	mov	r3, r2
   138b0:	e1a03103 	lsl	r3, r3, #2
   138b4:	e0833002 	add	r3, r3, r2
   138b8:	e1a03083 	lsl	r3, r3, #1
   138bc:	e0412003 	sub	r2, r1, r3
   138c0:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   138c4:	e51b2010 	ldr	r2, [fp, #-16]
   138c8:	e1a03002 	mov	r3, r2
   138cc:	e1a03083 	lsl	r3, r3, #1
   138d0:	e0833002 	add	r3, r3, r2
   138d4:	e3a02007 	mov	r2, #7
   138d8:	e1a03312 	lsl	r3, r2, r3
   138dc:	e1e03003 	mvn	r3, r3
   138e0:	e1a02003 	mov	r2, r3
   138e4:	e51b300c 	ldr	r3, [fp, #-12]
   138e8:	e0033002 	and	r3, r3, r2
   138ec:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f4:	e2031007 	and	r1, r3, #7
   138f8:	e51b2010 	ldr	r2, [fp, #-16]
   138fc:	e1a03002 	mov	r3, r2
   13900:	e1a03083 	lsl	r3, r3, #1
   13904:	e0833002 	add	r3, r3, r2
   13908:	e1a03311 	lsl	r3, r1, r3
   1390c:	e51b200c 	ldr	r2, [fp, #-12]
   13910:	e1823003 	orr	r3, r2, r3
   13914:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   13918:	e59f101c 	ldr	r1, [pc, #28]	; 1393c <SetGpioFunction+0xd8>
   1391c:	e51b3008 	ldr	r3, [fp, #-8]
   13920:	e51b200c 	ldr	r2, [fp, #-12]
   13924:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13928:	e320f000 	nop	{0}
   1392c:	e28bd000 	add	sp, fp, #0
   13930:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13934:	e12fff1e 	bx	lr
   13938:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   1393c:	20200000 	eorcs	r0, r0, r0

00013940 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   13940:	e92d4800 	push	{fp, lr}
   13944:	e28db004 	add	fp, sp, #4
   13948:	e24dd008 	sub	sp, sp, #8
   1394c:	e50b0008 	str	r0, [fp, #-8]
   13950:	e1a03001 	mov	r3, r1
   13954:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   13958:	e55b3009 	ldrb	r3, [fp, #-9]
   1395c:	e1a01003 	mov	r1, r3
   13960:	e51b0008 	ldr	r0, [fp, #-8]
   13964:	ebffffbe 	bl	13864 <SetGpioFunction>
}
   13968:	e320f000 	nop	{0}
   1396c:	e24bd004 	sub	sp, fp, #4
   13970:	e8bd8800 	pop	{fp, pc}

00013974 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13974:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13978:	e28db000 	add	fp, sp, #0
   1397c:	e24dd014 	sub	sp, sp, #20
   13980:	e50b0010 	str	r0, [fp, #-16]
   13984:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   13988:	e51b3010 	ldr	r3, [fp, #-16]
   1398c:	e1a032a3 	lsr	r3, r3, #5
   13990:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13994:	e51b3010 	ldr	r3, [fp, #-16]
   13998:	e203301f 	and	r3, r3, #31
   1399c:	e3a02001 	mov	r2, #1
   139a0:	e1a03312 	lsl	r3, r2, r3
   139a4:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   139a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139ac:	e3530000 	cmp	r3, #0
   139b0:	0a00000e 	beq	139f0 <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   139b4:	e59f206c 	ldr	r2, [pc, #108]	; 13a28 <SetGpio+0xb4>
   139b8:	e51b3008 	ldr	r3, [fp, #-8]
   139bc:	e2833006 	add	r3, r3, #6
   139c0:	e1a03103 	lsl	r3, r3, #2
   139c4:	e0823003 	add	r3, r2, r3
   139c8:	e5932004 	ldr	r2, [r3, #4]
   139cc:	e59f1054 	ldr	r1, [pc, #84]	; 13a28 <SetGpio+0xb4>
   139d0:	e51b300c 	ldr	r3, [fp, #-12]
   139d4:	e1822003 	orr	r2, r2, r3
   139d8:	e51b3008 	ldr	r3, [fp, #-8]
   139dc:	e2833006 	add	r3, r3, #6
   139e0:	e1a03103 	lsl	r3, r3, #2
   139e4:	e0813003 	add	r3, r1, r3
   139e8:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   139ec:	ea000009 	b	13a18 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   139f0:	e59f2030 	ldr	r2, [pc, #48]	; 13a28 <SetGpio+0xb4>
   139f4:	e51b3008 	ldr	r3, [fp, #-8]
   139f8:	e283300a 	add	r3, r3, #10
   139fc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13a00:	e59f1020 	ldr	r1, [pc, #32]	; 13a28 <SetGpio+0xb4>
   13a04:	e51b300c 	ldr	r3, [fp, #-12]
   13a08:	e1822003 	orr	r2, r2, r3
   13a0c:	e51b3008 	ldr	r3, [fp, #-8]
   13a10:	e283300a 	add	r3, r3, #10
   13a14:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13a18:	e320f000 	nop	{0}
   13a1c:	e28bd000 	add	sp, fp, #0
   13a20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a24:	e12fff1e 	bx	lr
   13a28:	20200000 	eorcs	r0, r0, r0

00013a2c <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   13a2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a30:	e28db000 	add	fp, sp, #0
   13a34:	e24dd00c 	sub	sp, sp, #12
   13a38:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a3c:	e59f2034 	ldr	r2, [pc, #52]	; 13a78 <ReadGpio+0x4c>
   13a40:	e51b3008 	ldr	r3, [fp, #-8]
   13a44:	e1a032a3 	lsr	r3, r3, #5
   13a48:	e283300c 	add	r3, r3, #12
   13a4c:	e1a03103 	lsl	r3, r3, #2
   13a50:	e0823003 	add	r3, r2, r3
   13a54:	e5932004 	ldr	r2, [r3, #4]
   13a58:	e51b3008 	ldr	r3, [fp, #-8]
   13a5c:	e203301f 	and	r3, r3, #31
   13a60:	e1a03332 	lsr	r3, r2, r3
   13a64:	e2033001 	and	r3, r3, #1
}
   13a68:	e1a00003 	mov	r0, r3
   13a6c:	e28bd000 	add	sp, fp, #0
   13a70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a74:	e12fff1e 	bx	lr
   13a78:	20200000 	eorcs	r0, r0, r0

00013a7c <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a80:	e28db000 	add	fp, sp, #0
   13a84:	e24dd014 	sub	sp, sp, #20
   13a88:	e50b0010 	str	r0, [fp, #-16]
   13a8c:	e1a03001 	mov	r3, r1
   13a90:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   13a94:	e3a02001 	mov	r2, #1
   13a98:	e51b3010 	ldr	r3, [fp, #-16]
   13a9c:	e1a03312 	lsl	r3, r2, r3
   13aa0:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13aa4:	e51b3010 	ldr	r3, [fp, #-16]
   13aa8:	e1a032a3 	lsr	r3, r3, #5
   13aac:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13ab0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ab4:	e3530006 	cmp	r3, #6
   13ab8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13abc:	ea000055 	b	13c18 <EnableGpioDetect+0x19c>
   13ac0:	00013c14 	andeq	r3, r1, r4, lsl ip
   13ac4:	00013adc 	ldrdeq	r3, [r1], -ip
   13ac8:	00013b18 	andeq	r3, r1, r8, lsl fp
   13acc:	00013b44 	andeq	r3, r1, r4, asr #22
   13ad0:	00013b80 	andeq	r3, r1, r0, lsl #23
   13ad4:	00013bac 	andeq	r3, r1, ip, lsr #23
   13ad8:	00013be8 	andeq	r3, r1, r8, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13adc:	e59f2144 	ldr	r2, [pc, #324]	; 13c28 <EnableGpioDetect+0x1ac>
   13ae0:	e51b300c 	ldr	r3, [fp, #-12]
   13ae4:	e2833012 	add	r3, r3, #18
   13ae8:	e1a03103 	lsl	r3, r3, #2
   13aec:	e0823003 	add	r3, r2, r3
   13af0:	e5932004 	ldr	r2, [r3, #4]
   13af4:	e59f112c 	ldr	r1, [pc, #300]	; 13c28 <EnableGpioDetect+0x1ac>
   13af8:	e51b3008 	ldr	r3, [fp, #-8]
   13afc:	e1822003 	orr	r2, r2, r3
   13b00:	e51b300c 	ldr	r3, [fp, #-12]
   13b04:	e2833012 	add	r3, r3, #18
   13b08:	e1a03103 	lsl	r3, r3, #2
   13b0c:	e0813003 	add	r3, r1, r3
   13b10:	e5832004 	str	r2, [r3, #4]
		break;
   13b14:	ea00003f 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b18:	e59f2108 	ldr	r2, [pc, #264]	; 13c28 <EnableGpioDetect+0x1ac>
   13b1c:	e51b300c 	ldr	r3, [fp, #-12]
   13b20:	e2833016 	add	r3, r3, #22
   13b24:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b28:	e59f10f8 	ldr	r1, [pc, #248]	; 13c28 <EnableGpioDetect+0x1ac>
   13b2c:	e51b3008 	ldr	r3, [fp, #-8]
   13b30:	e1822003 	orr	r2, r2, r3
   13b34:	e51b300c 	ldr	r3, [fp, #-12]
   13b38:	e2833016 	add	r3, r3, #22
   13b3c:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13b40:	ea000034 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b44:	e59f20dc 	ldr	r2, [pc, #220]	; 13c28 <EnableGpioDetect+0x1ac>
   13b48:	e51b300c 	ldr	r3, [fp, #-12]
   13b4c:	e2833018 	add	r3, r3, #24
   13b50:	e1a03103 	lsl	r3, r3, #2
   13b54:	e0823003 	add	r3, r2, r3
   13b58:	e5932004 	ldr	r2, [r3, #4]
   13b5c:	e59f10c4 	ldr	r1, [pc, #196]	; 13c28 <EnableGpioDetect+0x1ac>
   13b60:	e51b3008 	ldr	r3, [fp, #-8]
   13b64:	e1822003 	orr	r2, r2, r3
   13b68:	e51b300c 	ldr	r3, [fp, #-12]
   13b6c:	e2833018 	add	r3, r3, #24
   13b70:	e1a03103 	lsl	r3, r3, #2
   13b74:	e0813003 	add	r3, r1, r3
   13b78:	e5832004 	str	r2, [r3, #4]
		break;
   13b7c:	ea000025 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b80:	e59f20a0 	ldr	r2, [pc, #160]	; 13c28 <EnableGpioDetect+0x1ac>
   13b84:	e51b300c 	ldr	r3, [fp, #-12]
   13b88:	e283301c 	add	r3, r3, #28
   13b8c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b90:	e59f1090 	ldr	r1, [pc, #144]	; 13c28 <EnableGpioDetect+0x1ac>
   13b94:	e51b3008 	ldr	r3, [fp, #-8]
   13b98:	e1822003 	orr	r2, r2, r3
   13b9c:	e51b300c 	ldr	r3, [fp, #-12]
   13ba0:	e283301c 	add	r3, r3, #28
   13ba4:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13ba8:	ea00001a 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13bac:	e59f2074 	ldr	r2, [pc, #116]	; 13c28 <EnableGpioDetect+0x1ac>
   13bb0:	e51b300c 	ldr	r3, [fp, #-12]
   13bb4:	e283301e 	add	r3, r3, #30
   13bb8:	e1a03103 	lsl	r3, r3, #2
   13bbc:	e0823003 	add	r3, r2, r3
   13bc0:	e5932004 	ldr	r2, [r3, #4]
   13bc4:	e59f105c 	ldr	r1, [pc, #92]	; 13c28 <EnableGpioDetect+0x1ac>
   13bc8:	e51b3008 	ldr	r3, [fp, #-8]
   13bcc:	e1822003 	orr	r2, r2, r3
   13bd0:	e51b300c 	ldr	r3, [fp, #-12]
   13bd4:	e283301e 	add	r3, r3, #30
   13bd8:	e1a03103 	lsl	r3, r3, #2
   13bdc:	e0813003 	add	r3, r1, r3
   13be0:	e5832004 	str	r2, [r3, #4]
		break;
   13be4:	ea00000b 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13be8:	e59f2038 	ldr	r2, [pc, #56]	; 13c28 <EnableGpioDetect+0x1ac>
   13bec:	e51b300c 	ldr	r3, [fp, #-12]
   13bf0:	e2833022 	add	r3, r3, #34	; 0x22
   13bf4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13bf8:	e59f1028 	ldr	r1, [pc, #40]	; 13c28 <EnableGpioDetect+0x1ac>
   13bfc:	e51b3008 	ldr	r3, [fp, #-8]
   13c00:	e1822003 	orr	r2, r2, r3
   13c04:	e51b300c 	ldr	r3, [fp, #-12]
   13c08:	e2833022 	add	r3, r3, #34	; 0x22
   13c0c:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13c10:	ea000000 	b	13c18 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   13c14:	e320f000 	nop	{0}
	}
}
   13c18:	e320f000 	nop	{0}
   13c1c:	e28bd000 	add	sp, fp, #0
   13c20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c24:	e12fff1e 	bx	lr
   13c28:	20200000 	eorcs	r0, r0, r0

00013c2c <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c30:	e28db000 	add	fp, sp, #0
   13c34:	e24dd014 	sub	sp, sp, #20
   13c38:	e50b0010 	str	r0, [fp, #-16]
   13c3c:	e1a03001 	mov	r3, r1
   13c40:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   13c44:	e51b3010 	ldr	r3, [fp, #-16]
   13c48:	e203301f 	and	r3, r3, #31
   13c4c:	e3a02001 	mov	r2, #1
   13c50:	e1a03312 	lsl	r3, r2, r3
   13c54:	e1e03003 	mvn	r3, r3
   13c58:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c5c:	e51b3010 	ldr	r3, [fp, #-16]
   13c60:	e1a032a3 	lsr	r3, r3, #5
   13c64:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c68:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c6c:	e3530006 	cmp	r3, #6
   13c70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c74:	ea000055 	b	13dd0 <DisableGpioDetect+0x1a4>
   13c78:	00013dcc 	andeq	r3, r1, ip, asr #27
   13c7c:	00013c94 	muleq	r1, r4, ip
   13c80:	00013cd0 	ldrdeq	r3, [r1], -r0
   13c84:	00013cfc 	strdeq	r3, [r1], -ip
   13c88:	00013d38 	andeq	r3, r1, r8, lsr sp
   13c8c:	00013d64 	andeq	r3, r1, r4, ror #26
   13c90:	00013da0 	andeq	r3, r1, r0, lsr #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c94:	e59f2144 	ldr	r2, [pc, #324]	; 13de0 <DisableGpioDetect+0x1b4>
   13c98:	e51b300c 	ldr	r3, [fp, #-12]
   13c9c:	e2833012 	add	r3, r3, #18
   13ca0:	e1a03103 	lsl	r3, r3, #2
   13ca4:	e0823003 	add	r3, r2, r3
   13ca8:	e5932004 	ldr	r2, [r3, #4]
   13cac:	e59f112c 	ldr	r1, [pc, #300]	; 13de0 <DisableGpioDetect+0x1b4>
   13cb0:	e51b3008 	ldr	r3, [fp, #-8]
   13cb4:	e0022003 	and	r2, r2, r3
   13cb8:	e51b300c 	ldr	r3, [fp, #-12]
   13cbc:	e2833012 	add	r3, r3, #18
   13cc0:	e1a03103 	lsl	r3, r3, #2
   13cc4:	e0813003 	add	r3, r1, r3
   13cc8:	e5832004 	str	r2, [r3, #4]
		break;
   13ccc:	ea00003f 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13cd0:	e59f2108 	ldr	r2, [pc, #264]	; 13de0 <DisableGpioDetect+0x1b4>
   13cd4:	e51b300c 	ldr	r3, [fp, #-12]
   13cd8:	e2833016 	add	r3, r3, #22
   13cdc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13ce0:	e59f10f8 	ldr	r1, [pc, #248]	; 13de0 <DisableGpioDetect+0x1b4>
   13ce4:	e51b3008 	ldr	r3, [fp, #-8]
   13ce8:	e0022003 	and	r2, r2, r3
   13cec:	e51b300c 	ldr	r3, [fp, #-12]
   13cf0:	e2833016 	add	r3, r3, #22
   13cf4:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13cf8:	ea000034 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13cfc:	e59f20dc 	ldr	r2, [pc, #220]	; 13de0 <DisableGpioDetect+0x1b4>
   13d00:	e51b300c 	ldr	r3, [fp, #-12]
   13d04:	e2833018 	add	r3, r3, #24
   13d08:	e1a03103 	lsl	r3, r3, #2
   13d0c:	e0823003 	add	r3, r2, r3
   13d10:	e5932004 	ldr	r2, [r3, #4]
   13d14:	e59f10c4 	ldr	r1, [pc, #196]	; 13de0 <DisableGpioDetect+0x1b4>
   13d18:	e51b3008 	ldr	r3, [fp, #-8]
   13d1c:	e0022003 	and	r2, r2, r3
   13d20:	e51b300c 	ldr	r3, [fp, #-12]
   13d24:	e2833018 	add	r3, r3, #24
   13d28:	e1a03103 	lsl	r3, r3, #2
   13d2c:	e0813003 	add	r3, r1, r3
   13d30:	e5832004 	str	r2, [r3, #4]
		break;
   13d34:	ea000025 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d38:	e59f20a0 	ldr	r2, [pc, #160]	; 13de0 <DisableGpioDetect+0x1b4>
   13d3c:	e51b300c 	ldr	r3, [fp, #-12]
   13d40:	e283301c 	add	r3, r3, #28
   13d44:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13d48:	e59f1090 	ldr	r1, [pc, #144]	; 13de0 <DisableGpioDetect+0x1b4>
   13d4c:	e51b3008 	ldr	r3, [fp, #-8]
   13d50:	e0022003 	and	r2, r2, r3
   13d54:	e51b300c 	ldr	r3, [fp, #-12]
   13d58:	e283301c 	add	r3, r3, #28
   13d5c:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13d60:	ea00001a 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d64:	e59f2074 	ldr	r2, [pc, #116]	; 13de0 <DisableGpioDetect+0x1b4>
   13d68:	e51b300c 	ldr	r3, [fp, #-12]
   13d6c:	e283301e 	add	r3, r3, #30
   13d70:	e1a03103 	lsl	r3, r3, #2
   13d74:	e0823003 	add	r3, r2, r3
   13d78:	e5932004 	ldr	r2, [r3, #4]
   13d7c:	e59f105c 	ldr	r1, [pc, #92]	; 13de0 <DisableGpioDetect+0x1b4>
   13d80:	e51b3008 	ldr	r3, [fp, #-8]
   13d84:	e0022003 	and	r2, r2, r3
   13d88:	e51b300c 	ldr	r3, [fp, #-12]
   13d8c:	e283301e 	add	r3, r3, #30
   13d90:	e1a03103 	lsl	r3, r3, #2
   13d94:	e0813003 	add	r3, r1, r3
   13d98:	e5832004 	str	r2, [r3, #4]
		break;
   13d9c:	ea00000b 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13da0:	e59f2038 	ldr	r2, [pc, #56]	; 13de0 <DisableGpioDetect+0x1b4>
   13da4:	e51b300c 	ldr	r3, [fp, #-12]
   13da8:	e2833022 	add	r3, r3, #34	; 0x22
   13dac:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13db0:	e59f1028 	ldr	r1, [pc, #40]	; 13de0 <DisableGpioDetect+0x1b4>
   13db4:	e51b3008 	ldr	r3, [fp, #-8]
   13db8:	e0022003 	and	r2, r2, r3
   13dbc:	e51b300c 	ldr	r3, [fp, #-12]
   13dc0:	e2833022 	add	r3, r3, #34	; 0x22
   13dc4:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13dc8:	ea000000 	b	13dd0 <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   13dcc:	e320f000 	nop	{0}
	}
}
   13dd0:	e320f000 	nop	{0}
   13dd4:	e28bd000 	add	sp, fp, #0
   13dd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13ddc:	e12fff1e 	bx	lr
   13de0:	20200000 	eorcs	r0, r0, r0

00013de4 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   13de4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13de8:	e28db000 	add	fp, sp, #0
   13dec:	e24dd014 	sub	sp, sp, #20
   13df0:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13df4:	e51b3010 	ldr	r3, [fp, #-16]
   13df8:	e203301f 	and	r3, r3, #31
   13dfc:	e3a02001 	mov	r2, #1
   13e00:	e1a03312 	lsl	r3, r2, r3
   13e04:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13e08:	e51b3010 	ldr	r3, [fp, #-16]
   13e0c:	e1a032a3 	lsr	r3, r3, #5
   13e10:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13e14:	e59f101c 	ldr	r1, [pc, #28]	; 13e38 <ClearGpioInterrupt+0x54>
   13e18:	e51b300c 	ldr	r3, [fp, #-12]
   13e1c:	e2833010 	add	r3, r3, #16
   13e20:	e51b2008 	ldr	r2, [fp, #-8]
   13e24:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13e28:	e320f000 	nop	{0}
   13e2c:	e28bd000 	add	sp, fp, #0
   13e30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e34:	e12fff1e 	bx	lr
   13e38:	20200000 	eorcs	r0, r0, r0

00013e3c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   13e3c:	e92d4800 	push	{fp, lr}
   13e40:	e28db004 	add	fp, sp, #4
   13e44:	e24dd018 	sub	sp, sp, #24
   13e48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   13e4c:	e3a03000 	mov	r3, #0
   13e50:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   13e54:	ebfffa23 	bl	126e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   13e58:	e59f3194 	ldr	r3, [pc, #404]	; 13ff4 <pvPortMalloc+0x1b8>
   13e5c:	e5933000 	ldr	r3, [r3]
   13e60:	e3530000 	cmp	r3, #0
   13e64:	1a000000 	bne	13e6c <pvPortMalloc+0x30>
		{
			prvHeapInit();
   13e68:	eb000093 	bl	140bc <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   13e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e70:	e3530000 	cmp	r3, #0
   13e74:	0a00000c 	beq	13eac <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   13e78:	e3a03010 	mov	r3, #16
   13e7c:	e1a02003 	mov	r2, r3
   13e80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e84:	e0833002 	add	r3, r3, r2
   13e88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   13e8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e90:	e2033007 	and	r3, r3, #7
   13e94:	e3530000 	cmp	r3, #0
   13e98:	0a000003 	beq	13eac <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   13e9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ea0:	e3c33007 	bic	r3, r3, #7
   13ea4:	e2833008 	add	r3, r3, #8
   13ea8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   13eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eb0:	e3530000 	cmp	r3, #0
   13eb4:	0a000043 	beq	13fc8 <pvPortMalloc+0x18c>
   13eb8:	e3a02a01 	mov	r2, #4096	; 0x1000
   13ebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ec0:	e1530002 	cmp	r3, r2
   13ec4:	2a00003f 	bcs	13fc8 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   13ec8:	e59f3128 	ldr	r3, [pc, #296]	; 13ff8 <pvPortMalloc+0x1bc>
   13ecc:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   13ed0:	e59f3120 	ldr	r3, [pc, #288]	; 13ff8 <pvPortMalloc+0x1bc>
   13ed4:	e5933000 	ldr	r3, [r3]
   13ed8:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13edc:	ea000004 	b	13ef4 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   13ee0:	e51b3008 	ldr	r3, [fp, #-8]
   13ee4:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   13ee8:	e51b3008 	ldr	r3, [fp, #-8]
   13eec:	e5933000 	ldr	r3, [r3]
   13ef0:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13ef4:	e51b3008 	ldr	r3, [fp, #-8]
   13ef8:	e5933004 	ldr	r3, [r3, #4]
   13efc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f00:	e1520003 	cmp	r2, r3
   13f04:	9a000003 	bls	13f18 <pvPortMalloc+0xdc>
   13f08:	e51b3008 	ldr	r3, [fp, #-8]
   13f0c:	e5933000 	ldr	r3, [r3]
   13f10:	e3530000 	cmp	r3, #0
   13f14:	1afffff1 	bne	13ee0 <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   13f18:	e59f30d4 	ldr	r3, [pc, #212]	; 13ff4 <pvPortMalloc+0x1b8>
   13f1c:	e5933000 	ldr	r3, [r3]
   13f20:	e51b2008 	ldr	r2, [fp, #-8]
   13f24:	e1520003 	cmp	r2, r3
   13f28:	0a000026 	beq	13fc8 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   13f2c:	e51b300c 	ldr	r3, [fp, #-12]
   13f30:	e5933000 	ldr	r3, [r3]
   13f34:	e3a02010 	mov	r2, #16
   13f38:	e0833002 	add	r3, r3, r2
   13f3c:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   13f40:	e51b3008 	ldr	r3, [fp, #-8]
   13f44:	e5932000 	ldr	r2, [r3]
   13f48:	e51b300c 	ldr	r3, [fp, #-12]
   13f4c:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13f50:	e51b3008 	ldr	r3, [fp, #-8]
   13f54:	e5932004 	ldr	r2, [r3, #4]
   13f58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f5c:	e0423003 	sub	r3, r2, r3
   13f60:	e3a02010 	mov	r2, #16
   13f64:	e1a02082 	lsl	r2, r2, #1
   13f68:	e1530002 	cmp	r3, r2
   13f6c:	9a00000e 	bls	13fac <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   13f70:	e51b2008 	ldr	r2, [fp, #-8]
   13f74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f78:	e0823003 	add	r3, r2, r3
   13f7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   13f80:	e51b3008 	ldr	r3, [fp, #-8]
   13f84:	e5932004 	ldr	r2, [r3, #4]
   13f88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f8c:	e0422003 	sub	r2, r2, r3
   13f90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13f94:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   13f98:	e51b3008 	ldr	r3, [fp, #-8]
   13f9c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fa0:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   13fa4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   13fa8:	eb000079 	bl	14194 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   13fac:	e59f3048 	ldr	r3, [pc, #72]	; 13ffc <pvPortMalloc+0x1c0>
   13fb0:	e5932000 	ldr	r2, [r3]
   13fb4:	e51b3008 	ldr	r3, [fp, #-8]
   13fb8:	e5933004 	ldr	r3, [r3, #4]
   13fbc:	e0423003 	sub	r3, r2, r3
   13fc0:	e59f2034 	ldr	r2, [pc, #52]	; 13ffc <pvPortMalloc+0x1c0>
   13fc4:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   13fc8:	ebfff9d2 	bl	12718 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   13fcc:	e59f302c 	ldr	r3, [pc, #44]	; 14000 <pvPortMalloc+0x1c4>
   13fd0:	e5932000 	ldr	r2, [r3]
   13fd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fd8:	e0823003 	add	r3, r2, r3
   13fdc:	e59f201c 	ldr	r2, [pc, #28]	; 14000 <pvPortMalloc+0x1c4>
   13fe0:	e5823000 	str	r3, [r2]

	return pvReturn;
   13fe4:	e51b3010 	ldr	r3, [fp, #-16]
}
   13fe8:	e1a00003 	mov	r0, r3
   13fec:	e24bd004 	sub	sp, fp, #4
   13ff0:	e8bd8800 	pop	{fp, pc}
   13ff4:	00015b48 	andeq	r5, r1, r8, asr #22
   13ff8:	00015b40 	andeq	r5, r1, r0, asr #22
   13ffc:	00014768 	andeq	r4, r1, r8, ror #14
   14000:	00015b4c 	andeq	r5, r1, ip, asr #22

00014004 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14004:	e92d4800 	push	{fp, lr}
   14008:	e28db004 	add	fp, sp, #4
   1400c:	e24dd010 	sub	sp, sp, #16
   14010:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   14014:	e51b3010 	ldr	r3, [fp, #-16]
   14018:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   1401c:	e51b3010 	ldr	r3, [fp, #-16]
   14020:	e3530000 	cmp	r3, #0
   14024:	0a000011 	beq	14070 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   14028:	e3a03010 	mov	r3, #16
   1402c:	e2633000 	rsb	r3, r3, #0
   14030:	e51b2008 	ldr	r2, [fp, #-8]
   14034:	e0823003 	add	r3, r2, r3
   14038:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   1403c:	e51b3008 	ldr	r3, [fp, #-8]
   14040:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   14044:	ebfff9a7 	bl	126e8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   14048:	e51b300c 	ldr	r3, [fp, #-12]
   1404c:	e5932004 	ldr	r2, [r3, #4]
   14050:	e59f3024 	ldr	r3, [pc, #36]	; 1407c <vPortFree+0x78>
   14054:	e5933000 	ldr	r3, [r3]
   14058:	e0823003 	add	r3, r2, r3
   1405c:	e59f2018 	ldr	r2, [pc, #24]	; 1407c <vPortFree+0x78>
   14060:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   14064:	e51b000c 	ldr	r0, [fp, #-12]
   14068:	eb000049 	bl	14194 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   1406c:	ebfff9a9 	bl	12718 <xTaskResumeAll>
	}
}
   14070:	e320f000 	nop	{0}
   14074:	e24bd004 	sub	sp, fp, #4
   14078:	e8bd8800 	pop	{fp, pc}
   1407c:	00014768 	andeq	r4, r1, r8, ror #14

00014080 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   14080:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14084:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   14088:	e59f3010 	ldr	r3, [pc, #16]	; 140a0 <xPortGetFreeHeapSize+0x20>
   1408c:	e5933000 	ldr	r3, [r3]
}
   14090:	e1a00003 	mov	r0, r3
   14094:	e28bd000 	add	sp, fp, #0
   14098:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1409c:	e12fff1e 	bx	lr
   140a0:	00014768 	andeq	r4, r1, r8, ror #14

000140a4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   140a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140a8:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   140ac:	e320f000 	nop	{0}
   140b0:	e28bd000 	add	sp, fp, #0
   140b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140b8:	e12fff1e 	bx	lr

000140bc <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   140bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140c0:	e28db000 	add	fp, sp, #0
   140c4:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   140c8:	e59f30b4 	ldr	r3, [pc, #180]	; 14184 <prvHeapInit+0xc8>
   140cc:	e59f20b4 	ldr	r2, [pc, #180]	; 14188 <prvHeapInit+0xcc>
   140d0:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   140d4:	e59f30a8 	ldr	r3, [pc, #168]	; 14184 <prvHeapInit+0xc8>
   140d8:	e3a02000 	mov	r2, #0
   140dc:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   140e0:	e3a02a01 	mov	r2, #4096	; 0x1000
   140e4:	e59f309c 	ldr	r3, [pc, #156]	; 14188 <prvHeapInit+0xcc>
   140e8:	e0823003 	add	r3, r2, r3
   140ec:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   140f0:	e3a03010 	mov	r3, #16
   140f4:	e2633000 	rsb	r3, r3, #0
   140f8:	e51b2008 	ldr	r2, [fp, #-8]
   140fc:	e0823003 	add	r3, r2, r3
   14100:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   14104:	e59f2080 	ldr	r2, [pc, #128]	; 1418c <prvHeapInit+0xd0>
   14108:	e51b3008 	ldr	r3, [fp, #-8]
   1410c:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   14110:	e59f3074 	ldr	r3, [pc, #116]	; 1418c <prvHeapInit+0xd0>
   14114:	e5933000 	ldr	r3, [r3]
   14118:	e3a02000 	mov	r2, #0
   1411c:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   14120:	e59f3064 	ldr	r3, [pc, #100]	; 1418c <prvHeapInit+0xd0>
   14124:	e5933000 	ldr	r3, [r3]
   14128:	e3a02000 	mov	r2, #0
   1412c:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   14130:	e59f3050 	ldr	r3, [pc, #80]	; 14188 <prvHeapInit+0xcc>
   14134:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   14138:	e3a03a01 	mov	r3, #4096	; 0x1000
   1413c:	e3a02010 	mov	r2, #16
   14140:	e0432002 	sub	r2, r3, r2
   14144:	e51b300c 	ldr	r3, [fp, #-12]
   14148:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   1414c:	e59f3038 	ldr	r3, [pc, #56]	; 1418c <prvHeapInit+0xd0>
   14150:	e5932000 	ldr	r2, [r3]
   14154:	e51b300c 	ldr	r3, [fp, #-12]
   14158:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   1415c:	e59f302c 	ldr	r3, [pc, #44]	; 14190 <prvHeapInit+0xd4>
   14160:	e5933000 	ldr	r3, [r3]
   14164:	e3a02010 	mov	r2, #16
   14168:	e0433002 	sub	r3, r3, r2
   1416c:	e59f201c 	ldr	r2, [pc, #28]	; 14190 <prvHeapInit+0xd4>
   14170:	e5823000 	str	r3, [r2]
}
   14174:	e320f000 	nop	{0}
   14178:	e28bd000 	add	sp, fp, #0
   1417c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14180:	e12fff1e 	bx	lr
   14184:	00015b40 	andeq	r5, r1, r0, asr #22
   14188:	00014b40 	andeq	r4, r1, r0, asr #22
   1418c:	00015b48 	andeq	r5, r1, r8, asr #22
   14190:	00014768 	andeq	r4, r1, r8, ror #14

00014194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   14194:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14198:	e28db000 	add	fp, sp, #0
   1419c:	e24dd014 	sub	sp, sp, #20
   141a0:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   141a4:	e59f3134 	ldr	r3, [pc, #308]	; 142e0 <prvInsertBlockIntoFreeList+0x14c>
   141a8:	e50b3008 	str	r3, [fp, #-8]
   141ac:	ea000002 	b	141bc <prvInsertBlockIntoFreeList+0x28>
   141b0:	e51b3008 	ldr	r3, [fp, #-8]
   141b4:	e5933000 	ldr	r3, [r3]
   141b8:	e50b3008 	str	r3, [fp, #-8]
   141bc:	e51b3008 	ldr	r3, [fp, #-8]
   141c0:	e5933000 	ldr	r3, [r3]
   141c4:	e51b2010 	ldr	r2, [fp, #-16]
   141c8:	e1520003 	cmp	r2, r3
   141cc:	8afffff7 	bhi	141b0 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   141d0:	e51b3008 	ldr	r3, [fp, #-8]
   141d4:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   141d8:	e51b3008 	ldr	r3, [fp, #-8]
   141dc:	e5933004 	ldr	r3, [r3, #4]
   141e0:	e51b200c 	ldr	r2, [fp, #-12]
   141e4:	e0823003 	add	r3, r2, r3
   141e8:	e51b2010 	ldr	r2, [fp, #-16]
   141ec:	e1520003 	cmp	r2, r3
   141f0:	1a000008 	bne	14218 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   141f4:	e51b3008 	ldr	r3, [fp, #-8]
   141f8:	e5932004 	ldr	r2, [r3, #4]
   141fc:	e51b3010 	ldr	r3, [fp, #-16]
   14200:	e5933004 	ldr	r3, [r3, #4]
   14204:	e0822003 	add	r2, r2, r3
   14208:	e51b3008 	ldr	r3, [fp, #-8]
   1420c:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   14210:	e51b3008 	ldr	r3, [fp, #-8]
   14214:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   14218:	e51b3010 	ldr	r3, [fp, #-16]
   1421c:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   14220:	e51b3010 	ldr	r3, [fp, #-16]
   14224:	e5933004 	ldr	r3, [r3, #4]
   14228:	e51b200c 	ldr	r2, [fp, #-12]
   1422c:	e0822003 	add	r2, r2, r3
   14230:	e51b3008 	ldr	r3, [fp, #-8]
   14234:	e5933000 	ldr	r3, [r3]
   14238:	e1520003 	cmp	r2, r3
   1423c:	1a000018 	bne	142a4 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   14240:	e51b3008 	ldr	r3, [fp, #-8]
   14244:	e5932000 	ldr	r2, [r3]
   14248:	e59f3094 	ldr	r3, [pc, #148]	; 142e4 <prvInsertBlockIntoFreeList+0x150>
   1424c:	e5933000 	ldr	r3, [r3]
   14250:	e1520003 	cmp	r2, r3
   14254:	0a00000d 	beq	14290 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   14258:	e51b3010 	ldr	r3, [fp, #-16]
   1425c:	e5932004 	ldr	r2, [r3, #4]
   14260:	e51b3008 	ldr	r3, [fp, #-8]
   14264:	e5933000 	ldr	r3, [r3]
   14268:	e5933004 	ldr	r3, [r3, #4]
   1426c:	e0822003 	add	r2, r2, r3
   14270:	e51b3010 	ldr	r3, [fp, #-16]
   14274:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   14278:	e51b3008 	ldr	r3, [fp, #-8]
   1427c:	e5933000 	ldr	r3, [r3]
   14280:	e5932000 	ldr	r2, [r3]
   14284:	e51b3010 	ldr	r3, [fp, #-16]
   14288:	e5832000 	str	r2, [r3]
   1428c:	ea000008 	b	142b4 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   14290:	e59f304c 	ldr	r3, [pc, #76]	; 142e4 <prvInsertBlockIntoFreeList+0x150>
   14294:	e5932000 	ldr	r2, [r3]
   14298:	e51b3010 	ldr	r3, [fp, #-16]
   1429c:	e5832000 	str	r2, [r3]
   142a0:	ea000003 	b	142b4 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   142a4:	e51b3008 	ldr	r3, [fp, #-8]
   142a8:	e5932000 	ldr	r2, [r3]
   142ac:	e51b3010 	ldr	r3, [fp, #-16]
   142b0:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   142b4:	e51b2008 	ldr	r2, [fp, #-8]
   142b8:	e51b3010 	ldr	r3, [fp, #-16]
   142bc:	e1520003 	cmp	r2, r3
   142c0:	0a000002 	beq	142d0 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   142c4:	e51b3008 	ldr	r3, [fp, #-8]
   142c8:	e51b2010 	ldr	r2, [fp, #-16]
   142cc:	e5832000 	str	r2, [r3]
	}
}
   142d0:	e320f000 	nop	{0}
   142d4:	e28bd000 	add	sp, fp, #0
   142d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142dc:	e12fff1e 	bx	lr
   142e0:	00015b40 	andeq	r5, r1, r0, asr #22
   142e4:	00015b48 	andeq	r5, r1, r8, asr #22

000142e8 <undefined_instruction>:
   142e8:	eafffffe 	b	142e8 <undefined_instruction>

000142ec <prefetch_abort>:
   142ec:	eafffffe 	b	142ec <prefetch_abort>

000142f0 <data_abort>:
   142f0:	eafffffe 	b	142f0 <data_abort>

000142f4 <unused>:
   142f4:	eafffffe 	b	142f4 <unused>

000142f8 <fiq>:
   142f8:	eafffffe 	b	142f8 <fiq>

000142fc <hang>:
   142fc:	eafffffe 	b	142fc <hang>

00014300 <task1>:
#include <task.h>

#include "Drivers/irq.h"
#include "Drivers/gpio.h"

void task1(void *pParam) {
   14300:	e92d4800 	push	{fp, lr}
   14304:	e28db004 	add	fp, sp, #4
   14308:	e24dd010 	sub	sp, sp, #16
   1430c:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14310:	e3a03000 	mov	r3, #0
   14314:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14318:	e51b3008 	ldr	r3, [fp, #-8]
   1431c:	e2833001 	add	r3, r3, #1
   14320:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(16, 1);
   14324:	e3a01001 	mov	r1, #1
   14328:	e3a00010 	mov	r0, #16
   1432c:	ebfffd90 	bl	13974 <SetGpio>
		vTaskDelay(200);
   14330:	e3a000c8 	mov	r0, #200	; 0xc8
   14334:	ebfff730 	bl	11ffc <vTaskDelay>
		i++;
   14338:	eafffff6 	b	14318 <task1+0x18>

0001433c <task2>:
	}
}

void task2(void *pParam) {
   1433c:	e92d4800 	push	{fp, lr}
   14340:	e28db004 	add	fp, sp, #4
   14344:	e24dd010 	sub	sp, sp, #16
   14348:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   1434c:	e3a03000 	mov	r3, #0
   14350:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14354:	e51b3008 	ldr	r3, [fp, #-8]
   14358:	e2833001 	add	r3, r3, #1
   1435c:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   14360:	e3a00064 	mov	r0, #100	; 0x64
   14364:	ebfff724 	bl	11ffc <vTaskDelay>
		SetGpio(16, 0);
   14368:	e3a01000 	mov	r1, #0
   1436c:	e3a00010 	mov	r0, #16
   14370:	ebfffd7f 	bl	13974 <SetGpio>
		vTaskDelay(100);
   14374:	e3a00064 	mov	r0, #100	; 0x64
   14378:	ebfff71f 	bl	11ffc <vTaskDelay>
		i++;
   1437c:	eafffff4 	b	14354 <task2+0x18>

00014380 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   14380:	e92d4800 	push	{fp, lr}
   14384:	e28db004 	add	fp, sp, #4
   14388:	e24dd010 	sub	sp, sp, #16
	SetGpioFunction(16, 1);			// RDY led
   1438c:	e3a01001 	mov	r1, #1
   14390:	e3a00010 	mov	r0, #16
   14394:	ebfffd32 	bl	13864 <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   14398:	e3a03000 	mov	r3, #0
   1439c:	e58d300c 	str	r3, [sp, #12]
   143a0:	e3a03000 	mov	r3, #0
   143a4:	e58d3008 	str	r3, [sp, #8]
   143a8:	e3a03000 	mov	r3, #0
   143ac:	e58d3004 	str	r3, [sp, #4]
   143b0:	e3a03000 	mov	r3, #0
   143b4:	e58d3000 	str	r3, [sp]
   143b8:	e3a03000 	mov	r3, #0
   143bc:	e3a02080 	mov	r2, #128	; 0x80
   143c0:	e59f1040 	ldr	r1, [pc, #64]	; 14408 <main+0x88>
   143c4:	e59f0040 	ldr	r0, [pc, #64]	; 1440c <main+0x8c>
   143c8:	ebfff5f4 	bl	11ba0 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   143cc:	e3a03000 	mov	r3, #0
   143d0:	e58d300c 	str	r3, [sp, #12]
   143d4:	e3a03000 	mov	r3, #0
   143d8:	e58d3008 	str	r3, [sp, #8]
   143dc:	e3a03000 	mov	r3, #0
   143e0:	e58d3004 	str	r3, [sp, #4]
   143e4:	e3a03000 	mov	r3, #0
   143e8:	e58d3000 	str	r3, [sp]
   143ec:	e3a03000 	mov	r3, #0
   143f0:	e3a02080 	mov	r2, #128	; 0x80
   143f4:	e59f1014 	ldr	r1, [pc, #20]	; 14410 <main+0x90>
   143f8:	e59f0014 	ldr	r0, [pc, #20]	; 14414 <main+0x94>
   143fc:	ebfff5e7 	bl	11ba0 <xTaskGenericCreate>

	vTaskStartScheduler();
   14400:	ebfff883 	bl	12614 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   14404:	eafffffe 	b	14404 <main+0x84>
   14408:	00014750 	andeq	r4, r1, r0, asr r7
   1440c:	00014300 	andeq	r4, r1, r0, lsl #6
   14410:	00014758 	andeq	r4, r1, r8, asr r7
   14414:	0001433c 	andeq	r4, r1, ip, lsr r3

00014418 <memcpy>:
   14418:	e352000f 	cmp	r2, #15
   1441c:	9a000035 	bls	144f8 <memcpy+0xe0>
   14420:	e1803001 	orr	r3, r0, r1
   14424:	e3130003 	tst	r3, #3
   14428:	1a00003e 	bne	14528 <memcpy+0x110>
   1442c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14430:	e2428010 	sub	r8, r2, #16
   14434:	e1a08228 	lsr	r8, r8, #4
   14438:	e2817020 	add	r7, r1, #32
   1443c:	e0877208 	add	r7, r7, r8, lsl #4
   14440:	e2813010 	add	r3, r1, #16
   14444:	e280c010 	add	ip, r0, #16
   14448:	e5136010 	ldr	r6, [r3, #-16]
   1444c:	e513500c 	ldr	r5, [r3, #-12]
   14450:	e9134010 	ldmdb	r3, {r4, lr}
   14454:	e2833010 	add	r3, r3, #16
   14458:	e1530007 	cmp	r3, r7
   1445c:	e50c6010 	str	r6, [ip, #-16]
   14460:	e50c500c 	str	r5, [ip, #-12]
   14464:	e90c4010 	stmdb	ip, {r4, lr}
   14468:	e28cc010 	add	ip, ip, #16
   1446c:	1afffff5 	bne	14448 <memcpy+0x30>
   14470:	e288c001 	add	ip, r8, #1
   14474:	e1a0c20c 	lsl	ip, ip, #4
   14478:	e312000c 	tst	r2, #12
   1447c:	e202e00f 	and	lr, r2, #15
   14480:	e081100c 	add	r1, r1, ip
   14484:	01a0200e 	moveq	r2, lr
   14488:	e080c00c 	add	ip, r0, ip
   1448c:	0a00000d 	beq	144c8 <memcpy+0xb0>
   14490:	e1a04001 	mov	r4, r1
   14494:	e24ee004 	sub	lr, lr, #4
   14498:	e1a0e12e 	lsr	lr, lr, #2
   1449c:	e08c610e 	add	r6, ip, lr, lsl #2
   144a0:	e24c3004 	sub	r3, ip, #4
   144a4:	e4945004 	ldr	r5, [r4], #4
   144a8:	e5a35004 	str	r5, [r3, #4]!
   144ac:	e1530006 	cmp	r3, r6
   144b0:	1afffffb 	bne	144a4 <memcpy+0x8c>
   144b4:	e28ee001 	add	lr, lr, #1
   144b8:	e1a0e10e 	lsl	lr, lr, #2
   144bc:	e08cc00e 	add	ip, ip, lr
   144c0:	e081100e 	add	r1, r1, lr
   144c4:	e2022003 	and	r2, r2, #3
   144c8:	e3520000 	cmp	r2, #0
   144cc:	e2422001 	sub	r2, r2, #1
   144d0:	12822001 	addne	r2, r2, #1
   144d4:	10813002 	addne	r3, r1, r2
   144d8:	124c2001 	subne	r2, ip, #1
   144dc:	0a000003 	beq	144f0 <memcpy+0xd8>
   144e0:	e4d1c001 	ldrb	ip, [r1], #1
   144e4:	e1510003 	cmp	r1, r3
   144e8:	e5e2c001 	strb	ip, [r2, #1]!
   144ec:	1afffffb 	bne	144e0 <memcpy+0xc8>
   144f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   144f4:	e12fff1e 	bx	lr
   144f8:	e3520000 	cmp	r2, #0
   144fc:	e1a0c000 	mov	ip, r0
   14500:	e2422001 	sub	r2, r2, #1
   14504:	012fff1e 	bxeq	lr
   14508:	e2822001 	add	r2, r2, #1
   1450c:	e0813002 	add	r3, r1, r2
   14510:	e24c2001 	sub	r2, ip, #1
   14514:	e4d1c001 	ldrb	ip, [r1], #1
   14518:	e1510003 	cmp	r1, r3
   1451c:	e5e2c001 	strb	ip, [r2, #1]!
   14520:	1afffffb 	bne	14514 <memcpy+0xfc>
   14524:	e12fff1e 	bx	lr
   14528:	e2422001 	sub	r2, r2, #1
   1452c:	e1a0c000 	mov	ip, r0
   14530:	eafffff4 	b	14508 <memcpy+0xf0>

00014534 <memset>:
   14534:	e3100003 	tst	r0, #3
   14538:	0a00003f 	beq	1463c <memset+0x108>
   1453c:	e3520000 	cmp	r2, #0
   14540:	e2422001 	sub	r2, r2, #1
   14544:	012fff1e 	bxeq	lr
   14548:	e201c0ff 	and	ip, r1, #255	; 0xff
   1454c:	e1a03000 	mov	r3, r0
   14550:	ea000002 	b	14560 <memset+0x2c>
   14554:	e2422001 	sub	r2, r2, #1
   14558:	e3720001 	cmn	r2, #1
   1455c:	012fff1e 	bxeq	lr
   14560:	e4c3c001 	strb	ip, [r3], #1
   14564:	e3130003 	tst	r3, #3
   14568:	1afffff9 	bne	14554 <memset+0x20>
   1456c:	e3520003 	cmp	r2, #3
   14570:	9a000027 	bls	14614 <memset+0xe0>
   14574:	e92d4030 	push	{r4, r5, lr}
   14578:	e201e0ff 	and	lr, r1, #255	; 0xff
   1457c:	e18ee40e 	orr	lr, lr, lr, lsl #8
   14580:	e352000f 	cmp	r2, #15
   14584:	e18ee80e 	orr	lr, lr, lr, lsl #16
   14588:	9a00002d 	bls	14644 <memset+0x110>
   1458c:	e2424010 	sub	r4, r2, #16
   14590:	e1a04224 	lsr	r4, r4, #4
   14594:	e2835020 	add	r5, r3, #32
   14598:	e0855204 	add	r5, r5, r4, lsl #4
   1459c:	e283c010 	add	ip, r3, #16
   145a0:	e50ce010 	str	lr, [ip, #-16]
   145a4:	e50ce00c 	str	lr, [ip, #-12]
   145a8:	e50ce008 	str	lr, [ip, #-8]
   145ac:	e50ce004 	str	lr, [ip, #-4]
   145b0:	e28cc010 	add	ip, ip, #16
   145b4:	e15c0005 	cmp	ip, r5
   145b8:	1afffff8 	bne	145a0 <memset+0x6c>
   145bc:	e284c001 	add	ip, r4, #1
   145c0:	e312000c 	tst	r2, #12
   145c4:	e083c20c 	add	ip, r3, ip, lsl #4
   145c8:	e202200f 	and	r2, r2, #15
   145cc:	0a000018 	beq	14634 <memset+0x100>
   145d0:	e2423004 	sub	r3, r2, #4
   145d4:	e3c33003 	bic	r3, r3, #3
   145d8:	e2833004 	add	r3, r3, #4
   145dc:	e08c3003 	add	r3, ip, r3
   145e0:	e48ce004 	str	lr, [ip], #4
   145e4:	e153000c 	cmp	r3, ip
   145e8:	1afffffc 	bne	145e0 <memset+0xac>
   145ec:	e2022003 	and	r2, r2, #3
   145f0:	e3520000 	cmp	r2, #0
   145f4:	0a000004 	beq	1460c <memset+0xd8>
   145f8:	e20110ff 	and	r1, r1, #255	; 0xff
   145fc:	e0832002 	add	r2, r3, r2
   14600:	e4c31001 	strb	r1, [r3], #1
   14604:	e1520003 	cmp	r2, r3
   14608:	1afffffc 	bne	14600 <memset+0xcc>
   1460c:	e8bd4030 	pop	{r4, r5, lr}
   14610:	e12fff1e 	bx	lr
   14614:	e3520000 	cmp	r2, #0
   14618:	012fff1e 	bxeq	lr
   1461c:	e20110ff 	and	r1, r1, #255	; 0xff
   14620:	e0832002 	add	r2, r3, r2
   14624:	e4c31001 	strb	r1, [r3], #1
   14628:	e1520003 	cmp	r2, r3
   1462c:	1afffffc 	bne	14624 <memset+0xf0>
   14630:	e12fff1e 	bx	lr
   14634:	e1a0300c 	mov	r3, ip
   14638:	eaffffec 	b	145f0 <memset+0xbc>
   1463c:	e1a03000 	mov	r3, r0
   14640:	eaffffc9 	b	1456c <memset+0x38>
   14644:	e1a0c003 	mov	ip, r3
   14648:	eaffffe0 	b	145d0 <memset+0x9c>

0001464c <strncpy>:
   1464c:	e1803001 	orr	r3, r0, r1
   14650:	e3520003 	cmp	r2, #3
   14654:	e2033003 	and	r3, r3, #3
   14658:	93a0c000 	movls	ip, #0
   1465c:	83a0c001 	movhi	ip, #1
   14660:	e3530000 	cmp	r3, #0
   14664:	13a0c000 	movne	ip, #0
   14668:	e35c0000 	cmp	ip, #0
   1466c:	e92d4070 	push	{r4, r5, r6, lr}
   14670:	01a04000 	moveq	r4, r0
   14674:	1a00001c 	bne	146ec <strncpy+0xa0>
   14678:	e3520000 	cmp	r2, #0
   1467c:	0a00000f 	beq	146c0 <strncpy+0x74>
   14680:	e1a03004 	mov	r3, r4
   14684:	e5d1c000 	ldrb	ip, [r1]
   14688:	e35c0000 	cmp	ip, #0
   1468c:	e4c3c001 	strb	ip, [r3], #1
   14690:	e242e001 	sub	lr, r2, #1
   14694:	0a00000b 	beq	146c8 <strncpy+0x7c>
   14698:	e0842002 	add	r2, r4, r2
   1469c:	e084400e 	add	r4, r4, lr
   146a0:	ea000004 	b	146b8 <strncpy+0x6c>
   146a4:	e5f1c001 	ldrb	ip, [r1, #1]!
   146a8:	e35c0000 	cmp	ip, #0
   146ac:	e044e003 	sub	lr, r4, r3
   146b0:	e4c3c001 	strb	ip, [r3], #1
   146b4:	0a000003 	beq	146c8 <strncpy+0x7c>
   146b8:	e1520003 	cmp	r2, r3
   146bc:	1afffff8 	bne	146a4 <strncpy+0x58>
   146c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   146c4:	e12fff1e 	bx	lr
   146c8:	e35e0000 	cmp	lr, #0
   146cc:	13a02000 	movne	r2, #0
   146d0:	1083e00e 	addne	lr, r3, lr
   146d4:	0afffff9 	beq	146c0 <strncpy+0x74>
   146d8:	e4c32001 	strb	r2, [r3], #1
   146dc:	e153000e 	cmp	r3, lr
   146e0:	1afffffc 	bne	146d8 <strncpy+0x8c>
   146e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   146e8:	e12fff1e 	bx	lr
   146ec:	e1a03001 	mov	r3, r1
   146f0:	e1a04000 	mov	r4, r0
   146f4:	e59f6030 	ldr	r6, [pc, #48]	; 1472c <strncpy+0xe0>
   146f8:	e59f5030 	ldr	r5, [pc, #48]	; 14730 <strncpy+0xe4>
   146fc:	e1a01003 	mov	r1, r3
   14700:	e493e004 	ldr	lr, [r3], #4
   14704:	e08ec006 	add	ip, lr, r6
   14708:	e1ccc00e 	bic	ip, ip, lr
   1470c:	e11c0005 	tst	ip, r5
   14710:	1affffda 	bne	14680 <strncpy+0x34>
   14714:	e2422004 	sub	r2, r2, #4
   14718:	e3520003 	cmp	r2, #3
   1471c:	e484e004 	str	lr, [r4], #4
   14720:	e1a01003 	mov	r1, r3
   14724:	8afffff4 	bhi	146fc <strncpy+0xb0>
   14728:	eaffffd2 	b	14678 <strncpy+0x2c>
   1472c:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   14730:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .rodata:

00014734 <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   14734:	2000b400 	andcs	fp, r0, r0, lsl #8
   14738:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   1473c:	00000000 	andeq	r0, r0, r0

00014740 <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   14740:	2000b200 	andcs	fp, r0, r0, lsl #4

00014744 <pRegs>:
volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);
   14744:	20200000 	eorcs	r0, r0, r0

00014748 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   14748:	00000010 	andeq	r0, r0, r0, lsl r0

0001474c <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   1474c:	00001000 	andeq	r1, r0, r0
   14750:	5f44454c 	svcpl	0x0044454c
   14754:	00000030 	andeq	r0, r0, r0, lsr r0
   14758:	5f44454c 	svcpl	0x0044454c
   1475c:	Address 0x0001475c is out of bounds.


Disassembly of section .data:

00014760 <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   14760:	0000270f 	andeq	r2, r0, pc, lsl #14

00014764 <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   14764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00014768 <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   14768:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

00014770 <g_bStarted>:
   14770:	00000000 	andeq	r0, r0, r0

00014774 <pxReadyCoRoutineLists>:
	...

0001479c <xDelayedCoRoutineList1>:
	...

000147b0 <xDelayedCoRoutineList2>:
	...

000147c4 <pxDelayedCoRoutineList>:
static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently being used. */
   147c4:	00000000 	andeq	r0, r0, r0

000147c8 <pxOverflowDelayedCoRoutineList>:
static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. */
   147c8:	00000000 	andeq	r0, r0, r0

000147cc <xPendingReadyCoRoutineList>:
	...

000147e0 <pxCurrentCoRoutine>:
corCRCB * pxCurrentCoRoutine = NULL;
   147e0:	00000000 	andeq	r0, r0, r0

000147e4 <uxTopCoRoutineReadyPriority>:
static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
   147e4:	00000000 	andeq	r0, r0, r0

000147e8 <xCoRoutineTickCount>:
static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
   147e8:	00000000 	andeq	r0, r0, r0

000147ec <xLastTickCount>:
   147ec:	00000000 	andeq	r0, r0, r0

000147f0 <xPassedTicks>:
   147f0:	00000000 	andeq	r0, r0, r0

000147f4 <pxCurrentTCB>:
PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
   147f4:	00000000 	andeq	r0, r0, r0

000147f8 <pxReadyTasksLists>:
	...

0001485c <xDelayedTaskList1>:
	...

00014870 <xDelayedTaskList2>:
	...

00014884 <pxDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list currently being used. */
   14884:	00000000 	andeq	r0, r0, r0

00014888 <pxOverflowDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
   14888:	00000000 	andeq	r0, r0, r0

0001488c <xPendingReadyList>:
	...

000148a0 <xTasksWaitingTermination>:
	...

000148b4 <uxTasksDeleted>:
	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0U;
   148b4:	00000000 	andeq	r0, r0, r0

000148b8 <xSuspendedTaskList>:
	...

000148cc <uxCurrentNumberOfTasks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBASE_TYPE ) 0U;
   148cc:	00000000 	andeq	r0, r0, r0

000148d0 <xTickCount>:
PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
   148d0:	00000000 	andeq	r0, r0, r0

000148d4 <uxTopUsedPriority>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
   148d4:	00000000 	andeq	r0, r0, r0

000148d8 <uxTopReadyPriority>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
   148d8:	00000000 	andeq	r0, r0, r0

000148dc <xSchedulerRunning>:
PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
   148dc:	00000000 	andeq	r0, r0, r0

000148e0 <uxSchedulerSuspended>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE_TYPE ) pdFALSE;
   148e0:	00000000 	andeq	r0, r0, r0

000148e4 <uxMissedTicks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE ) 0U;
   148e4:	00000000 	andeq	r0, r0, r0

000148e8 <xMissedYield>:
PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
   148e8:	00000000 	andeq	r0, r0, r0

000148ec <xNumOfOverflows>:
PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
   148ec:	00000000 	andeq	r0, r0, r0

000148f0 <uxTaskNumber>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
   148f0:	00000000 	andeq	r0, r0, r0

000148f4 <g_VectorTable>:
	...

00014b34 <enabled>:
	...

00014b40 <xHeap>:
	...

00015b40 <xStart>:
	...

00015b48 <pxEnd>:
static xBlockLink xStart, *pxEnd = NULL;
   15b48:	00000000 	andeq	r0, r0, r0

00015b4c <allocated>:
size_t allocated = 0;
   15b4c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000212 	andeq	r0, r0, r2, lsl r2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000078 	andeq	r0, r0, r8, ror r0
      10:	00014d0c 	andeq	r4, r1, ip, lsl #26
      14:	0000f800 	andeq	pc, r0, r0, lsl #16
      18:	01000000 	mrseq	r0, (UNDEF: 0)
      1c:	00034400 	andeq	r4, r3, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	6a070403 	bvs	1c1040 <__bss_end+0x1ab4f0>
      30:	03000006 	movweq	r0, #6
      34:	011f0508 	tsteq	pc, r8, lsl #10
      38:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      3c:	00019b04 	andeq	r9, r1, r4, lsl #22
      40:	006c0400 	rsbeq	r0, ip, r0, lsl #8
      44:	47020000 	strmi	r0, [r2, -r0]
      48:	00004d10 	andeq	r4, r0, r0, lsl sp
      4c:	53040500 	movwpl	r0, #17664	; 0x4500
      50:	06000000 	streq	r0, [r0], -r0
      54:	0000005e 	andeq	r0, r0, lr, asr r0
      58:	00005e07 	andeq	r5, r0, r7, lsl #28
      5c:	04080000 	streq	r0, [r8], #-0
      60:	00000c04 	andeq	r0, r0, r4, lsl #24
      64:	1c610300 	stclne	3, cr0, [r1], #-0
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	65070403 	strvs	r0, [r7, #-1027]	; 0xfffffbfd
      70:	03000006 	movweq	r0, #6
      74:	01240504 			; <UNDEFINED> instruction: 0x01240504
      78:	01030000 	mrseq	r0, (UNDEF: 3)
      7c:	0008a606 	andeq	sl, r8, r6, lsl #12
      80:	07020300 	streq	r0, [r2, -r0, lsl #6]
      84:	00000059 	andeq	r0, r0, r9, asr r0
      88:	006c0405 	rsbeq	r0, ip, r5, lsl #8
      8c:	45090000 	strmi	r0, [r9, #-0]
      90:	24000000 	strcs	r0, [r0], #-0
      94:	11105601 	tstne	r0, r1, lsl #12
      98:	0a000001 	beq	a4 <_start-0x7f5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	6c105701 	ldcvs	7, cr5, [r0], {1}
      a4:	00000000 	andeq	r0, r0, r0
      a8:	4c41560a 	mcrrmi	6, 0, r5, r1, cr10
      ac:	10580100 	subsne	r0, r8, r0, lsl #2
      b0:	0000006c 	andeq	r0, r0, ip, rrx
      b4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xfffff5fc
      b8:	5901004c 	stmdbpl	r1, {r2, r3, r6}
      bc:	00006c10 	andeq	r6, r0, r0, lsl ip
      c0:	430a0800 	movwmi	r0, #43008	; 0xa800
      c4:	0100494c 	tsteq	r0, ip, asr #18
      c8:	006c105a 	rsbeq	r1, ip, sl, asr r0
      cc:	0a0c0000 	beq	3000d4 <__bss_end+0x2ea584>
      d0:	00534952 	subseq	r4, r3, r2, asr r9
      d4:	6c105b01 			; <UNDEFINED> instruction: 0x6c105b01
      d8:	10000000 	andne	r0, r0, r0
      dc:	53494d0a 	movtpl	r4, #40202	; 0x9d0a
      e0:	105c0100 	subsne	r0, ip, r0, lsl #2
      e4:	0000006c 	andeq	r0, r0, ip, rrx
      e8:	4c520a14 	vmovmi	r0, r2, s8, s9
      ec:	5d010044 	stcpl	0, cr0, [r1, #-272]	; 0xfffffef0
      f0:	00006c10 	andeq	r6, r0, r0, lsl ip
      f4:	440a1800 	strmi	r1, [sl], #-2048	; 0xfffff800
      f8:	01005649 	tsteq	r0, r9, asr #12
      fc:	006c105e 	rsbeq	r1, ip, lr, asr r0
     100:	0a1c0000 	beq	700108 <__bss_end+0x6ea5b8>
     104:	00544e43 	subseq	r4, r4, r3, asr #28
     108:	6c105f01 	ldcvs	15, cr5, [r0], {1}
     10c:	20000000 	andcs	r0, r0, r0
     110:	00460400 	subeq	r0, r6, r0, lsl #8
     114:	60010000 	andvs	r0, r1, r0
     118:	00008e03 	andeq	r8, r0, r3, lsl #28
     11c:	01110b00 	tsteq	r1, r0, lsl #22
     120:	3a0c0000 	bcc	300128 <__bss_end+0x2ea5d8>
     124:	01000001 	tsteq	r0, r1
     128:	013a2c62 	teqeq	sl, r2, ror #24
     12c:	03050000 	movweq	r0, #20480	; 0x5000
     130:	00014734 	andeq	r4, r1, r4, lsr r7
     134:	011d0405 	tsteq	sp, r5, lsl #8
     138:	340d0000 	strcc	r0, [sp], #-0
     13c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     140:	00000019 	andeq	r0, r0, r9, lsl r0
     144:	ac0deb01 			; <UNDEFINED> instruction: 0xac0deb01
     148:	98000102 	stmdals	r0, {r1, r8}
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01d10c00 	bicseq	r0, r1, r0, lsl #24
     158:	ed010000 	stc	0, cr0, [r1, #-0]
     15c:	00006c10 	andeq	r6, r0, r0, lsl ip
     160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     164:	01160f00 	tsteq	r6, r0, lsl #30
     168:	dd010000 	stcle	0, cr0, [r1, #-0]
     16c:	01027406 	tsteq	r2, r6, lsl #8
     170:	00003800 	andeq	r3, r0, r0, lsl #16
     174:	9a9c0100 	bls	fe70057c <_estack+0xf66f057c>
     178:	10000001 	andne	r0, r0, r1
     17c:	00000000 	andeq	r0, r0, r0
     180:	2c1ddd01 	ldccs	13, cr13, [sp], {1}
     184:	02000000 	andeq	r0, r0, #0
     188:	30107491 	mulscc	r0, r1, r4
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	005e29dd 	ldrsbeq	r2, [lr], #-157	; 0xffffff63
     194:	91020000 	mrsls	r0, (UNDEF: 2)
     198:	e6110070 			; <UNDEFINED> instruction: 0xe6110070
     19c:	01000000 	mrseq	r0, (UNDEF: 0)
     1a0:	025c06d0 	subseq	r0, ip, #208, 12	; 0xd000000
     1a4:	00180001 	andseq	r0, r8, r1
     1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1ac:	0001a712 	andeq	sl, r1, r2, lsl r7
     1b0:	0fc20100 	svceq	0x00c20100
     1b4:	00000073 	andeq	r0, r0, r3, ror r0
     1b8:	00010240 	andeq	r0, r1, r0, asr #4
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c0:	bb139c01 	bllt	4e71cc <__bss_end+0x4d167c>
     1c4:	01000001 	tsteq	r0, r1
     1c8:	00881177 	addeq	r1, r8, r7, ror r1
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	02400001 	subeq	r0, r0, #1
     1d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1d8:	00014010 	andeq	r4, r1, r0, lsl r0
     1dc:	38770100 	ldmdacc	r7!, {r8}^
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1e8:	00000005 	andeq	r0, r0, r5
     1ec:	41527701 	cmpmi	r2, r1, lsl #14
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	2d106891 	ldccs	8, cr6, [r0, #-580]	; 0xfffffdbc
     1f8:	01000001 	tsteq	r0, r1
     1fc:	005e6077 	subseq	r6, lr, r7, ror r0
     200:	91020000 	mrsls	r0, (UNDEF: 2)
     204:	00370c64 	eorseq	r0, r7, r4, ror #24
     208:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
     20c:	00008811 	andeq	r8, r0, r1, lsl r8
     210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     214:	01980000 	orrseq	r0, r8, r0
     218:	00040000 	andeq	r0, r4, r0
     21c:	00000133 	andeq	r0, r0, r3, lsr r1
     220:	00780104 	rsbseq	r0, r8, r4, lsl #2
     224:	120c0000 	andne	r0, ip, #0
     228:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
     22c:	44000000 	strmi	r0, [r0], #-0
     230:	a4000103 	strge	r0, [r0], #-259	; 0xfffffefd
     234:	b4000002 	strlt	r0, [r0], #-2
     238:	02000001 	andeq	r0, r0, #1
     23c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     240:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     244:	00066a07 	andeq	r6, r6, r7, lsl #20
     248:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     24c:	0000011f 	andeq	r0, r0, pc, lsl r1
     250:	9b040803 	blls	102264 <__bss_end+0xec714>
     254:	03000001 	movweq	r0, #1
     258:	06650704 	strbteq	r0, [r5], -r4, lsl #14
     25c:	41040000 	mrsmi	r0, (UNDEF: 4)
     260:	03000000 	movweq	r0, #0
     264:	01240504 			; <UNDEFINED> instruction: 0x01240504
     268:	00050000 	andeq	r0, r5, r0
     26c:	01000002 	tsteq	r0, r2
     270:	00481865 	subeq	r1, r8, r5, ror #16
     274:	03050000 	movweq	r0, #20480	; 0x5000
     278:	00014760 	andeq	r4, r1, r0, ror #14
     27c:	0002ae05 	andeq	sl, r2, r5, lsl #28
     280:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
     284:	00000025 	andeq	r0, r0, r5, lsr #32
     288:	47700305 	ldrbmi	r0, [r0, -r5, lsl #6]!
     28c:	63060001 	movwvs	r0, #24577	; 0x6001
     290:	01000002 	tsteq	r0, r2
     294:	058406fe 	streq	r0, [r4, #1790]	; 0x6fe
     298:	00640001 	rsbeq	r0, r4, r1
     29c:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a0:	0001e006 	andeq	lr, r1, r6
     2a4:	06ee0100 	strbteq	r0, [lr], r0, lsl #2
     2a8:	00010540 	andeq	r0, r1, r0, asr #10
     2ac:	00000044 	andeq	r0, r0, r4, asr #32
     2b0:	a0079c01 	andge	r9, r7, r1, lsl #24
     2b4:	01000002 	tsteq	r0, r2
     2b8:	049006c1 	ldreq	r0, [r0], #1729	; 0x6c1
     2bc:	00b00001 	adcseq	r0, r0, r1
     2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2c4:	000000fb 	strdeq	r0, [r0], -fp
     2c8:	01049008 	tsteq	r4, r8
     2cc:	00005800 	andeq	r5, r0, r0, lsl #16
     2d0:	0000d800 	andeq	sp, r0, r0, lsl #16
     2d4:	01f30900 	mvnseq	r0, r0, lsl #18
     2d8:	c2010000 	andgt	r0, r1, #0
     2dc:	00010102 	andeq	r0, r1, r2, lsl #2
     2e0:	02000900 	andeq	r0, r0, #0, 18
     2e4:	c2010000 	andgt	r0, r1, #0
     2e8:	00004802 	andeq	r4, r0, r2, lsl #16
     2ec:	ec0a0000 	stc	0, cr0, [sl], {-0}
     2f0:	48000104 	stmdami	r0, {r2, r8}
     2f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2f8:	000001f3 	strdeq	r0, [r0], -r3
     2fc:	0102c401 	tsteq	r2, r1, lsl #8
     300:	09000001 	stmdbeq	r0, {r0}
     304:	00000200 	andeq	r0, r0, r0, lsl #4
     308:	4802c401 	stmdami	r2, {r0, sl, lr, pc}
     30c:	00000000 	andeq	r0, r0, r0
     310:	06040b00 	streq	r0, [r4], -r0, lsl #22
     314:	04000001 	streq	r0, [r0], #-1
     318:	000000fb 	strdeq	r0, [r0], -fp
     31c:	028c0d0c 	addeq	r0, ip, #12, 26	; 0x300
     320:	9c010000 	stcls	0, cr0, [r1], {-0}
     324:	0103dc06 	tsteq	r3, r6, lsl #24
     328:	0000b400 	andeq	fp, r0, r0, lsl #8
     32c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
     330:	08000001 	stmdaeq	r0, {r0}
     334:	000103e0 	andeq	r0, r1, r0, ror #7
     338:	00000058 	andeq	r0, r0, r8, asr r0
     33c:	00000143 	andeq	r0, r0, r3, asr #2
     340:	0001f309 	andeq	pc, r1, r9, lsl #6
     344:	02a40100 	adceq	r0, r4, #0, 2
     348:	00000101 	andeq	r0, r0, r1, lsl #2
     34c:	00020009 	andeq	r0, r2, r9
     350:	02a40100 	adceq	r0, r4, #0, 2
     354:	00000048 	andeq	r0, r0, r8, asr #32
     358:	043c0a00 	ldrteq	r0, [ip], #-2560	; 0xfffff600
     35c:	00480001 	subeq	r0, r8, r1
     360:	f3090000 	vhadd.u8	d0, d9, d0
     364:	01000001 	tsteq	r0, r1
     368:	010102aa 	smlatbeq	r1, sl, r2, r0
     36c:	00090000 	andeq	r0, r9, r0
     370:	01000002 	tsteq	r0, r2
     374:	004802aa 	subeq	r0, r8, sl, lsr #5
     378:	00000000 	andeq	r0, r0, r0
     37c:	0002750e 	andeq	r7, r2, lr, lsl #10
     380:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
     384:	00010344 	andeq	r0, r1, r4, asr #6
     388:	00000098 	muleq	r0, r8, r0
     38c:	6c0a9c01 	stcvs	12, cr9, [sl], {1}
     390:	48000103 	stmdami	r0, {r0, r1, r8}
     394:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     398:	000001f3 	strdeq	r0, [r0], -r3
     39c:	01028801 	tsteq	r2, r1, lsl #16
     3a0:	09000001 	stmdbeq	r0, {r0}
     3a4:	00000200 	andeq	r0, r0, r0, lsl #4
     3a8:	48028801 	stmdami	r2, {r0, fp, pc}
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	04ab0000 	strteq	r0, [fp], #0
     3b4:	00040000 	andeq	r0, r4, r0
     3b8:	00000218 	andeq	r0, r0, r8, lsl r2
     3bc:	00780104 	rsbseq	r0, r8, r4, lsl #2
     3c0:	350c0000 	strcc	r0, [ip, #-0]
     3c4:	f8000005 			; <UNDEFINED> instruction: 0xf8000005
     3c8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     3cc:	64000105 	strvs	r0, [r0], #-261	; 0xfffffefb
     3d0:	8b000007 	blhi	3f4 <_start-0x7c0c>
     3d4:	02000002 	andeq	r0, r0, #2
     3d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3dc:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3e0:	00066a07 	andeq	r6, r6, r7, lsl #20
     3e4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3e8:	0000011f 	andeq	r0, r0, pc, lsl r1
     3ec:	9b040803 	blls	102400 <__bss_end+0xec8b0>
     3f0:	04000001 	streq	r0, [r0], #-1
     3f4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3f8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3fc:	00004f1c 	andeq	r4, r0, ip, lsl pc
     400:	07040300 	streq	r0, [r4, -r0, lsl #6]
     404:	00000665 	andeq	r0, r0, r5, ror #12
     408:	00004f06 	andeq	r4, r0, r6, lsl #30
     40c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     410:	00000124 	andeq	r0, r0, r4, lsr #2
     414:	00036d07 	andeq	r6, r3, r7, lsl #26
     418:	69021400 	stmdbvs	r2, {sl, ip}
     41c:	0000b108 	andeq	fp, r0, r8, lsl #2
     420:	03200800 	nopeq	{0}	; <UNPREDICTABLE>
     424:	6b020000 	blvs	8042c <__bss_end+0x6a8dc>
     428:	0000430f 	andeq	r4, r0, pc, lsl #6
     42c:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
     430:	02000004 	andeq	r0, r0, #4
     434:	00b61f6c 	adcseq	r1, r6, ip, ror #30
     438:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     43c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     440:	b61f6d02 	ldrlt	r6, [pc], -r2, lsl #26
     444:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     448:	00034208 	andeq	r4, r3, r8, lsl #4
     44c:	096e0200 	stmdbeq	lr!, {r9}^
     450:	00000041 	andeq	r0, r0, r1, asr #32
     454:	02eb080c 	rsceq	r0, fp, #12, 16	; 0xc0000
     458:	6f020000 	svcvs	0x00020000
     45c:	00004109 	andeq	r4, r0, r9, lsl #2
     460:	06001000 	streq	r1, [r0], -r0
     464:	00000062 	andeq	r0, r0, r2, rrx
     468:	00b10409 	adcseq	r0, r1, r9, lsl #8
     46c:	f8050000 			; <UNDEFINED> instruction: 0xf8050000
     470:	02000004 	andeq	r0, r0, #4
     474:	00621b71 	rsbeq	r1, r2, r1, ror fp
     478:	bc060000 	stclt	0, cr0, [r6], {-0}
     47c:	07000000 	streq	r0, [r0, -r0]
     480:	0000056e 	andeq	r0, r0, lr, ror #10
     484:	0873020c 	ldmdaeq	r3!, {r2, r3, r9}^
     488:	00000102 	andeq	r0, r0, r2, lsl #2
     48c:	00032008 	andeq	r2, r3, r8
     490:	0f750200 	svceq	0x00750200
     494:	00000043 	andeq	r0, r0, r3, asr #32
     498:	04d90800 	ldrbeq	r0, [r9], #2048	; 0x800
     49c:	76020000 	strvc	r0, [r2], -r0
     4a0:	0000b61e 	andeq	fp, r0, lr, lsl r6
     4a4:	f0080400 			; <UNDEFINED> instruction: 0xf0080400
     4a8:	02000003 	andeq	r0, r0, #3
     4ac:	00b61e77 	adcseq	r1, r6, r7, ror lr
     4b0:	00080000 	andeq	r0, r8, r0
     4b4:	00046005 	andeq	r6, r4, r5
     4b8:	20790200 	rsbscs	r0, r9, r0, lsl #4
     4bc:	000000cd 	andeq	r0, r0, sp, asr #1
     4c0:	00010206 	andeq	r0, r1, r6, lsl #4
     4c4:	057e0700 	ldrbeq	r0, [lr, #-1792]!	; 0xfffff900
     4c8:	02140000 	andseq	r0, r4, #0
     4cc:	0148107e 	hvceq	33038	; 0x810e
     4d0:	7f080000 	svcvc	0x00080000
     4d4:	02000004 	andeq	r0, r0, #4
     4d8:	00562280 	subseq	r2, r6, r0, lsl #5
     4dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4e0:	00000318 	andeq	r0, r0, r8, lsl r3
     4e4:	48178102 	ldmdami	r7, {r1, r8, pc}
     4e8:	04000001 	streq	r0, [r0], #-1
     4ec:	00033908 	andeq	r3, r3, r8, lsl #18
     4f0:	19820200 	stmibne	r2, {r9}
     4f4:	0000010e 	andeq	r0, r0, lr, lsl #2
     4f8:	04090008 	streq	r0, [r9], #-8
     4fc:	000000c8 	andeq	r0, r0, r8, asr #1
     500:	0009b205 	andeq	fp, r9, r5, lsl #4
     504:	03830200 	orreq	r0, r3, #0, 4
     508:	00000113 	andeq	r0, r0, r3, lsl r1
     50c:	00014e0a 	andeq	r4, r1, sl, lsl #28
     510:	06010300 	streq	r0, [r1], -r0, lsl #6
     514:	000008a6 	andeq	r0, r0, r6, lsr #17
     518:	59070203 	stmdbpl	r7, {r0, r1, r9}
     51c:	05000000 	streq	r0, [r0, #-0]
     520:	000004ad 	andeq	r0, r0, sp, lsr #9
     524:	41105304 	tstmi	r0, r4, lsl #6
     528:	05000000 	streq	r0, [r0, #-0]
     52c:	00000604 	andeq	r0, r0, r4, lsl #12
     530:	85105604 	ldrhi	r5, [r0, #-1540]	; 0xfffff9fc
     534:	09000001 	stmdbeq	r0, {r0}
     538:	00018b04 	andeq	r8, r1, r4, lsl #22
     53c:	019b0b00 	orrseq	r0, fp, r0, lsl #22
     540:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
     544:	0c000001 	stceq	0, cr0, [r0], {1}
     548:	0000004f 	andeq	r0, r0, pc, asr #32
     54c:	040b0700 	streq	r0, [fp], #-1792	; 0xfffff900
     550:	04380000 	ldrteq	r0, [r8], #-0
     554:	01f71058 	mvnseq	r1, r8, asr r0
     558:	f7080000 			; <UNDEFINED> instruction: 0xf7080000
     55c:	04000002 	streq	r0, [r0], #-2
     560:	0179155a 	cmneq	r9, sl, asr r5
     564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     568:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     56c:	bc0f5b04 			; <UNDEFINED> instruction: 0xbc0f5b04
     570:	04000000 	streq	r0, [r0], #-0
     574:	0005e108 	andeq	lr, r5, r8, lsl #2
     578:	0f5c0400 	svceq	0x005c0400
     57c:	000000bc 	strheq	r0, [r0], -ip
     580:	04a20818 	strteq	r0, [r2], #2072	; 0x818
     584:	5d040000 	stcpl	0, cr0, [r4, #-0]
     588:	00004f1a 	andeq	r4, r0, sl, lsl pc
     58c:	58082c00 	stmdapl	r8, {sl, fp, sp}
     590:	04000004 	streq	r0, [r0], #-4
     594:	004f1a5e 	subeq	r1, pc, lr, asr sl	; <UNPREDICTABLE>
     598:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
     59c:	0000052d 	andeq	r0, r0, sp, lsr #10
     5a0:	66135f04 	ldrvs	r5, [r3], -r4, lsl #30
     5a4:	34000001 	strcc	r0, [r0], #-1
     5a8:	03e10500 	mvneq	r0, #0, 10
     5ac:	60040000 	andvs	r0, r4, r0
     5b0:	00019b03 	andeq	r9, r1, r3, lsl #22
     5b4:	014e0d00 	cmpeq	lr, r0, lsl #26
     5b8:	02130000 	andseq	r0, r3, #0
     5bc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
     5c4:	04420f00 	strbeq	r0, [r2], #-3840	; 0xfffff100
     5c8:	51010000 	mrspl	r0, (UNDEF: 1)
     5cc:	0002030e 	andeq	r0, r2, lr, lsl #6
     5d0:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     5d4:	0f000147 	svceq	0x00000147
     5d8:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
     5dc:	4e0e5201 	cdpmi	2, 0, cr5, cr14, cr1, {0}
     5e0:	05000001 	streq	r0, [r0, #-1]
     5e4:	01479c03 	cmpeq	r7, r3, lsl #24
     5e8:	03ca0f00 	biceq	r0, sl, #0, 30
     5ec:	53010000 	movwpl	r0, #4096	; 0x1000
     5f0:	00014e0e 	andeq	r4, r1, lr, lsl #28
     5f4:	b0030500 	andlt	r0, r3, r0, lsl #10
     5f8:	0f000147 	svceq	0x00000147
     5fc:	00000584 	andeq	r0, r0, r4, lsl #11
     600:	5b105401 	blpl	41560c <__bss_end+0x3ffabc>
     604:	05000002 	streq	r0, [r0, #-2]
     608:	0147c403 	cmpeq	r7, r3, lsl #8
     60c:	4e040900 	vmlami.f16	s0, s8, s0	; <UNPREDICTABLE>
     610:	0a000001 	beq	61c <_start-0x79e4>
     614:	0000025b 	andeq	r0, r0, fp, asr r2
     618:	0003780f 	andeq	r7, r3, pc, lsl #16
     61c:	10550100 	subsne	r0, r5, r0, lsl #2
     620:	0000025b 	andeq	r0, r0, fp, asr r2
     624:	47c80305 	strbmi	r0, [r8, r5, lsl #6]
     628:	be0f0001 	cdplt	0, 0, cr0, cr15, cr1, {0}
     62c:	01000004 	tsteq	r0, r4
     630:	014e0e56 	cmpeq	lr, r6, asr lr
     634:	03050000 	movweq	r0, #20480	; 0x5000
     638:	000147cc 	andeq	r4, r1, ip, asr #15
     63c:	00048f10 	andeq	r8, r4, r0, lsl pc
     640:	0b590100 	bleq	1640a48 <__bss_end+0x162aef8>
     644:	0000029c 	muleq	r0, ip, r2
     648:	47e00305 	strbmi	r0, [r0, r5, lsl #6]!
     64c:	04090001 	streq	r0, [r9], #-1
     650:	000001f7 	strdeq	r0, [r0], -r7
     654:	0003970f 	andeq	r9, r3, pc, lsl #14
     658:	1f5a0100 	svcne	0x005a0100
     65c:	0000004f 	andeq	r0, r0, pc, asr #32
     660:	47e40305 	strbmi	r0, [r4, r5, lsl #6]!
     664:	590f0001 	stmdbpl	pc, {r0}	; <UNPREDICTABLE>
     668:	01000003 	tsteq	r0, r3
     66c:	0043155b 	subeq	r1, r3, fp, asr r5
     670:	03050000 	movweq	r0, #20480	; 0x5000
     674:	000147e8 	andeq	r4, r1, r8, ror #15
     678:	00034a0f 	andeq	r4, r3, pc, lsl #20
     67c:	2e5b0100 	rdfcse	f0, f3, f0
     680:	00000043 	andeq	r0, r0, r3, asr #32
     684:	47ec0305 	strbmi	r0, [ip, r5, lsl #6]!
     688:	0b0f0001 	bleq	3c0694 <__bss_end+0x3aab44>
     68c:	01000003 	tsteq	r0, r3
     690:	0043425b 	subeq	r4, r3, fp, asr r2
     694:	03050000 	movweq	r0, #20480	; 0x5000
     698:	000147f0 	strdeq	r4, [r1], -r0
     69c:	00042411 	andeq	r2, r4, r1, lsl r4
     6a0:	016c0100 	cmneq	ip, r0, lsl #2
     6a4:	00005b16 	andeq	r5, r0, r6, lsl fp
     6a8:	010cc800 	tsteq	ip, r0, lsl #16
     6ac:	00008c00 	andeq	r8, r0, r0, lsl #24
     6b0:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     6b4:	12000003 	andne	r0, r0, #3
     6b8:	000004e0 	andeq	r0, r0, r0, ror #9
     6bc:	42016c01 	andmi	r6, r1, #256	; 0x100
     6c0:	00000336 	andeq	r0, r0, r6, lsr r3
     6c4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     6c8:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     6cc:	0a016e01 	beq	5bed8 <__bss_end+0x46388>
     6d0:	0000029c 	muleq	r0, ip, r2
     6d4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     6d8:	00000c1f 	andeq	r0, r0, pc, lsl ip
     6dc:	16016f01 	strne	r6, [r1], -r1, lsl #30
     6e0:	0000005b 	andeq	r0, r0, fp, asr r0
     6e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6e8:	015a0409 	cmpeq	sl, r9, lsl #8
     6ec:	c5140000 	ldrgt	r0, [r4, #-0]
     6f0:	01000005 	tsteq	r0, r5
     6f4:	200d0158 	andcs	r0, sp, r8, asr r1
     6f8:	a800010c 	stmdage	r0, {r2, r3, r8}
     6fc:	01000000 	mrseq	r0, (UNDEF: 0)
     700:	0003649c 	muleq	r3, ip, r4
     704:	04a21300 	strteq	r1, [r2], #768	; 0x300
     708:	5a010000 	bpl	40710 <__bss_end+0x2abc0>
     70c:	004f1801 	subeq	r1, pc, r1, lsl #16
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	02150074 	andseq	r0, r5, #116	; 0x74
     718:	01000005 	tsteq	r0, r5
     71c:	f806013a 			; <UNDEFINED> instruction: 0xf806013a
     720:	2800010a 	stmdacs	r0, {r1, r3, r8}
     724:	01000001 	tsteq	r0, r1
     728:	0003969c 	muleq	r3, ip, r6
     72c:	0b601600 	bleq	1805f34 <__bss_end+0x17f03e4>
     730:	00780001 	rsbseq	r0, r8, r1
     734:	ec130000 	ldc	0, cr0, [r3], {-0}
     738:	01000004 	tsteq	r0, r4
     73c:	6102014f 	tstvs	r2, pc, asr #2
     740:	02000002 	andeq	r0, r0, #2
     744:	00007491 	muleq	r0, r1, r4
     748:	0005f014 	andeq	pc, r5, r4, lsl r0	; <UNPREDICTABLE>
     74c:	01000100 	mrseq	r0, (UNDEF: 16)
     750:	0109280d 	tsteq	r9, sp, lsl #16
     754:	0001d000 	andeq	sp, r1, r0
     758:	d89c0100 	ldmle	ip, {r8}
     75c:	13000003 	movwne	r0, #3
     760:	000003e9 	andeq	r0, r0, r9, ror #7
     764:	0a010201 	beq	40f70 <__bss_end+0x2b420>
     768:	0000029c 	muleq	r0, ip, r2
     76c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
     770:	0001098c 	andeq	r0, r1, ip, lsl #19
     774:	00000028 	andeq	r0, r0, r8, lsr #32
     778:	0002c913 	andeq	ip, r2, r3, lsl r9
     77c:	010d0100 	mrseq	r0, (UNDEF: 29)
     780:	00025b0c 	andeq	r5, r2, ip, lsl #22
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	9b170000 	blls	5c0790 <__bss_end+0x5aac40>
     78c:	01000005 	tsteq	r0, r5
     790:	083c0de9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8, sl, fp}
     794:	00ec0001 	rsceq	r0, ip, r1
     798:	9c010000 	stcls	0, cr0, [r1], {-0}
     79c:	00000408 	andeq	r0, r0, r8, lsl #8
     7a0:	01084c16 	tsteq	r8, r6, lsl ip
     7a4:	0000b400 	andeq	fp, r0, r0, lsl #8
     7a8:	02b90f00 	adcseq	r0, r9, #0, 30
     7ac:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     7b0:	00029c0c 	andeq	r9, r2, ip, lsl #24
     7b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7b8:	d0180000 	andsle	r0, r8, r0
     7bc:	01000002 	tsteq	r0, r2
     7c0:	075806c3 	ldrbeq	r0, [r8, -r3, asr #13]
     7c4:	00e40001 	rsceq	r0, r4, r1
     7c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7cc:	0000044c 	andeq	r0, r0, ip, asr #8
     7d0:	00032b19 	andeq	r2, r3, r9, lsl fp
     7d4:	2fc30100 	svccs	0x00c30100
     7d8:	00000043 	andeq	r0, r0, r3, asr #32
     7dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     7e0:	000004e0 	andeq	r0, r0, r0, ror #9
     7e4:	5b45c301 	blpl	11713f0 <__bss_end+0x115b8a0>
     7e8:	02000002 	andeq	r0, r0, #2
     7ec:	150f6891 	strne	r6, [pc, #-2193]	; ffffff63 <_estack+0xf7feff63>
     7f0:	01000005 	tsteq	r0, r5
     7f4:	00430ec5 	subeq	r0, r3, r5, asr #29
     7f8:	91020000 	mrsls	r0, (UNDEF: 2)
     7fc:	6e1a0074 	mrcvs	0, 0, r0, cr10, cr4, {3}
     800:	01000004 	tsteq	r0, r4
     804:	005b168a 	subseq	r1, fp, sl, lsl #13
     808:	05f00000 	ldrbeq	r0, [r0, #0]!
     80c:	01680001 	cmneq	r8, r1
     810:	9c010000 	stcls	0, cr0, [r1], {-0}
     814:	0003fb19 	andeq	pc, r3, r9, lsl fp	; <UNPREDICTABLE>
     818:	398a0100 	stmibcc	sl, {r8}
     81c:	00000179 	andeq	r0, r0, r9, ror r1
     820:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     824:	000004a2 	andeq	r0, r0, r2, lsr #9
     828:	4f618a01 	svcmi	0x00618a01
     82c:	02000000 	andeq	r0, r0, #0
     830:	58196891 	ldmdapl	r9, {r0, r4, r7, fp, sp, lr}
     834:	01000004 	tsteq	r0, r4
     838:	004f848a 	subeq	r8, pc, sl, lsl #9
     83c:	91020000 	mrsls	r0, (UNDEF: 2)
     840:	0c1f0f64 	ldceq	15, cr0, [pc], {100}	; 0x64
     844:	8c010000 	stchi	0, cr0, [r1], {-0}
     848:	00005b16 	andeq	r5, r0, r6, lsl fp
     84c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     850:	0005210f 	andeq	r2, r5, pc, lsl #2
     854:	0a8d0100 	beq	fe340c5c <_estack+0xf6330c5c>
     858:	0000029c 	muleq	r0, ip, r2
     85c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     860:	000b3b00 	andeq	r3, fp, r0, lsl #22
     864:	b9000400 	stmdblt	r0, {sl}
     868:	04000003 	streq	r0, [r0], #-3
     86c:	00007801 	andeq	r7, r0, r1, lsl #16
     870:	094c0c00 	stmdbeq	ip, {sl, fp}^
     874:	00f80000 	rscseq	r0, r8, r0
     878:	0d540000 	ldcleq	0, cr0, [r4, #-0]
     87c:	029c0001 	addseq	r0, ip, #1
     880:	054b0000 	strbeq	r0, [fp, #-0]
     884:	04020000 	streq	r0, [r2], #-0
     888:	00066a07 	andeq	r6, r6, r7, lsl #20
     88c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     890:	00746e69 	rsbseq	r6, r4, r9, ror #28
     894:	1f050802 	svcne	0x00050802
     898:	02000001 	andeq	r0, r0, #1
     89c:	019b0408 	orrseq	r0, fp, r8, lsl #8
     8a0:	13040000 	movwne	r0, #16384	; 0x4000
     8a4:	02000008 	andeq	r0, r0, #8
     8a8:	25170165 	ldrcs	r0, [r7, #-357]	; 0xfffffe9b
     8ac:	02000000 	andeq	r0, r0, #0
     8b0:	08a60601 	stmiaeq	r6!, {r0, r9, sl}
     8b4:	01020000 	mrseq	r0, (UNDEF: 2)
     8b8:	0008a408 	andeq	sl, r8, r8, lsl #8
     8bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     8c0:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
     8c4:	59070202 	stmdbpl	r7, {r1, r9}
     8c8:	02000000 	andeq	r0, r0, #0
     8cc:	01240504 			; <UNDEFINED> instruction: 0x01240504
     8d0:	04020000 	streq	r0, [r2], #-0
     8d4:	00066507 	andeq	r6, r6, r7, lsl #10
     8d8:	00710500 	rsbseq	r0, r1, r0, lsl #10
     8dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     8e0:	00066007 	andeq	r6, r6, r7
     8e4:	08810600 	stmeq	r1, {r9, sl}
     8e8:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     8ec:	00006a0e 	andeq	r6, r0, lr, lsl #20
     8f0:	09a90600 	stmibeq	r9!, {r9, sl}
     8f4:	74030000 	strvc	r0, [r3], #-0
     8f8:	00006a0e 	andeq	r6, r0, lr, lsl #20
     8fc:	03040700 	movweq	r0, #18176	; 0x4700
     900:	00be03a5 	adcseq	r0, lr, r5, lsr #7
     904:	0d080000 	stceq	0, cr0, [r8, #-0]
     908:	03000008 	movweq	r0, #8
     90c:	00410ca7 	subeq	r0, r1, r7, lsr #25
     910:	bf080000 	svclt	0x00080000
     914:	03000007 	movweq	r0, #7
     918:	00be13a8 	adcseq	r1, lr, r8, lsr #7
     91c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     920:	00000055 	andeq	r0, r0, r5, asr r0
     924:	000000ce 	andeq	r0, r0, lr, asr #1
     928:	0000250a 	andeq	r2, r0, sl, lsl #10
     92c:	0b000300 	bleq	1534 <_start-0x6acc>
     930:	09a20308 	stmibeq	r2!, {r3, r8, r9}
     934:	000000f2 	strdeq	r0, [r0], -r2
     938:	0009870c 	andeq	r8, r9, ip, lsl #14
     93c:	07a40300 	streq	r0, [r4, r0, lsl #6]!
     940:	0000002c 	andeq	r0, r0, ip, lsr #32
     944:	098f0c00 	stmibeq	pc, {sl, fp}	; <UNPREDICTABLE>
     948:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     94c:	00009c05 	andeq	r9, r0, r5, lsl #24
     950:	06000400 	streq	r0, [r0], -r0, lsl #8
     954:	000008e3 	andeq	r0, r0, r3, ror #17
     958:	ce03aa03 	vmlagt.f32	s20, s6, s6
     95c:	0d000000 	stceq	0, cr0, [r0, #-0]
     960:	09ed0604 	stmibeq	sp!, {r2, r9, sl}^
     964:	16040000 	strne	r0, [r4], -r0
     968:	00007119 	andeq	r7, r0, r9, lsl r1
     96c:	08920600 	ldmeq	r2, {r9, sl}
     970:	0c050000 	stceq	0, cr0, [r5], {-0}
     974:	00002c0d 	andeq	r2, r0, sp, lsl #24
     978:	07820600 	streq	r0, [r2, r0, lsl #12]
     97c:	23040000 	movwcs	r0, #16384	; 0x4000
     980:	00010c1b 	andeq	r0, r1, fp, lsl ip
     984:	07930e00 	ldreq	r0, [r3, r0, lsl #28]
     988:	04180000 	ldreq	r0, [r8], #-0
     98c:	017e0834 	cmneq	lr, r4, lsr r8
     990:	040c0000 	streq	r0, [ip], #-0
     994:	04000009 	streq	r0, [r0], #-9
     998:	017e1336 	cmneq	lr, r6, lsr r3
     99c:	0f000000 	svceq	0x00000000
     9a0:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
     9a4:	002c0737 	eoreq	r0, ip, r7, lsr r7
     9a8:	0c040000 	stceq	0, cr0, [r4], {-0}
     9ac:	00000944 	andeq	r0, r0, r4, asr #18
     9b0:	2c0b3704 	stccs	7, cr3, [fp], {4}
     9b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9b8:	001b490c 	andseq	r4, fp, ip, lsl #18
     9bc:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
     9c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     9c4:	0a320c0c 	beq	c839fc <__bss_end+0xc6deac>
     9c8:	37040000 	strcc	r0, [r4, -r0]
     9cc:	00002c1b 	andeq	r2, r0, fp, lsl ip
     9d0:	5f0f1000 	svcpl	0x000f1000
     9d4:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
     9d8:	0001840b 	andeq	r8, r1, fp, lsl #8
     9dc:	10001400 	andne	r1, r0, r0, lsl #8
     9e0:	00012404 	andeq	r2, r1, r4, lsl #8
     9e4:	01000900 	tsteq	r0, r0, lsl #18
     9e8:	01940000 	orrseq	r0, r4, r0
     9ec:	250a0000 	strcs	r0, [sl, #-0]
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	07ba0e00 	ldreq	r0, [sl, r0, lsl #28]!
     9f8:	04240000 	strteq	r0, [r4], #-0
     9fc:	0217083c 	andseq	r0, r7, #60, 16	; 0x3c0000
     a00:	b60c0000 	strlt	r0, [ip], -r0
     a04:	04000006 	streq	r0, [r0], #-6
     a08:	002c093e 	eoreq	r0, ip, lr, lsr r9
     a0c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a10:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     a14:	2c093f04 	stccs	15, cr3, [r9], {4}
     a18:	04000000 	streq	r0, [r0], #-0
     a1c:	0006cb0c 	andeq	ip, r6, ip, lsl #22
     a20:	09400400 	stmdbeq	r0, {sl}^
     a24:	0000002c 	andeq	r0, r0, ip, lsr #32
     a28:	0ac40c08 	beq	ff103a50 <_estack+0xf70f3a50>
     a2c:	41040000 	mrsmi	r0, (UNDEF: 4)
     a30:	00002c09 	andeq	r2, r0, r9, lsl #24
     a34:	5b0c0c00 	blpl	303a3c <__bss_end+0x2edeec>
     a38:	04000008 	streq	r0, [r0], #-8
     a3c:	002c0942 	eoreq	r0, ip, r2, asr #18
     a40:	0c100000 	ldceq	0, cr0, [r0], {-0}
     a44:	0000083b 	andeq	r0, r0, fp, lsr r8
     a48:	2c094304 	stccs	3, cr4, [r9], {4}
     a4c:	14000000 	strne	r0, [r0], #-0
     a50:	000a370c 	andeq	r3, sl, ip, lsl #14
     a54:	09440400 	stmdbeq	r4, {sl}^
     a58:	0000002c 	andeq	r0, r0, ip, lsr #32
     a5c:	08c50c18 	stmiaeq	r5, {r3, r4, sl, fp}^
     a60:	45040000 	strmi	r0, [r4, #-0]
     a64:	00002c09 	andeq	r2, r0, r9, lsl #24
     a68:	8b0c1c00 	blhi	307a70 <__bss_end+0x2f1f20>
     a6c:	0400000a 	streq	r0, [r0], #-10
     a70:	002c0946 	eoreq	r0, ip, r6, asr #18
     a74:	00200000 	eoreq	r0, r0, r0
     a78:	0006da11 	andeq	sp, r6, r1, lsl sl
     a7c:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
     a80:	025c084f 	subseq	r0, ip, #5177344	; 0x4f0000
     a84:	610c0000 	mrsvs	r0, (UNDEF: 12)
     a88:	04000007 	streq	r0, [r0], #-7
     a8c:	025c0a50 	subseq	r0, ip, #80, 20	; 0x50000
     a90:	0c000000 	stceq	0, cr0, [r0], {-0}
     a94:	00000615 	andeq	r0, r0, r5, lsl r6
     a98:	5c095104 	stfpls	f5, [r9], {4}
     a9c:	80000002 	andhi	r0, r0, r2
     aa0:	0009d412 	andeq	sp, r9, r2, lsl r4
     aa4:	0a530400 	beq	14c1aac <__bss_end+0x14abf5c>
     aa8:	00000100 	andeq	r0, r0, r0, lsl #2
     aac:	04120100 	ldreq	r0, [r2], #-256	; 0xffffff00
     ab0:	04000007 	streq	r0, [r0], #-7
     ab4:	01000a56 	tsteq	r0, r6, asr sl
     ab8:	01040000 	mrseq	r0, (UNDEF: 4)
     abc:	00fe0900 	rscseq	r0, lr, r0, lsl #18
     ac0:	026c0000 	rsbeq	r0, ip, #0
     ac4:	250a0000 	strcs	r0, [sl, #-0]
     ac8:	1f000000 	svcne	0x00000000
     acc:	08641100 	stmdaeq	r4!, {r8, ip}^
     ad0:	01900000 	orrseq	r0, r0, r0
     ad4:	af086204 	svcge	0x00086204
     ad8:	0c000002 	stceq	0, cr0, [r0], {2}
     adc:	00000904 	andeq	r0, r0, r4, lsl #18
     ae0:	af126304 	svcge	0x00126304
     ae4:	00000002 	andeq	r0, r0, r2
     ae8:	00091c0c 	andeq	r1, r9, ip, lsl #24
     aec:	06640400 	strbteq	r0, [r4], -r0, lsl #8
     af0:	0000002c 	andeq	r0, r0, ip, lsr #32
     af4:	07690c04 	strbeq	r0, [r9, -r4, lsl #24]!
     af8:	66040000 	strvs	r0, [r4], -r0
     afc:	0002b509 	andeq	fp, r2, r9, lsl #10
     b00:	da0c0800 	ble	302b08 <__bss_end+0x2ecfb8>
     b04:	04000006 	streq	r0, [r0], #-6
     b08:	02171e67 	andseq	r1, r7, #1648	; 0x670
     b0c:	00880000 	addeq	r0, r8, r0
     b10:	026c0410 	rsbeq	r0, ip, #16, 8	; 0x10000000
     b14:	c5090000 	strgt	r0, [r9, #-0]
     b18:	c5000002 	strgt	r0, [r0, #-2]
     b1c:	0a000002 	beq	b2c <_start-0x74d4>
     b20:	00000025 	andeq	r0, r0, r5, lsr #32
     b24:	0410001f 	ldreq	r0, [r0], #-31	; 0xffffffe1
     b28:	000002cb 	andeq	r0, r0, fp, asr #5
     b2c:	08cf0e13 	stmiaeq	pc, {r0, r1, r4, r9, sl, fp}^	; <UNPREDICTABLE>
     b30:	04080000 	streq	r0, [r8], #-0
     b34:	02f4087a 	rscseq	r0, r4, #7995392	; 0x7a0000
     b38:	c50c0000 	strgt	r0, [ip, #-0]
     b3c:	04000006 	streq	r0, [r0], #-6
     b40:	02f4117b 	rscseq	r1, r4, #-1073741794	; 0xc000001e
     b44:	0c000000 	stceq	0, cr0, [r0], {-0}
     b48:	00000621 	andeq	r0, r0, r1, lsr #12
     b4c:	2c067c04 	stccs	12, cr7, [r6], {4}
     b50:	04000000 	streq	r0, [r0], #-0
     b54:	55041000 	strpl	r1, [r4, #-0]
     b58:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     b5c:	000008ee 	andeq	r0, r0, lr, ror #17
     b60:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
     b64:	0000043d 	andeq	r0, r0, sp, lsr r4
     b68:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
     b6c:	f412bb04 			; <UNDEFINED> instruction: 0xf412bb04
     b70:	00000002 	andeq	r0, r0, r2
     b74:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
     b78:	2c07bc04 	stccs	12, cr11, [r7], {4}
     b7c:	04000000 	streq	r0, [r0], #-0
     b80:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
     b84:	2c07bd04 	stccs	13, cr11, [r7], {4}
     b88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b8c:	0006fd0c 	andeq	pc, r6, ip, lsl #26
     b90:	09be0400 	ldmibeq	lr!, {sl}
     b94:	0000005c 	andeq	r0, r0, ip, asr r0
     b98:	07d60c0c 	ldrbeq	r0, [r6, ip, lsl #24]
     b9c:	bf040000 	svclt	0x00040000
     ba0:	00005c09 	andeq	r5, r0, r9, lsl #24
     ba4:	5f0f0e00 	svcpl	0x000f0e00
     ba8:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
     bac:	02cc11c0 	sbceq	r1, ip, #192, 2	; 0x30
     bb0:	0c100000 	ldceq	0, cr0, [r0], {-0}
     bb4:	00000677 	andeq	r0, r0, r7, ror r6
     bb8:	2c07c104 	stfcsd	f4, [r7], {4}
     bbc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     bc0:	0006e80c 	andeq	lr, r6, ip, lsl #16
     bc4:	0ac80400 	beq	ff201bcc <_estack+0xf71f1bcc>
     bc8:	000000fe 	strdeq	r0, [r0], -lr
     bcc:	07aa0c1c 			; <UNDEFINED> instruction: 0x07aa0c1c
     bd0:	ca040000 	bgt	100bd8 <__bss_end+0xeb088>
     bd4:	0005c11d 	andeq	ip, r5, sp, lsl r1
     bd8:	340c2000 	strcc	r2, [ip], #-0
     bdc:	04000008 	streq	r0, [r0], #-8
     be0:	05eb1dcc 	strbeq	r1, [fp, #3532]!	; 0xdcc
     be4:	0c240000 	stceq	0, cr0, [r4], #-0
     be8:	00000997 	muleq	r0, r7, r9
     bec:	0f0dcf04 	svceq	0x000dcf04
     bf0:	28000006 	stmdacs	r0, {r1, r2}
     bf4:	000aa50c 	andeq	sl, sl, ip, lsl #10
     bf8:	09d00400 	ldmibeq	r0, {sl}^
     bfc:	00000629 	andeq	r0, r0, r9, lsr #12
     c00:	755f0f2c 	ldrbvc	r0, [pc, #-3884]	; fffffcdc <_estack+0xf7fefcdc>
     c04:	d3040062 	movwle	r0, #16482	; 0x4062
     c08:	0002cc11 	andeq	ip, r2, r1, lsl ip
     c0c:	5f0f3000 	svcpl	0x000f3000
     c10:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
     c14:	02f412d4 	rscseq	r1, r4, #212, 4	; 0x4000000d
     c18:	0f380000 	svceq	0x00380000
     c1c:	0072755f 	rsbseq	r7, r2, pc, asr r5
     c20:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
     c24:	3c000000 	stccc	0, cr0, [r0], {-0}
     c28:	0006bf0c 	andeq	fp, r6, ip, lsl #30
     c2c:	11d80400 	bicsne	r0, r8, r0, lsl #8
     c30:	0000062f 	andeq	r0, r0, pc, lsr #12
     c34:	0a7d0c40 	beq	1f43d3c <__bss_end+0x1f2e1ec>
     c38:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     c3c:	00063f11 	andeq	r3, r6, r1, lsl pc
     c40:	5f0f4300 	svcpl	0x000f4300
     c44:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
     c48:	02cc11dc 	sbceq	r1, ip, #220, 2	; 0x37
     c4c:	0c440000 	mareq	acc0, r0, r4
     c50:	00000713 	andeq	r0, r0, r3, lsl r7
     c54:	2c07df04 	stccs	15, cr13, [r7], {4}
     c58:	4c000000 	stcmi	0, cr0, [r0], {-0}
     c5c:	0007240c 	andeq	r2, r7, ip, lsl #8
     c60:	0ae00400 	beq	ff801c68 <_estack+0xf77f1c68>
     c64:	00000084 	andeq	r0, r0, r4, lsl #1
     c68:	063a0c50 			; <UNDEFINED> instruction: 0x063a0c50
     c6c:	e3040000 	movw	r0, #16384	; 0x4000
     c70:	00045b12 	andeq	r5, r4, r2, lsl fp
     c74:	1a0c5400 	bne	315c7c <__bss_end+0x30012c>
     c78:	04000008 	streq	r0, [r0], #-8
     c7c:	01180ce7 	tsteq	r8, r7, ror #25
     c80:	0c580000 	mraeq	r0, r8, acc0
     c84:	000008f6 	strdeq	r0, [r0], -r6
     c88:	f20ee904 	vmla.i8	d14, d14, d4
     c8c:	5c000000 	stcpl	0, cr0, [r0], {-0}
     c90:	00082c0c 	andeq	r2, r8, ip, lsl #24
     c94:	09ea0400 	stmibeq	sl!, {sl}^
     c98:	0000002c 	andeq	r0, r0, ip, lsr #32
     c9c:	2c140064 	ldccs	0, cr0, [r4], {100}	; 0x64
     ca0:	5b000000 	blpl	ca8 <_start-0x7358>
     ca4:	15000004 	strne	r0, [r0, #-4]
     ca8:	0000045b 	andeq	r0, r0, fp, asr r4
     cac:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
     cb0:	05af1500 	streq	r1, [pc, #1280]!	; 11b8 <_start-0x6e48>
     cb4:	2c150000 	ldccs	0, cr0, [r5], {-0}
     cb8:	00000000 	andeq	r0, r0, r0
     cbc:	04660410 	strbteq	r0, [r6], #-1040	; 0xfffffbf0
     cc0:	5b160000 	blpl	580cc8 <__bss_end+0x56b178>
     cc4:	17000004 	strne	r0, [r0, -r4]
     cc8:	00000a76 	andeq	r0, r0, r6, ror sl
     ccc:	65040428 	strvs	r0, [r4, #-1064]	; 0xfffffbd8
     cd0:	05af0802 	streq	r0, [pc, #2050]!	; 14da <_start-0x6b26>
     cd4:	b4180000 	ldrlt	r0, [r8], #-0
     cd8:	04000008 	streq	r0, [r0], #-8
     cdc:	2c070267 	sfmcs	f0, 4, [r7], {103}	; 0x67
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	00070c18 	andeq	r0, r7, r8, lsl ip
     ce8:	026c0400 	rsbeq	r0, ip, #0, 8
     cec:	00069b0b 	andeq	r9, r6, fp, lsl #22
     cf0:	c6180400 	ldrgt	r0, [r8], -r0, lsl #8
     cf4:	04000007 	streq	r0, [r0], #-7
     cf8:	9b14026c 	blls	5016b0 <__bss_end+0x4ebb60>
     cfc:	08000006 	stmdaeq	r0, {r1, r2}
     d00:	00078b18 	andeq	r8, r7, r8, lsl fp
     d04:	026c0400 	rsbeq	r0, ip, #0, 8
     d08:	00069b1e 	andeq	r9, r6, lr, lsl fp
     d0c:	17180c00 	ldrne	r0, [r8, -r0, lsl #24]
     d10:	04000009 	streq	r0, [r0], #-9
     d14:	2c08026e 	sfmcs	f0, 4, [r8], {110}	; 0x6e
     d18:	10000000 	andne	r0, r0, r0
     d1c:	00062f18 	andeq	r2, r6, r8, lsl pc
     d20:	026f0400 	rsbeq	r0, pc, #0, 8
     d24:	00089b08 	andeq	r9, r8, r8, lsl #22
     d28:	2b181400 	blcs	605d30 <__bss_end+0x5f01e0>
     d2c:	04000009 	streq	r0, [r0], #-9
     d30:	2c070272 	sfmcs	f0, 4, [r7], {114}	; 0x72
     d34:	30000000 	andcc	r0, r0, r0
     d38:	0019b618 	andseq	fp, r9, r8, lsl r6
     d3c:	02730400 	rsbseq	r0, r3, #0, 8
     d40:	0008b016 	andeq	fp, r8, r6, lsl r0
     d44:	76183400 	ldrvc	r3, [r8], -r0, lsl #8
     d48:	04000008 	streq	r0, [r0], #-8
     d4c:	2c070275 	sfmcs	f0, 4, [r7], {117}	; 0x75
     d50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d54:	00092118 	andeq	r2, r9, r8, lsl r1
     d58:	02770400 	rsbseq	r0, r7, #0, 8
     d5c:	0008c10a 	andeq	ip, r8, sl, lsl #2
     d60:	05183c00 	ldreq	r3, [r8, #-3072]	; 0xfffff400
     d64:	04000008 	streq	r0, [r0], #-8
     d68:	7e13027a 	mrcvc	2, 0, r0, cr3, cr10, {3}
     d6c:	40000001 	andmi	r0, r0, r1
     d70:	0007b018 	andeq	fp, r7, r8, lsl r0
     d74:	027b0400 	rsbseq	r0, fp, #0, 8
     d78:	00002c07 	andeq	r2, r0, r7, lsl #24
     d7c:	bf184400 	svclt	0x00184400
     d80:	0400000a 	streq	r0, [r0], #-10
     d84:	7e13027c 	mrcvc	2, 0, r0, cr3, cr12, {3}
     d88:	48000001 	stmdami	r0, {r0}
     d8c:	00088818 	andeq	r8, r8, r8, lsl r8
     d90:	027d0400 	rsbseq	r0, sp, #0, 8
     d94:	0008c714 	andeq	ip, r8, r4, lsl r7
     d98:	ce184c00 	cdpgt	12, 1, cr4, cr8, cr0, {0}
     d9c:	04000007 	streq	r0, [r0], #-7
     da0:	2c070280 	sfmcs	f0, 4, [r7], {128}	; 0x80
     da4:	50000000 	andpl	r0, r0, r0
     da8:	00071c18 	andeq	r1, r7, r8, lsl ip
     dac:	02810400 	addeq	r0, r1, #0, 8
     db0:	0005af09 	andeq	sl, r5, r9, lsl #30
     db4:	f8185400 			; <UNDEFINED> instruction: 0xf8185400
     db8:	04000006 	streq	r0, [r0], #-6
     dbc:	760702a4 	strvc	r0, [r7], -r4, lsr #5
     dc0:	58000008 	stmdapl	r0, {r3}
     dc4:	00086419 	andeq	r6, r8, r9, lsl r4
     dc8:	02a80400 	adceq	r0, r8, #0, 8
     dcc:	0002af13 	andeq	sl, r2, r3, lsl pc
     dd0:	19014800 	stmdbne	r1, {fp, lr}
     dd4:	000007e3 	andeq	r0, r0, r3, ror #15
     dd8:	1202a904 	andne	sl, r2, #4, 18	; 0x10000
     ddc:	0000026c 	andeq	r0, r0, ip, ror #4
     de0:	5a19014c 	bpl	641318 <__bss_end+0x62b7c8>
     de4:	0400000a 	streq	r0, [r0], #-10
     de8:	d80c02ad 	stmdale	ip, {r0, r2, r3, r5, r7, r9}
     dec:	dc000008 	stcle	0, cr0, [r0], {8}
     df0:	06f01902 	ldrbteq	r1, [r0], r2, lsl #18
     df4:	b2040000 	andlt	r0, r4, #0
     df8:	065c1002 	ldrbeq	r1, [ip], -r2
     dfc:	02e00000 	rsceq	r0, r0, #0
     e00:	0006d519 	andeq	sp, r6, r9, lsl r5
     e04:	02b40400 	adcseq	r0, r4, #0, 8
     e08:	0008e40a 	andeq	lr, r8, sl, lsl #8
     e0c:	0002ec00 	andeq	lr, r2, r0, lsl #24
     e10:	05b50410 	ldreq	r0, [r5, #1040]!	; 0x410
     e14:	01020000 	mrseq	r0, (UNDEF: 2)
     e18:	0008ad08 	andeq	sl, r8, r8, lsl #26
     e1c:	05b51600 	ldreq	r1, [r5, #1536]!	; 0x600
     e20:	04100000 	ldreq	r0, [r0], #-0
     e24:	0000043d 	andeq	r0, r0, sp, lsr r4
     e28:	00002c14 	andeq	r2, r0, r4, lsl ip
     e2c:	0005e500 	andeq	lr, r5, r0, lsl #10
     e30:	045b1500 	ldrbeq	r1, [fp], #-1280	; 0xfffffb00
     e34:	fe150000 	cdp2	0, 1, cr0, cr5, cr0, {0}
     e38:	15000000 	strne	r0, [r0, #-0]
     e3c:	000005e5 	andeq	r0, r0, r5, ror #11
     e40:	00002c15 	andeq	r2, r0, r5, lsl ip
     e44:	04100000 	ldreq	r0, [r0], #-0
     e48:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
     e4c:	05c70410 	strbeq	r0, [r7, #1040]	; 0x410
     e50:	90140000 	andsls	r0, r4, r0
     e54:	0f000000 	svceq	0x00000000
     e58:	15000006 	strne	r0, [r0, #-6]
     e5c:	0000045b 	andeq	r0, r0, fp, asr r4
     e60:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
     e64:	00901500 	addseq	r1, r0, r0, lsl #10
     e68:	2c150000 	ldccs	0, cr0, [r5], {-0}
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	05f10410 	ldrbeq	r0, [r1, #1040]!	; 0x410
     e74:	2c140000 	ldccs	0, cr0, [r4], {-0}
     e78:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     e7c:	15000006 	strne	r0, [r0, #-6]
     e80:	0000045b 	andeq	r0, r0, fp, asr r4
     e84:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
     e88:	04100000 	ldreq	r0, [r0], #-0
     e8c:	00000615 	andeq	r0, r0, r5, lsl r6
     e90:	00005509 	andeq	r5, r0, r9, lsl #10
     e94:	00063f00 	andeq	r3, r6, r0, lsl #30
     e98:	00250a00 	eoreq	r0, r5, r0, lsl #20
     e9c:	00020000 	andeq	r0, r2, r0
     ea0:	00005509 	andeq	r5, r0, r9, lsl #10
     ea4:	00064f00 	andeq	r4, r6, r0, lsl #30
     ea8:	00250a00 	eoreq	r0, r5, r0, lsl #20
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	0008dc04 	andeq	sp, r8, r4, lsl #24
     eb4:	01240400 			; <UNDEFINED> instruction: 0x01240400
     eb8:	0002fa1a 	andeq	pc, r2, sl, lsl sl	; <UNPREDICTABLE>
     ebc:	0a411a00 	beq	10476c4 <__bss_end+0x1031b74>
     ec0:	040c0000 	streq	r0, [ip], #-0
     ec4:	95080128 	strls	r0, [r8, #-296]	; 0xfffffed8
     ec8:	18000006 	stmdane	r0, {r1, r2}
     ecc:	00000904 	andeq	r0, r0, r4, lsl #18
     ed0:	11012a04 	tstne	r1, r4, lsl #20
     ed4:	00000695 	muleq	r0, r5, r6
     ed8:	07dc1800 	ldrbeq	r1, [ip, r0, lsl #16]
     edc:	2b040000 	blcs	100ee4 <__bss_end+0xeb394>
     ee0:	002c0701 	eoreq	r0, ip, r1, lsl #14
     ee4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     ee8:	000008d6 	ldrdeq	r0, [r0], -r6
     eec:	0b012c04 	bleq	4bf04 <__bss_end+0x363b4>
     ef0:	0000069b 	muleq	r0, fp, r6
     ef4:	04100008 	ldreq	r0, [r0], #-8
     ef8:	0000065c 	andeq	r0, r0, ip, asr r6
     efc:	064f0410 			; <UNDEFINED> instruction: 0x064f0410
     f00:	271a0000 	ldrcs	r0, [sl, -r0]
     f04:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     f08:	08014404 	stmdaeq	r1, {r2, sl, lr}
     f0c:	000006da 	ldrdeq	r0, [r0], -sl
     f10:	00098118 	andeq	r8, r9, r8, lsl r1
     f14:	01450400 	cmpeq	r5, r0, lsl #8
     f18:	0006da12 	andeq	sp, r6, r2, lsl sl
     f1c:	c1180000 	tstgt	r8, r0
     f20:	04000009 	streq	r0, [r0], #-9
     f24:	da120146 	ble	481444 <__bss_end+0x46b8f4>
     f28:	06000006 	streq	r0, [r0], -r6
     f2c:	0009dd18 	andeq	sp, r9, r8, lsl sp
     f30:	01470400 	cmpeq	r7, r0, lsl #8
     f34:	00006312 	andeq	r6, r0, r2, lsl r3
     f38:	09000c00 	stmdbeq	r0, {sl, fp}
     f3c:	00000063 	andeq	r0, r0, r3, rrx
     f40:	000006ea 	andeq	r0, r0, sl, ror #13
     f44:	0000250a 	andeq	r2, r0, sl, lsl #10
     f48:	1b000200 	blne	1750 <_start-0x68b0>
     f4c:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
     f50:	0007ff07 	andeq	pc, r7, r7, lsl #30
     f54:	0a151800 	beq	546f5c <__bss_end+0x53140c>
     f58:	87040000 	strhi	r0, [r4, -r0]
     f5c:	00251802 	eoreq	r1, r5, r2, lsl #16
     f60:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     f64:	000009c7 	andeq	r0, r0, r7, asr #19
     f68:	12028804 	andne	r8, r2, #4, 16	; 0x40000
     f6c:	000005af 	andeq	r0, r0, pc, lsr #11
     f70:	07f81804 	ldrbeq	r1, [r8, r4, lsl #16]!
     f74:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     f78:	07ff1002 	ldrbeq	r1, [pc, r2]!
     f7c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
     f80:	00000a96 	muleq	r0, r6, sl
     f84:	17028a04 	strne	r8, [r2, -r4, lsl #20]
     f88:	00000194 	muleq	r0, r4, r1
     f8c:	079b1824 	ldreq	r1, [fp, r4, lsr #16]
     f90:	8b040000 	blhi	100f98 <__bss_end+0xeb448>
     f94:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     f98:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
     f9c:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     fa0:	2c028c04 	stccs	12, cr8, [r2], {4}
     fa4:	0000007d 	andeq	r0, r0, sp, ror r0
     fa8:	0aac1850 	beq	feb070f0 <_estack+0xf6af70f0>
     fac:	8d040000 	stchi	0, cr0, [r4, #-0]
     fb0:	06a11a02 	strteq	r1, [r1], r2, lsl #20
     fb4:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
     fb8:	0000090a 	andeq	r0, r0, sl, lsl #18
     fbc:	16028e04 	strne	r8, [r2], -r4, lsl #28
     fc0:	000000f2 	strdeq	r0, [r0], -r2
     fc4:	0ab11868 	beq	fec4716c <_estack+0xf6c3716c>
     fc8:	8f040000 	svchi	0x00040000
     fcc:	00f21602 	rscseq	r1, r2, r2, lsl #12
     fd0:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
     fd4:	000006a8 	andeq	r0, r0, r8, lsr #13
     fd8:	16029004 	strne	r9, [r2], -r4
     fdc:	000000f2 	strdeq	r0, [r0], -r2
     fe0:	0a501878 	beq	14071c8 <__bss_end+0x13f1678>
     fe4:	91040000 	mrsls	r0, (UNDEF: 4)
     fe8:	080f1002 	stmdaeq	pc, {r1, ip}	; <UNPREDICTABLE>
     fec:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
     ff0:	000007ec 	andeq	r0, r0, ip, ror #15
     ff4:	10029204 	andne	r9, r2, r4, lsl #4
     ff8:	0000081f 	andeq	r0, r0, pc, lsl r8
     ffc:	09f51888 	ldmibeq	r5!, {r3, r7, fp, ip}^
    1000:	93040000 	movwls	r0, #16384	; 0x4000
    1004:	002c0f02 	eoreq	r0, ip, r2, lsl #30
    1008:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    100c:	00000753 	andeq	r0, r0, r3, asr r7
    1010:	16029404 	strne	r9, [r2], -r4, lsl #8
    1014:	000000f2 	strdeq	r0, [r0], -r2
    1018:	069918a4 	ldreq	r1, [r9], r4, lsr #17
    101c:	95040000 	strls	r0, [r4, #-0]
    1020:	00f21602 	rscseq	r1, r2, r2, lsl #12
    1024:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    1028:	00000742 	andeq	r0, r0, r2, asr #14
    102c:	16029604 	strne	r9, [r2], -r4, lsl #12
    1030:	000000f2 	strdeq	r0, [r0], -r2
    1034:	064018b4 			; <UNDEFINED> instruction: 0x064018b4
    1038:	97040000 	strls	r0, [r4, -r0]
    103c:	00f21602 	rscseq	r1, r2, r2, lsl #12
    1040:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    1044:	0000064f 	andeq	r0, r0, pc, asr #12
    1048:	16029804 	strne	r9, [r2], -r4, lsl #16
    104c:	000000f2 	strdeq	r0, [r0], -r2
    1050:	08b218c4 	ldmeq	r2!, {r2, r6, r7, fp, ip}
    1054:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    1058:	002c0802 	eoreq	r0, ip, r2, lsl #16
    105c:	00cc0000 	sbceq	r0, ip, r0
    1060:	0005b509 	andeq	fp, r5, r9, lsl #10
    1064:	00080f00 	andeq	r0, r8, r0, lsl #30
    1068:	00250a00 	eoreq	r0, r5, r0, lsl #20
    106c:	00190000 	andseq	r0, r9, r0
    1070:	0005b509 	andeq	fp, r5, r9, lsl #10
    1074:	00081f00 	andeq	r1, r8, r0, lsl #30
    1078:	00250a00 	eoreq	r0, r5, r0, lsl #20
    107c:	00070000 	andeq	r0, r7, r0
    1080:	0005b509 	andeq	fp, r5, r9, lsl #10
    1084:	00082f00 	andeq	r2, r8, r0, lsl #30
    1088:	00250a00 	eoreq	r0, r5, r0, lsl #20
    108c:	00170000 	andseq	r0, r7, r0
    1090:	9e04f01b 	mcrls	0, 0, pc, cr4, cr11, {0}	; <UNPREDICTABLE>
    1094:	08560702 	ldmdaeq	r6, {r1, r8, r9, sl}^
    1098:	54180000 	ldrpl	r0, [r8], #-0
    109c:	04000008 	streq	r0, [r0], #-8
    10a0:	561b02a1 	ldrpl	r0, [fp], -r1, lsr #5
    10a4:	00000008 	andeq	r0, r0, r8
    10a8:	000a4718 	andeq	r4, sl, r8, lsl r7
    10ac:	02a20400 	adceq	r0, r2, #0, 8
    10b0:	00086618 	andeq	r6, r8, r8, lsl r6
    10b4:	09007800 	stmdbeq	r0, {fp, ip, sp, lr}
    10b8:	000002f4 	strdeq	r0, [r0], -r4
    10bc:	00000866 	andeq	r0, r0, r6, ror #16
    10c0:	0000250a 	andeq	r2, r0, sl, lsl #10
    10c4:	09001d00 	stmdbeq	r0, {r8, sl, fp, ip}
    10c8:	00000025 	andeq	r0, r0, r5, lsr #32
    10cc:	00000876 	andeq	r0, r0, r6, ror r8
    10d0:	0000250a 	andeq	r2, r0, sl, lsl #10
    10d4:	1c001d00 	stcne	13, cr1, [r0], {-0}
    10d8:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
    10dc:	00089b03 	andeq	r9, r8, r3, lsl #22
    10e0:	0a761d00 	beq	1d884e8 <__bss_end+0x1d72998>
    10e4:	9a040000 	bls	1010ec <__bss_end+0xeb59c>
    10e8:	06ea0b02 	strbteq	r0, [sl], r2, lsl #22
    10ec:	831d0000 	tsthi	sp, #0
    10f0:	0400000a 	streq	r0, [r0], #-10
    10f4:	2f0b02a3 	svccs	0x000b02a3
    10f8:	00000008 	andeq	r0, r0, r8
    10fc:	0005b509 	andeq	fp, r5, r9, lsl #10
    1100:	0008ab00 	andeq	sl, r8, r0, lsl #22
    1104:	00250a00 	eoreq	r0, r5, r0, lsl #20
    1108:	00180000 	andseq	r0, r8, r0
    110c:	0006801e 	andeq	r8, r6, lr, lsl r0
    1110:	ab041000 	blge	105118 <__bss_end+0xef5c8>
    1114:	1f000008 	svcne	0x00000008
    1118:	000008c1 	andeq	r0, r0, r1, asr #17
    111c:	00045b15 	andeq	r5, r4, r5, lsl fp
    1120:	04100000 	ldreq	r0, [r0], #-0
    1124:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    1128:	017e0410 	cmneq	lr, r0, lsl r4
    112c:	d81f0000 	ldmdale	pc, {}	; <UNPREDICTABLE>
    1130:	15000008 	strne	r0, [r0, #-8]
    1134:	0000002c 	andeq	r0, r0, ip, lsr #32
    1138:	de041000 	cdple	0, 0, cr1, cr4, cr0, {0}
    113c:	10000008 	andne	r0, r0, r8
    1140:	0008cd04 	andeq	ip, r8, r4, lsl #26
    1144:	064f0900 	strbeq	r0, [pc], -r0, lsl #18
    1148:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
    114c:	250a0000 	strcs	r0, [sl, #-0]
    1150:	02000000 	andeq	r0, r0, #0
    1154:	0a092000 	beq	24915c <__bss_end+0x23360c>
    1158:	33040000 	movwcc	r0, #16384	; 0x4000
    115c:	045b1703 	ldrbeq	r1, [fp], #-1795	; 0xfffff8fd
    1160:	02200000 	eoreq	r0, r0, #0
    1164:	0400000a 	streq	r0, [r0], #-10
    1168:	611d0334 	tstvs	sp, r4, lsr r3
    116c:	21000004 	tstcs	r0, r4
    1170:	0000086c 	andeq	r0, r0, ip, ror #16
    1174:	af0e6706 	svcge	0x000e6706
    1178:	06000005 	streq	r0, [r0], -r5
    117c:	0000000c 	andeq	r0, r0, ip
    1180:	711c6107 	tstvc	ip, r7, lsl #2
    1184:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1188:	0000036d 	andeq	r0, r0, sp, ror #6
    118c:	08690814 	stmdaeq	r9!, {r2, r4, fp}^
    1190:	00000975 	andeq	r0, r0, r5, ror r9
    1194:	0003200c 	andeq	r2, r3, ip
    1198:	0f6b0800 	svceq	0x006b0800
    119c:	0000091a 	andeq	r0, r0, sl, lsl r9
    11a0:	04d90c00 	ldrbeq	r0, [r9], #3072	; 0xc00
    11a4:	6c080000 	stcvs	0, cr0, [r8], {-0}
    11a8:	00097a1f 	andeq	r7, r9, pc, lsl sl
    11ac:	f00c0400 			; <UNDEFINED> instruction: 0xf00c0400
    11b0:	08000003 	stmdaeq	r0, {r0, r1}
    11b4:	097a1f6d 	ldmdbeq	sl!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip}^
    11b8:	0c080000 	stceq	0, cr0, [r8], {-0}
    11bc:	00000342 	andeq	r0, r0, r2, asr #6
    11c0:	fe096e08 	cdp2	14, 0, cr6, cr9, cr8, {0}
    11c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    11c8:	0002eb0c 	andeq	lr, r2, ip, lsl #22
    11cc:	096f0800 	stmdbeq	pc!, {fp}^	; <UNPREDICTABLE>
    11d0:	000000fe 	strdeq	r0, [r0], -lr
    11d4:	26050010 			; <UNDEFINED> instruction: 0x26050010
    11d8:	10000009 	andne	r0, r0, r9
    11dc:	00097504 	andeq	r7, r9, r4, lsl #10
    11e0:	04f80600 	ldrbteq	r0, [r8], #1536	; 0x600
    11e4:	71080000 	mrsvc	r0, (UNDEF: 8)
    11e8:	0009261b 	andeq	r2, r9, fp, lsl r6
    11ec:	09800500 	stmibeq	r0, {r8, sl}
    11f0:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    11f4:	0c000005 	stceq	0, cr0, [r0], {5}
    11f8:	c6087308 	strgt	r7, [r8], -r8, lsl #6
    11fc:	0c000009 	stceq	0, cr0, [r0], {9}
    1200:	00000320 	andeq	r0, r0, r0, lsr #6
    1204:	1a0f7508 	bne	3de62c <__bss_end+0x3c8adc>
    1208:	00000009 	andeq	r0, r0, r9
    120c:	0004d90c 	andeq	sp, r4, ip, lsl #18
    1210:	1e760800 	cdpne	8, 7, cr0, cr6, cr0, {0}
    1214:	0000097a 	andeq	r0, r0, sl, ror r9
    1218:	03f00c04 	mvnseq	r0, #4, 24	; 0x400
    121c:	77080000 	strvc	r0, [r8, -r0]
    1220:	00097a1e 	andeq	r7, r9, lr, lsl sl
    1224:	06000800 	streq	r0, [r0], -r0, lsl #16
    1228:	00000460 	andeq	r0, r0, r0, ror #8
    122c:	91207908 			; <UNDEFINED> instruction: 0x91207908
    1230:	05000009 	streq	r0, [r0, #-9]
    1234:	000009c6 	andeq	r0, r0, r6, asr #19
    1238:	00057e0e 	andeq	r7, r5, lr, lsl #28
    123c:	7e081400 	cfcpysvc	mvf1, mvf8
    1240:	000a0c10 	andeq	r0, sl, r0, lsl ip
    1244:	047f0c00 	ldrbteq	r0, [pc], #-3072	; 124c <_start-0x6db4>
    1248:	80080000 	andhi	r0, r8, r0
    124c:	00007822 	andeq	r7, r0, r2, lsr #16
    1250:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1254:	08000003 	stmdaeq	r0, {r0, r1}
    1258:	0a0c1781 	beq	307064 <__bss_end+0x2f1514>
    125c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1260:	00000339 	andeq	r0, r0, r9, lsr r3
    1264:	d2198208 	andsle	r8, r9, #8, 4	; 0x80000000
    1268:	08000009 	stmdaeq	r0, {r0, r3}
    126c:	8c041000 	stchi	0, cr1, [r4], {-0}
    1270:	06000009 	streq	r0, [r0], -r9
    1274:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    1278:	d7038308 	strle	r8, [r3, -r8, lsl #6]
    127c:	22000009 	andcs	r0, r0, #9
    1280:	00000820 	andeq	r0, r0, r0, lsr #16
    1284:	5806b701 	stmdapl	r6, {r0, r8, r9, sl, ip, sp, pc}
    1288:	9800010f 	stmdals	r0, {r0, r1, r2, r3, r8}
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	000a539c 	muleq	sl, ip, r3
    1294:	08452300 	stmdaeq	r5, {r8, r9, sp}^
    1298:	b7010000 	strlt	r0, [r1, -r0]
    129c:	000a531e 	andeq	r5, sl, lr, lsl r3
    12a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    12a4:	0009b124 	andeq	fp, r9, r4, lsr #2
    12a8:	09b90100 	ldmibeq	r9!, {r8}
    12ac:	00000a59 	andeq	r0, r0, r9, asr sl
    12b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    12b4:	09800410 	stmibeq	r0, {r4, sl}
    12b8:	04100000 	ldreq	r0, [r0], #-0
    12bc:	00000a12 	andeq	r0, r0, r2, lsl sl
    12c0:	00099d22 	andeq	r9, r9, r2, lsr #26
    12c4:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
    12c8:	00010e80 	andeq	r0, r1, r0, lsl #29
    12cc:	000000d8 	ldrdeq	r0, [r0], -r8
    12d0:	0ab29c01 	beq	feca82dc <_estack+0xf6c982dc>
    12d4:	b1230000 			; <UNDEFINED> instruction: 0xb1230000
    12d8:	01000009 	tsteq	r0, r9
    12dc:	0a591a7e 	beq	1647cdc <__bss_end+0x163218c>
    12e0:	91020000 	mrsls	r0, (UNDEF: 2)
    12e4:	068b236c 	streq	r2, [fp], ip, ror #6
    12e8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    12ec:	000a532d 	andeq	r5, sl, sp, lsr #6
    12f0:	68910200 	ldmvs	r1, {r9}
    12f4:	0009e224 	andeq	lr, r9, r4, lsr #4
    12f8:	15800100 	strne	r0, [r0, #256]	; 0x100
    12fc:	00000a0c 	andeq	r0, r0, ip, lsl #20
    1300:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    1304:	00000a64 	andeq	r0, r0, r4, ror #20
    1308:	1a0e8101 	bne	3a1714 <__bss_end+0x38bbc4>
    130c:	02000009 	andeq	r0, r0, #9
    1310:	22007091 	andcs	r7, r0, #145	; 0x91
    1314:	00000733 	andeq	r0, r0, r3, lsr r7
    1318:	e8066701 	stmda	r6, {r0, r8, r9, sl, sp, lr}
    131c:	9800010d 	stmdals	r0, {r0, r2, r3, r8}
    1320:	01000000 	mrseq	r0, (UNDEF: 0)
    1324:	000af69c 	muleq	sl, ip, r6
    1328:	09b12300 	ldmibeq	r1!, {r8, r9, sp}
    132c:	67010000 	strvs	r0, [r1, -r0]
    1330:	000a591d 	andeq	r5, sl, sp, lsl r9
    1334:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1338:	00068b23 	andeq	r8, r6, r3, lsr #22
    133c:	30670100 	rsbcc	r0, r7, r0, lsl #2
    1340:	00000a53 	andeq	r0, r0, r3, asr sl
    1344:	24689102 	strbtcs	r9, [r8], #-258	; 0xfffffefe
    1348:	00000318 	andeq	r0, r0, r8, lsl r3
    134c:	0c166901 			; <UNDEFINED> instruction: 0x0c166901
    1350:	0200000a 	andeq	r0, r0, #10
    1354:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
    1358:	0000076e 	andeq	r0, r0, lr, ror #14
    135c:	bc066001 	stclt	0, cr6, [r6], {1}
    1360:	2c00010d 	stfcss	f0, [r0], {13}
    1364:	01000000 	mrseq	r0, (UNDEF: 0)
    1368:	000b1c9c 	muleq	fp, ip, ip
    136c:	072c2300 	streq	r2, [ip, -r0, lsl #6]!
    1370:	60010000 	andvs	r0, r1, r0
    1374:	000a5326 	andeq	r5, sl, r6, lsr #6
    1378:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    137c:	0a222500 	beq	88a784 <__bss_end+0x874c34>
    1380:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1384:	010d5406 	tsteq	sp, r6, lsl #8
    1388:	00006800 	andeq	r6, r0, r0, lsl #16
    138c:	239c0100 	orrscs	r0, ip, #0, 2
    1390:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    1394:	591e4c01 	ldmdbpl	lr, {r0, sl, fp, lr}
    1398:	0200000a 	andeq	r0, r0, #10
    139c:	00007491 	muleq	r0, r1, r4
    13a0:	0000101e 	andeq	r1, r0, lr, lsl r0
    13a4:	05cd0004 	strbeq	r0, [sp, #4]
    13a8:	01040000 	mrseq	r0, (UNDEF: 4)
    13ac:	00000078 	andeq	r0, r0, r8, ror r0
    13b0:	000cfc0c 	andeq	pc, ip, ip, lsl #24
    13b4:	0000f800 	andeq	pc, r0, r0, lsl #16
    13b8:	010ff000 	mrseq	pc, CPSR	; <UNPREDICTABLE>
    13bc:	000bb000 	andeq	fp, fp, r0
    13c0:	00079a00 	andeq	r9, r7, r0, lsl #20
    13c4:	0b2b0200 	bleq	ac1bcc <__bss_end+0xaac07c>
    13c8:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    13cc:	00003117 	andeq	r3, r0, r7, lsl r1
    13d0:	07040300 	streq	r0, [r4, -r0, lsl #6]
    13d4:	0000066a 	andeq	r0, r0, sl, ror #12
    13d8:	69050404 	stmdbvs	r5, {r2, sl}
    13dc:	0300746e 	movweq	r7, #1134	; 0x46e
    13e0:	011f0508 	tsteq	pc, r8, lsl #10
    13e4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    13e8:	00019b04 	andeq	r9, r1, r4, lsl #22
    13ec:	08130500 	ldmdaeq	r3, {r8, sl}
    13f0:	65020000 	strvs	r0, [r2, #-0]
    13f4:	00311701 	eorseq	r1, r1, r1, lsl #14
    13f8:	01030000 	mrseq	r0, (UNDEF: 3)
    13fc:	0008a606 	andeq	sl, r8, r6, lsl #12
    1400:	08010300 	stmdaeq	r1, {r8, r9}
    1404:	000008a4 	andeq	r0, r0, r4, lsr #17
    1408:	bb050203 	bllt	141c1c <__bss_end+0x12c0cc>
    140c:	03000008 	movweq	r0, #8
    1410:	00590702 	subseq	r0, r9, r2, lsl #14
    1414:	04030000 	streq	r0, [r3], #-0
    1418:	00012405 	andeq	r2, r1, r5, lsl #8
    141c:	00760600 	rsbseq	r0, r6, r0, lsl #12
    1420:	04030000 	streq	r0, [r3], #-0
    1424:	00066507 	andeq	r6, r6, r7, lsl #10
    1428:	00820600 	addeq	r0, r2, r0, lsl #12
    142c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1430:	00066007 	andeq	r6, r6, r7
    1434:	08810200 	stmeq	r1, {r9}
    1438:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    143c:	0000760e 	andeq	r7, r0, lr, lsl #12
    1440:	09a90200 	stmibeq	r9!, {r9}
    1444:	74030000 	strvc	r0, [r3], #-0
    1448:	0000760e 	andeq	r7, r0, lr, lsl #12
    144c:	03040700 	movweq	r0, #18176	; 0x4700
    1450:	00cf03a5 	sbceq	r0, pc, r5, lsr #7
    1454:	0d080000 	stceq	0, cr0, [r8, #-0]
    1458:	03000008 	movweq	r0, #8
    145c:	004d0ca7 	subeq	r0, sp, r7, lsr #25
    1460:	bf080000 	svclt	0x00080000
    1464:	03000007 	movweq	r0, #7
    1468:	00cf13a8 	sbceq	r1, pc, r8, lsr #7
    146c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1470:	00000061 	andeq	r0, r0, r1, rrx
    1474:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1478:	0000310a 	andeq	r3, r0, sl, lsl #2
    147c:	0b000300 	bleq	2084 <_start-0x5f7c>
    1480:	09a20308 	stmibeq	r2!, {r3, r8, r9}
    1484:	00000103 	andeq	r0, r0, r3, lsl #2
    1488:	0009870c 	andeq	r8, r9, ip, lsl #14
    148c:	07a40300 	streq	r0, [r4, r0, lsl #6]!
    1490:	00000038 	andeq	r0, r0, r8, lsr r0
    1494:	098f0c00 	stmibeq	pc, {sl, fp}	; <UNPREDICTABLE>
    1498:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    149c:	0000ad05 	andeq	sl, r0, r5, lsl #26
    14a0:	02000400 	andeq	r0, r0, #0, 8
    14a4:	000008e3 	andeq	r0, r0, r3, ror #17
    14a8:	df03aa03 	svcle	0x0003aa03
    14ac:	0d000000 	stceq	0, cr0, [r0, #-0]
    14b0:	010f0e04 	tsteq	pc, r4, lsl #28
    14b4:	ed020000 	stc	0, cr0, [r2, #-0]
    14b8:	04000009 	streq	r0, [r0], #-9
    14bc:	00821916 	addeq	r1, r2, r6, lsl r9
    14c0:	92020000 	andls	r0, r2, #0
    14c4:	05000008 	streq	r0, [r0, #-8]
    14c8:	00380d0c 	eorseq	r0, r8, ip, lsl #26
    14cc:	82020000 	andhi	r0, r2, #0
    14d0:	04000007 	streq	r0, [r0], #-7
    14d4:	01221b23 			; <UNDEFINED> instruction: 0x01221b23
    14d8:	930f0000 	movwls	r0, #61440	; 0xf000
    14dc:	18000007 	stmdane	r0, {r0, r1, r2}
    14e0:	94083404 	strls	r3, [r8], #-1028	; 0xfffffbfc
    14e4:	0c000001 	stceq	0, cr0, [r0], {1}
    14e8:	00000904 	andeq	r0, r0, r4, lsl #18
    14ec:	94133604 	ldrls	r3, [r3], #-1540	; 0xfffff9fc
    14f0:	00000001 	andeq	r0, r0, r1
    14f4:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    14f8:	38073704 	stmdacc	r7, {r2, r8, r9, sl, ip, sp}
    14fc:	04000000 	streq	r0, [r0], #-0
    1500:	0009440c 	andeq	r4, r9, ip, lsl #8
    1504:	0b370400 	bleq	dc250c <__bss_end+0xdac9bc>
    1508:	00000038 	andeq	r0, r0, r8, lsr r0
    150c:	1b490c08 	blne	1244534 <__bss_end+0x122e9e4>
    1510:	37040000 	strcc	r0, [r4, -r0]
    1514:	00003814 	andeq	r3, r0, r4, lsl r8
    1518:	320c0c00 	andcc	r0, ip, #0, 24
    151c:	0400000a 	streq	r0, [r0], #-10
    1520:	00381b37 	eorseq	r1, r8, r7, lsr fp
    1524:	10100000 	andsne	r0, r0, r0
    1528:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    152c:	019a0b38 	orrseq	r0, sl, r8, lsr fp
    1530:	00140000 	andseq	r0, r4, r0
    1534:	013a0411 	teqeq	sl, r1, lsl r4
    1538:	16090000 	strne	r0, [r9], -r0
    153c:	aa000001 	bge	1548 <_start-0x6ab8>
    1540:	0a000001 	beq	154c <_start-0x6ab4>
    1544:	00000031 	andeq	r0, r0, r1, lsr r0
    1548:	ba0f0000 	blt	3c1550 <__bss_end+0x3aba00>
    154c:	24000007 	strcs	r0, [r0], #-7
    1550:	2d083c04 	stccs	12, cr3, [r8, #-16]
    1554:	0c000002 	stceq	0, cr0, [r0], {2}
    1558:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    155c:	38093e04 	stmdacc	r9, {r2, r9, sl, fp, ip, sp}
    1560:	00000000 	andeq	r0, r0, r0
    1564:	0009b80c 	andeq	fp, r9, ip, lsl #16
    1568:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    156c:	00000038 	andeq	r0, r0, r8, lsr r0
    1570:	06cb0c04 	strbeq	r0, [fp], r4, lsl #24
    1574:	40040000 	andmi	r0, r4, r0
    1578:	00003809 	andeq	r3, r0, r9, lsl #16
    157c:	c40c0800 	strgt	r0, [ip], #-2048	; 0xfffff800
    1580:	0400000a 	streq	r0, [r0], #-10
    1584:	00380941 	eorseq	r0, r8, r1, asr #18
    1588:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    158c:	0000085b 	andeq	r0, r0, fp, asr r8
    1590:	38094204 	stmdacc	r9, {r2, r9, lr}
    1594:	10000000 	andne	r0, r0, r0
    1598:	00083b0c 	andeq	r3, r8, ip, lsl #22
    159c:	09430400 	stmdbeq	r3, {sl}^
    15a0:	00000038 	andeq	r0, r0, r8, lsr r0
    15a4:	0a370c14 	beq	dc45fc <__bss_end+0xdaeaac>
    15a8:	44040000 	strmi	r0, [r4], #-0
    15ac:	00003809 	andeq	r3, r0, r9, lsl #16
    15b0:	c50c1800 	strgt	r1, [ip, #-2048]	; 0xfffff800
    15b4:	04000008 	streq	r0, [r0], #-8
    15b8:	00380945 	eorseq	r0, r8, r5, asr #18
    15bc:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    15c0:	00000a8b 	andeq	r0, r0, fp, lsl #21
    15c4:	38094604 	stmdacc	r9, {r2, r9, sl, lr}
    15c8:	20000000 	andcs	r0, r0, r0
    15cc:	06da1200 	ldrbeq	r1, [sl], r0, lsl #4
    15d0:	01080000 	mrseq	r0, (UNDEF: 8)
    15d4:	72084f04 	andvc	r4, r8, #4, 30
    15d8:	0c000002 	stceq	0, cr0, [r0], {2}
    15dc:	00000761 	andeq	r0, r0, r1, ror #14
    15e0:	720a5004 	andvc	r5, sl, #4
    15e4:	00000002 	andeq	r0, r0, r2
    15e8:	0006150c 	andeq	r1, r6, ip, lsl #10
    15ec:	09510400 	ldmdbeq	r1, {sl}^
    15f0:	00000272 	andeq	r0, r0, r2, ror r2
    15f4:	09d41380 	ldmibeq	r4, {r7, r8, r9, ip}^
    15f8:	53040000 	movwpl	r0, #16384	; 0x4000
    15fc:	0001160a 	andeq	r1, r1, sl, lsl #12
    1600:	13010000 	movwne	r0, #4096	; 0x1000
    1604:	00000704 	andeq	r0, r0, r4, lsl #14
    1608:	160a5604 	strne	r5, [sl], -r4, lsl #12
    160c:	04000001 	streq	r0, [r0], #-1
    1610:	0f090001 	svceq	0x00090001
    1614:	82000001 	andhi	r0, r0, #1
    1618:	0a000002 	beq	1628 <_start-0x69d8>
    161c:	00000031 	andeq	r0, r0, r1, lsr r0
    1620:	6412001f 	ldrvs	r0, [r2], #-31	; 0xffffffe1
    1624:	90000008 	andls	r0, r0, r8
    1628:	08620401 	stmdaeq	r2!, {r0, sl}^
    162c:	000002c5 	andeq	r0, r0, r5, asr #5
    1630:	0009040c 	andeq	r0, r9, ip, lsl #8
    1634:	12630400 	rsbne	r0, r3, #0, 8
    1638:	000002c5 	andeq	r0, r0, r5, asr #5
    163c:	091c0c00 	ldmdbeq	ip, {sl, fp}
    1640:	64040000 	strvs	r0, [r4], #-0
    1644:	00003806 	andeq	r3, r0, r6, lsl #16
    1648:	690c0400 	stmdbvs	ip, {sl}
    164c:	04000007 	streq	r0, [r0], #-7
    1650:	02cb0966 	sbceq	r0, fp, #1671168	; 0x198000
    1654:	0c080000 	stceq	0, cr0, [r8], {-0}
    1658:	000006da 	ldrdeq	r0, [r0], -sl
    165c:	2d1e6704 	ldccs	7, cr6, [lr, #-16]
    1660:	88000002 	stmdahi	r0, {r1}
    1664:	82041100 	andhi	r1, r4, #0, 2
    1668:	09000002 	stmdbeq	r0, {r1}
    166c:	000002db 	ldrdeq	r0, [r0], -fp
    1670:	000002db 	ldrdeq	r0, [r0], -fp
    1674:	0000310a 	andeq	r3, r0, sl, lsl #2
    1678:	11001f00 	tstne	r0, r0, lsl #30
    167c:	0002e104 	andeq	lr, r2, r4, lsl #2
    1680:	cf0f1400 	svcgt	0x000f1400
    1684:	08000008 	stmdaeq	r0, {r3}
    1688:	0a087a04 	beq	21fea0 <__bss_end+0x20a350>
    168c:	0c000003 	stceq	0, cr0, [r0], {3}
    1690:	000006c5 	andeq	r0, r0, r5, asr #13
    1694:	0a117b04 	beq	4602ac <__bss_end+0x44a75c>
    1698:	00000003 	andeq	r0, r0, r3
    169c:	0006210c 	andeq	r2, r6, ip, lsl #2
    16a0:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    16a4:	00000038 	andeq	r0, r0, r8, lsr r0
    16a8:	04110004 	ldreq	r0, [r1], #-4
    16ac:	00000061 	andeq	r0, r0, r1, rrx
    16b0:	0008ee0f 	andeq	lr, r8, pc, lsl #28
    16b4:	ba046800 	blt	11b6bc <__bss_end+0x105b6c>
    16b8:	00045308 	andeq	r5, r4, r8, lsl #6
    16bc:	705f1000 	subsvc	r1, pc, r0
    16c0:	12bb0400 	adcsne	r0, fp, #0, 8
    16c4:	0000030a 	andeq	r0, r0, sl, lsl #6
    16c8:	725f1000 	subsvc	r1, pc, #0
    16cc:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    16d0:	00000038 	andeq	r0, r0, r8, lsr r0
    16d4:	775f1004 	ldrbvc	r1, [pc, -r4]
    16d8:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    16dc:	00000038 	andeq	r0, r0, r8, lsr r0
    16e0:	06fd0c08 	ldrbteq	r0, [sp], r8, lsl #24
    16e4:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    16e8:	00006809 	andeq	r6, r0, r9, lsl #16
    16ec:	d60c0c00 	strle	r0, [ip], -r0, lsl #24
    16f0:	04000007 	streq	r0, [r0], #-7
    16f4:	006809bf 	strhteq	r0, [r8], #-159	; 0xffffff61
    16f8:	100e0000 	andne	r0, lr, r0
    16fc:	0066625f 	rsbeq	r6, r6, pc, asr r2
    1700:	e211c004 	ands	ip, r1, #4
    1704:	10000002 	andne	r0, r0, r2
    1708:	0006770c 	andeq	r7, r6, ip, lsl #14
    170c:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    1710:	00000038 	andeq	r0, r0, r8, lsr r0
    1714:	06e80c18 	usateq	r0, #8, r8, lsl #24
    1718:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    171c:	00010f0a 	andeq	r0, r1, sl, lsl #30
    1720:	aa0c1c00 	bge	308728 <__bss_end+0x2f2bd8>
    1724:	04000007 	streq	r0, [r0], #-7
    1728:	05d71dca 	ldrbeq	r1, [r7, #3530]	; 0xdca
    172c:	0c200000 	stceq	0, cr0, [r0], #-0
    1730:	00000834 	andeq	r0, r0, r4, lsr r8
    1734:	011dcc04 	tsteq	sp, r4, lsl #24
    1738:	24000006 	strcs	r0, [r0], #-6
    173c:	0009970c 	andeq	r9, r9, ip, lsl #14
    1740:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 1748 <_start-0x68b8>
    1744:	00000625 	andeq	r0, r0, r5, lsr #12
    1748:	0aa50c28 	beq	fe9447f0 <_estack+0xf69347f0>
    174c:	d0040000 	andle	r0, r4, r0
    1750:	00063f09 	andeq	r3, r6, r9, lsl #30
    1754:	5f102c00 	svcpl	0x00102c00
    1758:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    175c:	02e211d3 	rsceq	r1, r2, #-1073741772	; 0xc0000034
    1760:	10300000 	eorsne	r0, r0, r0
    1764:	0070755f 	rsbseq	r7, r0, pc, asr r5
    1768:	0a12d404 	beq	4b6780 <__bss_end+0x4a0c30>
    176c:	38000003 	stmdacc	r0, {r0, r1}
    1770:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
    1774:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    1778:	00000038 	andeq	r0, r0, r8, lsr r0
    177c:	06bf0c3c 			; <UNDEFINED> instruction: 0x06bf0c3c
    1780:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    1784:	00064511 	andeq	r4, r6, r1, lsl r5
    1788:	7d0c4000 	stcvc	0, cr4, [ip, #-0]
    178c:	0400000a 	streq	r0, [r0], #-10
    1790:	065511d9 			; <UNDEFINED> instruction: 0x065511d9
    1794:	10430000 	subne	r0, r3, r0
    1798:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    179c:	e211dc04 	ands	sp, r1, #4, 24	; 0x400
    17a0:	44000002 	strmi	r0, [r0], #-2
    17a4:	0007130c 	andeq	r1, r7, ip, lsl #6
    17a8:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    17ac:	00000038 	andeq	r0, r0, r8, lsr r0
    17b0:	07240c4c 	streq	r0, [r4, -ip, asr #24]!
    17b4:	e0040000 	and	r0, r4, r0
    17b8:	0000950a 	andeq	r9, r0, sl, lsl #10
    17bc:	3a0c5000 	bcc	3157c4 <__bss_end+0x2ffc74>
    17c0:	04000006 	streq	r0, [r0], #-6
    17c4:	047112e3 	ldrbteq	r1, [r1], #-739	; 0xfffffd1d
    17c8:	0c540000 	mraeq	r0, r4, acc0
    17cc:	0000081a 	andeq	r0, r0, sl, lsl r8
    17d0:	2e0ce704 	cdpcs	7, 0, cr14, cr12, cr4, {0}
    17d4:	58000001 	stmdapl	r0, {r0}
    17d8:	0008f60c 	andeq	pc, r8, ip, lsl #12
    17dc:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    17e0:	00000103 	andeq	r0, r0, r3, lsl #2
    17e4:	082c0c5c 	stmdaeq	ip!, {r2, r3, r4, r6, sl, fp}
    17e8:	ea040000 	b	1017f0 <__bss_end+0xebca0>
    17ec:	00003809 	andeq	r3, r0, r9, lsl #16
    17f0:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    17f4:	00000038 	andeq	r0, r0, r8, lsr r0
    17f8:	00000471 	andeq	r0, r0, r1, ror r4
    17fc:	00047116 	andeq	r7, r4, r6, lsl r1
    1800:	010f1600 	tsteq	pc, r0, lsl #12
    1804:	c5160000 	ldrgt	r0, [r6, #-0]
    1808:	16000005 	strne	r0, [r0], -r5
    180c:	00000038 	andeq	r0, r0, r8, lsr r0
    1810:	7c041100 	stfvcs	f1, [r4], {-0}
    1814:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1818:	00000471 	andeq	r0, r0, r1, ror r4
    181c:	000a7617 	andeq	r7, sl, r7, lsl r6
    1820:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    1824:	c5080265 	strgt	r0, [r8, #-613]	; 0xfffffd9b
    1828:	18000005 	stmdane	r0, {r0, r2}
    182c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    1830:	07026704 	streq	r6, [r2, -r4, lsl #14]
    1834:	00000038 	andeq	r0, r0, r8, lsr r0
    1838:	070c1800 	streq	r1, [ip, -r0, lsl #16]
    183c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    1840:	06b10b02 	ldrteq	r0, [r1], r2, lsl #22
    1844:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1848:	000007c6 	andeq	r0, r0, r6, asr #15
    184c:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    1850:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    1854:	078b1808 	streq	r1, [fp, r8, lsl #16]
    1858:	6c040000 	stcvs	0, cr0, [r4], {-0}
    185c:	06b11e02 	ldrteq	r1, [r1], r2, lsl #28
    1860:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    1864:	00000917 	andeq	r0, r0, r7, lsl r9
    1868:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    186c:	00000038 	andeq	r0, r0, r8, lsr r0
    1870:	062f1810 			; <UNDEFINED> instruction: 0x062f1810
    1874:	6f040000 	svcvs	0x00040000
    1878:	08b10802 	ldmeq	r1!, {r1, fp}
    187c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1880:	0000092b 	andeq	r0, r0, fp, lsr #18
    1884:	07027204 	streq	r7, [r2, -r4, lsl #4]
    1888:	00000038 	andeq	r0, r0, r8, lsr r0
    188c:	19b61830 	ldmibne	r6!, {r4, r5, fp, ip}
    1890:	73040000 	movwvc	r0, #16384	; 0x4000
    1894:	08c61602 	stmiaeq	r6, {r1, r9, sl, ip}^
    1898:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    189c:	00000876 	andeq	r0, r0, r6, ror r8
    18a0:	07027504 	streq	r7, [r2, -r4, lsl #10]
    18a4:	00000038 	andeq	r0, r0, r8, lsr r0
    18a8:	09211838 	stmdbeq	r1!, {r3, r4, r5, fp, ip}
    18ac:	77040000 	strvc	r0, [r4, -r0]
    18b0:	08d70a02 	ldmeq	r7, {r1, r9, fp}^
    18b4:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    18b8:	00000805 	andeq	r0, r0, r5, lsl #16
    18bc:	13027a04 	movwne	r7, #10756	; 0x2a04
    18c0:	00000194 	muleq	r0, r4, r1
    18c4:	07b01840 	ldreq	r1, [r0, r0, asr #16]!
    18c8:	7b040000 	blvc	1018d0 <__bss_end+0xebd80>
    18cc:	00380702 	eorseq	r0, r8, r2, lsl #14
    18d0:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    18d4:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    18d8:	13027c04 	movwne	r7, #11268	; 0x2c04
    18dc:	00000194 	muleq	r0, r4, r1
    18e0:	08881848 	stmeq	r8, {r3, r6, fp, ip}
    18e4:	7d040000 	stcvc	0, cr0, [r4, #-0]
    18e8:	08dd1402 	ldmeq	sp, {r1, sl, ip}^
    18ec:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    18f0:	000007ce 	andeq	r0, r0, lr, asr #15
    18f4:	07028004 	streq	r8, [r2, -r4]
    18f8:	00000038 	andeq	r0, r0, r8, lsr r0
    18fc:	071c1850 			; <UNDEFINED> instruction: 0x071c1850
    1900:	81040000 	mrshi	r0, (UNDEF: 4)
    1904:	05c50902 	strbeq	r0, [r5, #2306]	; 0x902
    1908:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    190c:	000006f8 	strdeq	r0, [r0], -r8
    1910:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    1914:	0000088c 	andeq	r0, r0, ip, lsl #17
    1918:	08641958 	stmdaeq	r4!, {r3, r4, r6, r8, fp, ip}^
    191c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    1920:	02c51302 	sbceq	r1, r5, #134217728	; 0x8000000
    1924:	01480000 	mrseq	r0, (UNDEF: 72)
    1928:	0007e319 	andeq	lr, r7, r9, lsl r3
    192c:	02a90400 	adceq	r0, r9, #0, 8
    1930:	00028212 	andeq	r8, r2, r2, lsl r2
    1934:	19014c00 	stmdbne	r1, {sl, fp, lr}
    1938:	00000a5a 	andeq	r0, r0, sl, asr sl
    193c:	0c02ad04 	stceq	13, cr10, [r2], {4}
    1940:	000008ee 	andeq	r0, r0, lr, ror #17
    1944:	f01902dc 			; <UNDEFINED> instruction: 0xf01902dc
    1948:	04000006 	streq	r0, [r0], #-6
    194c:	721002b2 	andsvc	r0, r0, #536870923	; 0x2000000b
    1950:	e0000006 	and	r0, r0, r6
    1954:	06d51902 	ldrbeq	r1, [r5], r2, lsl #18
    1958:	b4040000 	strlt	r0, [r4], #-0
    195c:	08fa0a02 	ldmeq	sl!, {r1, r9, fp}^
    1960:	02ec0000 	rsceq	r0, ip, #0
    1964:	cb041100 	blgt	105d6c <__bss_end+0xf021c>
    1968:	03000005 	movweq	r0, #5
    196c:	08ad0801 	stmiaeq	sp!, {r0, fp}
    1970:	cb0e0000 	blgt	381978 <__bss_end+0x36be28>
    1974:	11000005 	tstne	r0, r5
    1978:	00045304 	andeq	r5, r4, r4, lsl #6
    197c:	00381500 	eorseq	r1, r8, r0, lsl #10
    1980:	05fb0000 	ldrbeq	r0, [fp, #0]!
    1984:	71160000 	tstvc	r6, r0
    1988:	16000004 	strne	r0, [r0], -r4
    198c:	0000010f 	andeq	r0, r0, pc, lsl #2
    1990:	0005fb16 	andeq	pc, r5, r6, lsl fp	; <UNPREDICTABLE>
    1994:	00381600 	eorseq	r1, r8, r0, lsl #12
    1998:	11000000 	mrsne	r0, (UNDEF: 0)
    199c:	0005d204 	andeq	sp, r5, r4, lsl #4
    19a0:	dd041100 	stfles	f1, [r4, #-0]
    19a4:	15000005 	strne	r0, [r0, #-5]
    19a8:	000000a1 	andeq	r0, r0, r1, lsr #1
    19ac:	00000625 	andeq	r0, r0, r5, lsr #12
    19b0:	00047116 	andeq	r7, r4, r6, lsl r1
    19b4:	010f1600 	tsteq	pc, r0, lsl #12
    19b8:	a1160000 	tstge	r6, r0
    19bc:	16000000 	strne	r0, [r0], -r0
    19c0:	00000038 	andeq	r0, r0, r8, lsr r0
    19c4:	07041100 	streq	r1, [r4, -r0, lsl #2]
    19c8:	15000006 	strne	r0, [r0, #-6]
    19cc:	00000038 	andeq	r0, r0, r8, lsr r0
    19d0:	0000063f 	andeq	r0, r0, pc, lsr r6
    19d4:	00047116 	andeq	r7, r4, r6, lsl r1
    19d8:	010f1600 	tsteq	pc, r0, lsl #12
    19dc:	11000000 	mrsne	r0, (UNDEF: 0)
    19e0:	00062b04 	andeq	r2, r6, r4, lsl #22
    19e4:	00610900 	rsbeq	r0, r1, r0, lsl #18
    19e8:	06550000 	ldrbeq	r0, [r5], -r0
    19ec:	310a0000 	mrscc	r0, (UNDEF: 10)
    19f0:	02000000 	andeq	r0, r0, #0
    19f4:	00610900 	rsbeq	r0, r1, r0, lsl #18
    19f8:	06650000 	strbteq	r0, [r5], -r0
    19fc:	310a0000 	mrscc	r0, (UNDEF: 10)
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	08dc0500 	ldmeq	ip, {r8, sl}^
    1a08:	24040000 	strcs	r0, [r4], #-0
    1a0c:	03101a01 	tsteq	r0, #4096	; 0x1000
    1a10:	411a0000 	tstmi	sl, r0
    1a14:	0c00000a 	stceq	0, cr0, [r0], {10}
    1a18:	08012804 	stmdaeq	r1, {r2, fp, sp}
    1a1c:	000006ab 	andeq	r0, r0, fp, lsr #13
    1a20:	00090418 	andeq	r0, r9, r8, lsl r4
    1a24:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    1a28:	0006ab11 	andeq	sl, r6, r1, lsl fp
    1a2c:	dc180000 	ldcle	0, cr0, [r8], {-0}
    1a30:	04000007 	streq	r0, [r0], #-7
    1a34:	3807012b 	stmdacc	r7, {r0, r1, r3, r5, r8}
    1a38:	04000000 	streq	r0, [r0], #-0
    1a3c:	0008d618 	andeq	sp, r8, r8, lsl r6
    1a40:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    1a44:	0006b10b 	andeq	fp, r6, fp, lsl #2
    1a48:	11000800 	tstne	r0, r0, lsl #16
    1a4c:	00067204 	andeq	r7, r6, r4, lsl #4
    1a50:	65041100 	strvs	r1, [r4, #-256]	; 0xffffff00
    1a54:	1a000006 	bne	1a74 <_start-0x658c>
    1a58:	00000627 	andeq	r0, r0, r7, lsr #12
    1a5c:	0144040e 	cmpeq	r4, lr, lsl #8
    1a60:	0006f008 	andeq	pc, r6, r8
    1a64:	09811800 	stmibeq	r1, {fp, ip}
    1a68:	45040000 	strmi	r0, [r4, #-0]
    1a6c:	06f01201 	ldrbteq	r1, [r0], r1, lsl #4
    1a70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1a74:	000009c1 	andeq	r0, r0, r1, asr #19
    1a78:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    1a7c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a80:	09dd1806 	ldmibeq	sp, {r1, r2, fp, ip}^
    1a84:	47040000 	strmi	r0, [r4, -r0]
    1a88:	006f1201 	rsbeq	r1, pc, r1, lsl #4
    1a8c:	000c0000 	andeq	r0, ip, r0
    1a90:	00006f09 	andeq	r6, r0, r9, lsl #30
    1a94:	00070000 	andeq	r0, r7, r0
    1a98:	00310a00 	eorseq	r0, r1, r0, lsl #20
    1a9c:	00020000 	andeq	r0, r2, r0
    1aa0:	8504d01b 	strhi	sp, [r4, #-27]	; 0xffffffe5
    1aa4:	08150702 	ldmdaeq	r5, {r1, r8, r9, sl}
    1aa8:	15180000 	ldrne	r0, [r8, #-0]
    1aac:	0400000a 	streq	r0, [r0], #-10
    1ab0:	31180287 	tstcc	r8, r7, lsl #5
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	0009c718 	andeq	ip, r9, r8, lsl r7
    1abc:	02880400 	addeq	r0, r8, #0, 8
    1ac0:	0005c512 	andeq	ip, r5, r2, lsl r5
    1ac4:	f8180400 			; <UNDEFINED> instruction: 0xf8180400
    1ac8:	04000007 	streq	r0, [r0], #-7
    1acc:	15100289 	ldrne	r0, [r0, #-649]	; 0xfffffd77
    1ad0:	08000008 	stmdaeq	r0, {r3}
    1ad4:	000a9618 	andeq	r9, sl, r8, lsl r6
    1ad8:	028a0400 	addeq	r0, sl, #0, 8
    1adc:	0001aa17 	andeq	sl, r1, r7, lsl sl
    1ae0:	9b182400 	blls	60aae8 <__bss_end+0x5f4f98>
    1ae4:	04000007 	streq	r0, [r0], #-7
    1ae8:	380f028b 	stmdacc	pc, {r0, r1, r3, r7, r9}	; <UNPREDICTABLE>
    1aec:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1af0:	0008ff18 	andeq	pc, r8, r8, lsl pc	; <UNPREDICTABLE>
    1af4:	028c0400 	addeq	r0, ip, #0, 8
    1af8:	00008e2c 	andeq	r8, r0, ip, lsr #28
    1afc:	ac185000 	ldcge	0, cr5, [r8], {-0}
    1b00:	0400000a 	streq	r0, [r0], #-10
    1b04:	b71a028d 	ldrlt	r0, [sl, -sp, lsl #5]
    1b08:	58000006 	stmdapl	r0, {r1, r2}
    1b0c:	00090a18 	andeq	r0, r9, r8, lsl sl
    1b10:	028e0400 	addeq	r0, lr, #0, 8
    1b14:	00010316 	andeq	r0, r1, r6, lsl r3
    1b18:	b1186800 	tstlt	r8, r0, lsl #16
    1b1c:	0400000a 	streq	r0, [r0], #-10
    1b20:	0316028f 	tsteq	r6, #-268435448	; 0xf0000008
    1b24:	70000001 	andvc	r0, r0, r1
    1b28:	0006a818 	andeq	sl, r6, r8, lsl r8
    1b2c:	02900400 	addseq	r0, r0, #0, 8
    1b30:	00010316 	andeq	r0, r1, r6, lsl r3
    1b34:	50187800 	andspl	r7, r8, r0, lsl #16
    1b38:	0400000a 	streq	r0, [r0], #-10
    1b3c:	25100291 	ldrcs	r0, [r0, #-657]	; 0xfffffd6f
    1b40:	80000008 	andhi	r0, r0, r8
    1b44:	0007ec18 	andeq	lr, r7, r8, lsl ip
    1b48:	02920400 	addseq	r0, r2, #0, 8
    1b4c:	00083510 	andeq	r3, r8, r0, lsl r5
    1b50:	f5188800 			; <UNDEFINED> instruction: 0xf5188800
    1b54:	04000009 	streq	r0, [r0], #-9
    1b58:	380f0293 	stmdacc	pc, {r0, r1, r4, r7, r9}	; <UNPREDICTABLE>
    1b5c:	a0000000 	andge	r0, r0, r0
    1b60:	00075318 	andeq	r5, r7, r8, lsl r3
    1b64:	02940400 	addseq	r0, r4, #0, 8
    1b68:	00010316 	andeq	r0, r1, r6, lsl r3
    1b6c:	9918a400 	ldmdbls	r8, {sl, sp, pc}
    1b70:	04000006 	streq	r0, [r0], #-6
    1b74:	03160295 	tsteq	r6, #1342177289	; 0x50000009
    1b78:	ac000001 	stcge	0, cr0, [r0], {1}
    1b7c:	00074218 	andeq	r4, r7, r8, lsl r2
    1b80:	02960400 	addseq	r0, r6, #0, 8
    1b84:	00010316 	andeq	r0, r1, r6, lsl r3
    1b88:	4018b400 	andsmi	fp, r8, r0, lsl #8
    1b8c:	04000006 	streq	r0, [r0], #-6
    1b90:	03160297 	tsteq	r6, #1879048201	; 0x70000009
    1b94:	bc000001 	stclt	0, cr0, [r0], {1}
    1b98:	00064f18 	andeq	r4, r6, r8, lsl pc
    1b9c:	02980400 	addseq	r0, r8, #0, 8
    1ba0:	00010316 	andeq	r0, r1, r6, lsl r3
    1ba4:	b218c400 	andslt	ip, r8, #0, 8
    1ba8:	04000008 	streq	r0, [r0], #-8
    1bac:	38080299 	stmdacc	r8, {r0, r3, r4, r7, r9}
    1bb0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1bb4:	05cb0900 	strbeq	r0, [fp, #2304]	; 0x900
    1bb8:	08250000 	stmdaeq	r5!, {}	; <UNPREDICTABLE>
    1bbc:	310a0000 	mrscc	r0, (UNDEF: 10)
    1bc0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1bc4:	05cb0900 	strbeq	r0, [fp, #2304]	; 0x900
    1bc8:	08350000 	ldmdaeq	r5!, {}	; <UNPREDICTABLE>
    1bcc:	310a0000 	mrscc	r0, (UNDEF: 10)
    1bd0:	07000000 	streq	r0, [r0, -r0]
    1bd4:	05cb0900 	strbeq	r0, [fp, #2304]	; 0x900
    1bd8:	08450000 	stmdaeq	r5, {}^	; <UNPREDICTABLE>
    1bdc:	310a0000 	mrscc	r0, (UNDEF: 10)
    1be0:	17000000 	strne	r0, [r0, -r0]
    1be4:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    1be8:	6c07029e 	sfmvs	f0, 4, [r7], {158}	; 0x9e
    1bec:	18000008 	stmdane	r0, {r3}
    1bf0:	00000854 	andeq	r0, r0, r4, asr r8
    1bf4:	1b02a104 	blne	aa00c <__bss_end+0x944bc>
    1bf8:	0000086c 	andeq	r0, r0, ip, ror #16
    1bfc:	0a471800 	beq	11c7c04 <__bss_end+0x11b20b4>
    1c00:	a2040000 	andge	r0, r4, #0
    1c04:	087c1802 	ldmdaeq	ip!, {r1, fp, ip}^
    1c08:	00780000 	rsbseq	r0, r8, r0
    1c0c:	00030a09 	andeq	r0, r3, r9, lsl #20
    1c10:	00087c00 	andeq	r7, r8, r0, lsl #24
    1c14:	00310a00 	eorseq	r0, r1, r0, lsl #20
    1c18:	001d0000 	andseq	r0, sp, r0
    1c1c:	00003109 	andeq	r3, r0, r9, lsl #2
    1c20:	00088c00 	andeq	r8, r8, r0, lsl #24
    1c24:	00310a00 	eorseq	r0, r1, r0, lsl #20
    1c28:	001d0000 	andseq	r0, sp, r0
    1c2c:	8304f01c 	movwhi	pc, #16412	; 0x401c	; <UNPREDICTABLE>
    1c30:	08b10302 	ldmeq	r1!, {r1, r8, r9}
    1c34:	761d0000 	ldrvc	r0, [sp], -r0
    1c38:	0400000a 	streq	r0, [r0], #-10
    1c3c:	000b029a 	muleq	fp, sl, r2
    1c40:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    1c44:	00000a83 	andeq	r0, r0, r3, lsl #21
    1c48:	0b02a304 	bleq	aa860 <__bss_end+0x94d10>
    1c4c:	00000845 	andeq	r0, r0, r5, asr #16
    1c50:	05cb0900 	strbeq	r0, [fp, #2304]	; 0x900
    1c54:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    1c58:	310a0000 	mrscc	r0, (UNDEF: 10)
    1c5c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1c60:	06801e00 	streq	r1, [r0], r0, lsl #28
    1c64:	04110000 	ldreq	r0, [r1], #-0
    1c68:	000008c1 	andeq	r0, r0, r1, asr #17
    1c6c:	0008d71f 	andeq	sp, r8, pc, lsl r7
    1c70:	04711600 	ldrbteq	r1, [r1], #-1536	; 0xfffffa00
    1c74:	11000000 	mrsne	r0, (UNDEF: 0)
    1c78:	0008cc04 	andeq	ip, r8, r4, lsl #24
    1c7c:	94041100 	strls	r1, [r4], #-256	; 0xffffff00
    1c80:	1f000001 	svcne	0x00000001
    1c84:	000008ee 	andeq	r0, r0, lr, ror #17
    1c88:	00003816 	andeq	r3, r0, r6, lsl r8
    1c8c:	04110000 	ldreq	r0, [r1], #-0
    1c90:	000008f4 	strdeq	r0, [r0], -r4
    1c94:	08e30411 	stmiaeq	r3!, {r0, r4, sl}^
    1c98:	65090000 	strvs	r0, [r9, #-0]
    1c9c:	0a000006 	beq	1cbc <_start-0x6344>
    1ca0:	0a000009 	beq	1ccc <_start-0x6334>
    1ca4:	00000031 	andeq	r0, r0, r1, lsr r0
    1ca8:	09200002 	stmdbeq	r0!, {r1}
    1cac:	0400000a 	streq	r0, [r0], #-10
    1cb0:	71170333 	tstvc	r7, r3, lsr r3
    1cb4:	20000004 	andcs	r0, r0, r4
    1cb8:	00000a02 	andeq	r0, r0, r2, lsl #20
    1cbc:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    1cc0:	00000477 	andeq	r0, r0, r7, ror r4
    1cc4:	092f0411 	stmdbeq	pc!, {r0, r4, sl}	; <UNPREDICTABLE>
    1cc8:	240e0000 	strcs	r0, [lr], #-0
    1ccc:	21000009 	tstcs	r0, r9
    1cd0:	00086c22 	andeq	r6, r8, r2, lsr #24
    1cd4:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
    1cd8:	000005c5 	andeq	r0, r0, r5, asr #11
    1cdc:	00000c02 	andeq	r0, r0, r2, lsl #24
    1ce0:	1c610700 	stclne	7, cr0, [r1], #-0
    1ce4:	00000082 	andeq	r0, r0, r2, lsl #1
    1ce8:	00036d0f 	andeq	r6, r3, pc, lsl #26
    1cec:	69081400 	stmdbvs	r8, {sl, ip}
    1cf0:	00099708 	andeq	r9, r9, r8, lsl #14
    1cf4:	03200c00 	nopeq	{0}	; <UNPREDICTABLE>
    1cf8:	6b080000 	blvs	201d00 <__bss_end+0x1ec1b0>
    1cfc:	00093c0f 	andeq	r3, r9, pc, lsl #24
    1d00:	d90c0000 	stmdble	ip, {}	; <UNPREDICTABLE>
    1d04:	08000004 	stmdaeq	r0, {r2}
    1d08:	099c1f6c 	ldmibeq	ip, {r2, r3, r5, r6, r8, r9, sl, fp, ip}
    1d0c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1d10:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d14:	9c1f6d08 	ldcls	13, cr6, [pc], {8}
    1d18:	08000009 	stmdaeq	r0, {r0, r3}
    1d1c:	0003420c 	andeq	r4, r3, ip, lsl #4
    1d20:	096e0800 	stmdbeq	lr!, {fp}^
    1d24:	0000010f 	andeq	r0, r0, pc, lsl #2
    1d28:	02eb0c0c 	rsceq	r0, fp, #12, 24	; 0xc00
    1d2c:	6f080000 	svcvs	0x00080000
    1d30:	00010f09 	andeq	r0, r1, r9, lsl #30
    1d34:	06001000 	streq	r1, [r0], -r0
    1d38:	00000948 	andeq	r0, r0, r8, asr #18
    1d3c:	09970411 	ldmibeq	r7, {r0, r4, sl}
    1d40:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
    1d44:	08000004 	stmdaeq	r0, {r2}
    1d48:	09481b71 	stmdbeq	r8, {r0, r4, r5, r6, r8, r9, fp, ip}^
    1d4c:	a2060000 	andge	r0, r6, #0
    1d50:	0f000009 	svceq	0x00000009
    1d54:	0000056e 	andeq	r0, r0, lr, ror #10
    1d58:	0873080c 	ldmdaeq	r3!, {r2, r3, fp}^
    1d5c:	000009e8 	andeq	r0, r0, r8, ror #19
    1d60:	0003200c 	andeq	r2, r3, ip
    1d64:	0f750800 	svceq	0x00750800
    1d68:	0000093c 	andeq	r0, r0, ip, lsr r9
    1d6c:	04d90c00 	ldrbeq	r0, [r9], #3072	; 0xc00
    1d70:	76080000 	strvc	r0, [r8], -r0
    1d74:	00099c1e 	andeq	r9, r9, lr, lsl ip
    1d78:	f00c0400 			; <UNDEFINED> instruction: 0xf00c0400
    1d7c:	08000003 	stmdaeq	r0, {r0, r1}
    1d80:	099c1e77 	ldmibeq	ip, {r0, r1, r2, r4, r5, r6, r9, sl, fp, ip}
    1d84:	00080000 	andeq	r0, r8, r0
    1d88:	00046002 	andeq	r6, r4, r2
    1d8c:	20790800 	rsbscs	r0, r9, r0, lsl #16
    1d90:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    1d94:	0009e806 	andeq	lr, r9, r6, lsl #16
    1d98:	057e0f00 	ldrbeq	r0, [lr, #-3840]!	; 0xfffff100
    1d9c:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    1da0:	0a2e107e 	beq	b85fa0 <__bss_end+0xb70450>
    1da4:	7f0c0000 	svcvc	0x000c0000
    1da8:	08000004 	stmdaeq	r0, {r2}
    1dac:	00892280 	addeq	r2, r9, r0, lsl #5
    1db0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1db4:	00000318 	andeq	r0, r0, r8, lsl r3
    1db8:	2e178108 	mnfcss	f0, #0.0
    1dbc:	0400000a 	streq	r0, [r0], #-10
    1dc0:	0003390c 	andeq	r3, r3, ip, lsl #18
    1dc4:	19820800 	stmibne	r2, {fp}
    1dc8:	000009f4 	strdeq	r0, [r0], -r4
    1dcc:	04110008 	ldreq	r0, [r1], #-8
    1dd0:	000009ae 	andeq	r0, r0, lr, lsr #19
    1dd4:	0009b202 	andeq	fp, r9, r2, lsl #4
    1dd8:	03830800 	orreq	r0, r3, #0, 16
    1ddc:	000009f9 	strdeq	r0, [r0], -r9
    1de0:	000b8b0f 	andeq	r8, fp, pc, lsl #22
    1de4:	68090800 	stmdavs	r9, {fp}
    1de8:	000a6810 	andeq	r6, sl, r0, lsl r8
    1dec:	0ba00c00 	bleq	fe804df4 <_estack+0xf67f4df4>
    1df0:	6a090000 	bvs	241df8 <__bss_end+0x22c2a8>
    1df4:	00007610 	andeq	r7, r0, r0, lsl r6
    1df8:	f10c0000 	cpsid	
    1dfc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1e00:	093c106b 	ldmdbeq	ip!, {r0, r1, r3, r5, r6, ip}
    1e04:	00040000 	andeq	r0, r4, r0
    1e08:	000c1102 	andeq	r1, ip, r2, lsl #2
    1e0c:	036c0900 	cmneq	ip, #0, 18
    1e10:	00000a40 	andeq	r0, r0, r0, asr #20
    1e14:	000ce10f 	andeq	lr, ip, pc, lsl #2
    1e18:	79014c00 	stmdbvc	r1, {sl, fp, lr}
    1e1c:	000b1110 	andeq	r1, fp, r0, lsl r1
    1e20:	0bdb0c00 	bleq	ff6c4e28 <_estack+0xf76b4e28>
    1e24:	7b010000 	blvc	41e2c <__bss_end+0x2c2dc>
    1e28:	000b110f 	andeq	r1, fp, pc, lsl #2
    1e2c:	a50c0000 	strge	r0, [ip, #-0]
    1e30:	0100000d 	tsteq	r0, sp
    1e34:	0b110f7c 	bleq	445c2c <__bss_end+0x4300dc>
    1e38:	0c040000 	stceq	0, cr0, [r4], {-0}
    1e3c:	00000ddc 	ldrdeq	r0, [r0], -ip
    1e40:	110f7e01 	tstne	pc, r1, lsl #28
    1e44:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1e48:	000b950c 	andeq	r9, fp, ip, lsl #10
    1e4c:	0f7f0100 	svceq	0x007f0100
    1e50:	00000b11 	andeq	r0, r0, r1, lsl fp
    1e54:	0db60c0c 	ldceq	12, cr0, [r6, #48]!	; 0x30
    1e58:	81010000 	mrshi	r0, (UNDEF: 1)
    1e5c:	000a3408 	andeq	r3, sl, r8, lsl #8
    1e60:	610c1000 	mrsvs	r1, (UNDEF: 12)
    1e64:	0100000b 	tsteq	r0, fp
    1e68:	0a340882 	beq	d04078 <__bss_end+0xcee528>
    1e6c:	0c240000 	stceq	0, cr0, [r4], #-0
    1e70:	00000d5b 	andeq	r0, r0, fp, asr sp
    1e74:	89228401 	stmdbhi	r2!, {r0, sl, pc}
    1e78:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1e7c:	000c580c 	andeq	r5, ip, ip, lsl #16
    1e80:	19850100 	stmibne	r5, {r8}
    1e84:	00000082 	andeq	r0, r0, r2, lsl #1
    1e88:	0de60c3c 	stcleq	12, cr0, [r6, #240]!	; 0xf0
    1e8c:	86010000 	strhi	r0, [r1], -r0
    1e90:	00008219 	andeq	r8, r0, r9, lsl r2
    1e94:	9d0c4000 	stcls	0, cr4, [ip, #-0]
    1e98:	0100000d 	tsteq	r0, sp
    1e9c:	007d2088 	rsbseq	r2, sp, r8, lsl #1
    1ea0:	0c440000 	mareq	acc0, r0, r4
    1ea4:	00000b4c 	andeq	r0, r0, ip, asr #22
    1ea8:	7d208901 			; <UNDEFINED> instruction: 0x7d208901
    1eac:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1eb0:	5a041100 	bpl	1062b8 <__bss_end+0xf0768>
    1eb4:	02000000 	andeq	r0, r0, #0
    1eb8:	00000ccc 	andeq	r0, r0, ip, asr #25
    1ebc:	74039001 	strvc	r9, [r3], #-1
    1ec0:	0200000a 	andeq	r0, r0, #10
    1ec4:	00000c27 	andeq	r0, r0, r7, lsr #24
    1ec8:	34129801 	ldrcc	r9, [r2], #-2049	; 0xfffff7ff
    1ecc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1ed0:	00000b23 	andeq	r0, r0, r3, lsr #22
    1ed4:	0b170411 	bleq	5c2f20 <__bss_end+0x5ad3d0>
    1ed8:	340e0000 	strcc	r0, [lr], #-0
    1edc:	2300000b 	movwcs	r0, #11
    1ee0:	00000af3 	strdeq	r0, [r0], -r3
    1ee4:	16056901 	strne	r6, [r5], -r1, lsl #18
    1ee8:	00000076 	andeq	r0, r0, r6, ror r0
    1eec:	00011b58 	andeq	r1, r1, r8, asr fp
    1ef0:	00000048 	andeq	r0, r0, r8, asr #32
    1ef4:	0b7b9c01 	bleq	1ee8f00 <__bss_end+0x1ed33b0>
    1ef8:	23240000 			; <UNDEFINED> instruction: 0x23240000
    1efc:	0100000b 	tsteq	r0, fp
    1f00:	2f430569 	svccs	0x00430569
    1f04:	0200000b 	andeq	r0, r0, #11
    1f08:	1f256c91 	svcne	0x00256c91
    1f0c:	0100000c 	tsteq	r0, ip
    1f10:	7616056b 	ldrvc	r0, [r6], -fp, ror #10
    1f14:	02000000 	andeq	r0, r0, #0
    1f18:	26007491 			; <UNDEFINED> instruction: 0x26007491
    1f1c:	00000c49 	andeq	r0, r0, r9, asr #24
    1f20:	1d055d01 	stcne	13, cr5, [r5, #-4]
    1f24:	00000076 	andeq	r0, r0, r6, ror r0
    1f28:	00011b0c 	andeq	r1, r1, ip, lsl #22
    1f2c:	0000004c 	andeq	r0, r0, ip, asr #32
    1f30:	0bb79c01 	bleq	fede8f3c <_estack+0xf6dd8f3c>
    1f34:	23240000 			; <UNDEFINED> instruction: 0x23240000
    1f38:	0100000b 	tsteq	r0, fp
    1f3c:	2f40055d 	svccs	0x0040055d
    1f40:	0200000b 	andeq	r0, r0, #11
    1f44:	1f256c91 	svcne	0x00256c91
    1f48:	0100000c 	tsteq	r0, ip
    1f4c:	7616055f 			; <UNDEFINED> instruction: 0x7616055f
    1f50:	02000000 	andeq	r0, r0, #0
    1f54:	23007491 	movwcs	r7, #1169	; 0x491
    1f58:	00000b32 	andeq	r0, r0, r2, lsr fp
    1f5c:	16055201 	strne	r5, [r5], -r1, lsl #4
    1f60:	00000076 	andeq	r0, r0, r6, ror r0
    1f64:	00011acc 	andeq	r1, r1, ip, asr #21
    1f68:	00000040 	andeq	r0, r0, r0, asr #32
    1f6c:	0bf39c01 	bleq	ffce8f78 <_estack+0xf7cd8f78>
    1f70:	23240000 			; <UNDEFINED> instruction: 0x23240000
    1f74:	0100000b 	tsteq	r0, fp
    1f78:	2f440552 	svccs	0x00440552
    1f7c:	0200000b 	andeq	r0, r0, #11
    1f80:	1f256c91 	svcne	0x00256c91
    1f84:	0100000c 	tsteq	r0, ip
    1f88:	76160554 			; <UNDEFINED> instruction: 0x76160554
    1f8c:	02000000 	andeq	r0, r0, #0
    1f90:	26007491 			; <UNDEFINED> instruction: 0x26007491
    1f94:	00000bef 	andeq	r0, r0, pc, ror #23
    1f98:	1d054601 	stcne	6, cr4, [r5, #-4]
    1f9c:	00000076 	andeq	r0, r0, r6, ror r0
    1fa0:	00011a88 	andeq	r1, r1, r8, lsl #21
    1fa4:	00000044 	andeq	r0, r0, r4, asr #32
    1fa8:	0c2f9c01 	stceq	12, cr9, [pc], #-4	; 1fac <_start-0x6054>
    1fac:	23240000 			; <UNDEFINED> instruction: 0x23240000
    1fb0:	0100000b 	tsteq	r0, fp
    1fb4:	2f410546 	svccs	0x00410546
    1fb8:	0200000b 	andeq	r0, r0, #11
    1fbc:	1f256c91 	svcne	0x00256c91
    1fc0:	0100000c 	tsteq	r0, ip
    1fc4:	76160548 	ldrvc	r0, [r6], -r8, asr #10
    1fc8:	02000000 	andeq	r0, r0, #0
    1fcc:	27007491 			; <UNDEFINED> instruction: 0x27007491
    1fd0:	00000d8e 	andeq	r0, r0, lr, lsl #27
    1fd4:	0d050601 	stceq	6, cr0, [r5, #-4]
    1fd8:	00011984 	andeq	r1, r1, r4, lsl #19
    1fdc:	00000104 	andeq	r0, r0, r4, lsl #2
    1fe0:	0c579c01 	mrrceq	12, 0, r9, r7, cr1
    1fe4:	23240000 			; <UNDEFINED> instruction: 0x23240000
    1fe8:	0100000b 	tsteq	r0, fp
    1fec:	232a0506 			; <UNDEFINED> instruction: 0x232a0506
    1ff0:	0200000b 	andeq	r0, r0, #11
    1ff4:	27007491 			; <UNDEFINED> instruction: 0x27007491
    1ff8:	00000d46 	andeq	r0, r0, r6, asr #26
    1ffc:	0d04f801 	stceq	8, cr15, [r4, #-4]
    2000:	000118f4 	strdeq	r1, [r1], -r4
    2004:	00000090 	muleq	r0, r0, r0
    2008:	0c8f9c01 	stceq	12, cr9, [pc], {1}
    200c:	23240000 			; <UNDEFINED> instruction: 0x23240000
    2010:	0100000b 	tsteq	r0, fp
    2014:	3a3204f8 	bcc	c833fc <__bss_end+0xc6d8ac>
    2018:	0200000b 	andeq	r0, r0, #11
    201c:	01247491 			; <UNDEFINED> instruction: 0x01247491
    2020:	0100000e 	tsteq	r0, lr
    2024:	244704f8 	strbcs	r0, [r7], #-1272	; 0xfffffb08
    2028:	02000009 	andeq	r0, r0, #9
    202c:	27007091 			; <UNDEFINED> instruction: 0x27007091
    2030:	00000b78 	andeq	r0, r0, r8, ror fp
    2034:	0d04d201 	sfmeq	f5, 1, [r4, #-4]
    2038:	000117c8 	andeq	r1, r1, r8, asr #15
    203c:	0000012c 	andeq	r0, r0, ip, lsr #2
    2040:	0cd79c01 	ldcleq	12, cr9, [r7], {1}
    2044:	23240000 			; <UNDEFINED> instruction: 0x23240000
    2048:	0100000b 	tsteq	r0, fp
    204c:	342904d2 	strtcc	r0, [r9], #-1234	; 0xfffffb2e
    2050:	0200000b 	andeq	r0, r0, #11
    2054:	be247491 	mcrlt	4, 1, r7, cr4, cr1, {4}
    2058:	0100000c 	tsteq	r0, ip
    205c:	243e04d2 	ldrtcs	r0, [lr], #-1234	; 0xfffffb2e
    2060:	02000009 	andeq	r0, r0, #9
    2064:	ac247091 	stcge	0, cr7, [r4], #-580	; 0xfffffdbc
    2068:	0100000d 	tsteq	r0, sp
    206c:	765b04d2 			; <UNDEFINED> instruction: 0x765b04d2
    2070:	02000000 	andeq	r0, r0, #0
    2074:	28006c91 	stmdacs	r0, {r0, r4, r7, sl, fp, sp, lr}
    2078:	00000b54 	andeq	r0, r0, r4, asr fp
    207c:	0604a901 	streq	sl, [r4], -r1, lsl #18
    2080:	00011794 	muleq	r1, r4, r7
    2084:	00000034 	andeq	r0, r0, r4, lsr r0
    2088:	0cff9c01 	ldcleq	12, cr9, [pc], #4	; 2094 <_start-0x5f6c>
    208c:	23240000 			; <UNDEFINED> instruction: 0x23240000
    2090:	0100000b 	tsteq	r0, fp
    2094:	232104a9 			; <UNDEFINED> instruction: 0x232104a9
    2098:	0200000b 	andeq	r0, r0, #11
    209c:	23007491 	movwcs	r7, #1169	; 0x491
    20a0:	00000ca0 	andeq	r0, r0, r0, lsr #25
    20a4:	18049d01 	stmdane	r4, {r0, r8, sl, fp, ip, pc}
    20a8:	00000082 	andeq	r0, r0, r2, lsl #1
    20ac:	00011764 	andeq	r1, r1, r4, ror #14
    20b0:	00000030 	andeq	r0, r0, r0, lsr r0
    20b4:	0d3b9c01 	ldceq	12, cr9, [fp, #-4]!
    20b8:	23240000 			; <UNDEFINED> instruction: 0x23240000
    20bc:	0100000b 	tsteq	r0, fp
    20c0:	2f4a049d 	svccs	0x004a049d
    20c4:	0200000b 	andeq	r0, r0, #11
    20c8:	1e256c91 	mcrne	12, 1, r6, cr5, cr1, {4}
    20cc:	0100000c 	tsteq	r0, ip
    20d0:	8218049f 	andshi	r0, r8, #-1627389952	; 0x9f000000
    20d4:	02000000 	andeq	r0, r0, #0
    20d8:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    20dc:	00000b0c 	andeq	r0, r0, ip, lsl #22
    20e0:	18048f01 	stmdane	r4, {r0, r8, r9, sl, fp, pc}
    20e4:	00000082 	andeq	r0, r0, r2, lsl #1
    20e8:	00011730 	andeq	r1, r1, r0, lsr r7
    20ec:	00000034 	andeq	r0, r0, r4, lsr r0
    20f0:	0d779c01 	ldcleq	12, cr9, [r7, #-4]!
    20f4:	23240000 			; <UNDEFINED> instruction: 0x23240000
    20f8:	0100000b 	tsteq	r0, fp
    20fc:	2f43048f 	svccs	0x0043048f
    2100:	0200000b 	andeq	r0, r0, #11
    2104:	1e256c91 	mcrne	12, 1, r6, cr5, cr1, {4}
    2108:	0100000c 	tsteq	r0, ip
    210c:	82180491 	andshi	r0, r8, #-1862270976	; 0x91000000
    2110:	02000000 	andeq	r0, r0, #0
    2114:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    2118:	00000c34 	andeq	r0, r0, r4, lsr ip
    211c:	16045601 	strne	r5, [r4], -r1, lsl #12
    2120:	00000076 	andeq	r0, r0, r6, ror r0
    2124:	00011650 	andeq	r1, r1, r0, asr r6
    2128:	000000e0 	andeq	r0, r0, r0, ror #1
    212c:	0de39c01 	stcleq	12, cr9, [r3, #4]!
    2130:	23240000 			; <UNDEFINED> instruction: 0x23240000
    2134:	0100000b 	tsteq	r0, fp
    2138:	23390456 	teqcs	r9, #1442840576	; 0x56000000
    213c:	0200000b 	andeq	r0, r0, #11
    2140:	01246c91 			; <UNDEFINED> instruction: 0x01246c91
    2144:	0100000e 	tsteq	r0, lr
    2148:	114f0456 	cmpne	pc, r6, asr r4	; <UNPREDICTABLE>
    214c:	02000001 	andeq	r0, r0, #1
    2150:	78246891 	stmdavc	r4!, {r0, r4, r7, fp, sp, lr}
    2154:	0100000c 	tsteq	r0, ip
    2158:	e36f0456 	cmn	pc, #1442840576	; 0x56000000
    215c:	0200000d 	andeq	r0, r0, #13
    2160:	1f256491 	svcne	0x00256491
    2164:	0100000c 	tsteq	r0, ip
    2168:	76160458 			; <UNDEFINED> instruction: 0x76160458
    216c:	02000000 	andeq	r0, r0, #0
    2170:	c4257491 	strtgt	r7, [r5], #-1169	; 0xfffffb6f
    2174:	0100000b 	tsteq	r0, fp
    2178:	82180459 	andshi	r0, r8, #1493172224	; 0x59000000
    217c:	02000000 	andeq	r0, r0, #0
    2180:	11007091 	swpne	r7, r1, [r0]
    2184:	00007604 	andeq	r7, r0, r4, lsl #12
    2188:	0baf2900 	bleq	febcc590 <_estack+0xf6bbc590>
    218c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2190:	00761603 	rsbseq	r1, r6, r3, lsl #12
    2194:	144c0000 	strbne	r0, [ip], #-0
    2198:	02040001 	andeq	r0, r4, #1
    219c:	9c010000 	stcls	0, cr0, [r1], {-0}
    21a0:	00000e75 	andeq	r0, r0, r5, ror lr
    21a4:	000b2324 	andeq	r2, fp, r4, lsr #6
    21a8:	03c10100 	biceq	r0, r1, #0, 2
    21ac:	000b2339 	andeq	r2, fp, r9, lsr r3
    21b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    21b4:	000e0124 	andeq	r0, lr, r4, lsr #2
    21b8:	03c10100 	biceq	r0, r1, #0, 2
    21bc:	0001114f 	andeq	r1, r1, pc, asr #2
    21c0:	60910200 	addsvs	r0, r1, r0, lsl #4
    21c4:	00107a24 	andseq	r7, r0, r4, lsr #20
    21c8:	03c10100 	biceq	r0, r1, #0, 2
    21cc:	00093c66 	andeq	r3, r9, r6, ror #24
    21d0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    21d4:	000be224 	andeq	lr, fp, r4, lsr #4
    21d8:	03c10100 	biceq	r0, r1, #0, 2
    21dc:	00007682 	andeq	r7, r0, r2, lsl #13
    21e0:	58910200 	ldmpl	r1, {r9}
    21e4:	000cd325 	andeq	sp, ip, r5, lsr #6
    21e8:	03c30100 	biceq	r0, r3, #0, 2
    21ec:	00007616 	andeq	r7, r0, r6, lsl r6
    21f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21f4:	0011a725 	andseq	sl, r1, r5, lsr #14
    21f8:	03c40100 	biceq	r0, r4, #0, 2
    21fc:	000a680e 	andeq	r6, sl, lr, lsl #16
    2200:	68910200 	ldmvs	r1, {r9}
    2204:	000c6125 	andeq	r6, ip, r5, lsr #2
    2208:	03c50100 	biceq	r0, r5, #0, 2
    220c:	000b110e 	andeq	r1, fp, lr, lsl #2
    2210:	70910200 	addsvc	r0, r1, r0, lsl #4
    2214:	0ace2900 	beq	ff38c61c <_estack+0xf737c61c>
    2218:	86010000 	strhi	r0, [r1], -r0
    221c:	00761603 	rsbseq	r1, r6, r3, lsl #12
    2220:	13700000 	cmnne	r0, #0
    2224:	00dc0001 	sbcseq	r0, ip, r1
    2228:	9c010000 	stcls	0, cr0, [r1], {-0}
    222c:	00000ef1 	strdeq	r0, [r0], -r1
    2230:	000b2324 	andeq	r2, fp, r4, lsr #6
    2234:	03860100 	orreq	r0, r6, #0, 2
    2238:	000b233d 	andeq	r2, fp, sp, lsr r3
    223c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2240:	000cbe24 	andeq	fp, ip, r4, lsr #28
    2244:	03860100 	orreq	r0, r6, #0, 2
    2248:	00092a59 	andeq	r2, r9, r9, asr sl
    224c:	68910200 	ldmvs	r1, {r9}
    2250:	000c7824 	andeq	r7, ip, r4, lsr #16
    2254:	03860100 	orreq	r0, r6, #0, 2
    2258:	000de37e 	andeq	lr, sp, lr, ror r3
    225c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2260:	000d8024 	andeq	r8, sp, r4, lsr #32
    2264:	03860100 	orreq	r0, r6, #0, 2
    2268:	000076a7 	andeq	r7, r0, r7, lsr #13
    226c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2270:	000c1f25 	andeq	r1, ip, r5, lsr #30
    2274:	03880100 	orreq	r0, r8, #0, 2
    2278:	00007616 	andeq	r7, r0, r6, lsl r6
    227c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2280:	000bc425 	andeq	ip, fp, r5, lsr #8
    2284:	03890100 	orreq	r0, r9, #0, 2
    2288:	00008218 	andeq	r8, r0, r8, lsl r2
    228c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2290:	0bff2900 	bleq	fffcc698 <_estack+0xf7fbc698>
    2294:	41010000 	mrsmi	r0, (UNDEF: 1)
    2298:	00761602 	rsbseq	r1, r6, r2, lsl #12
    229c:	11cc0000 	bicne	r0, ip, r0
    22a0:	01a40001 			; <UNDEFINED> instruction: 0x01a40001
    22a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    22a8:	00000f6d 	andeq	r0, r0, sp, ror #30
    22ac:	000b2324 	andeq	r2, fp, r4, lsr #6
    22b0:	02410100 	subeq	r0, r1, #0, 2
    22b4:	000b2336 	andeq	r2, fp, r6, lsr r3
    22b8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    22bc:	000cbe24 	andeq	fp, ip, r4, lsr #28
    22c0:	02410100 	subeq	r0, r1, #0, 2
    22c4:	00092a52 	andeq	r2, r9, r2, asr sl
    22c8:	60910200 	addsvs	r0, r1, r0, lsl #4
    22cc:	00107a24 	andseq	r7, r0, r4, lsr #20
    22d0:	02410100 	subeq	r0, r1, #0, 2
    22d4:	00093c6e 	andeq	r3, r9, lr, ror #24
    22d8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    22dc:	000d8024 	andeq	r8, sp, r4, lsr #32
    22e0:	02410100 	subeq	r0, r1, #0, 2
    22e4:	0000768a 	andeq	r7, r0, sl, lsl #13
    22e8:	58910200 	ldmpl	r1, {r9}
    22ec:	000cd325 	andeq	sp, ip, r5, lsr #6
    22f0:	02430100 	subeq	r0, r3, #0, 2
    22f4:	00007616 	andeq	r7, r0, r6, lsl r6
    22f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22fc:	0011a725 	andseq	sl, r1, r5, lsr #14
    2300:	02440100 	subeq	r0, r4, #0, 2
    2304:	000a680e 	andeq	r6, sl, lr, lsl #16
    2308:	6c910200 	lfmvs	f0, 4, [r1], {0}
    230c:	0d322900 			; <UNDEFINED> instruction: 0x0d322900
    2310:	42010000 	andmi	r0, r1, #0
    2314:	0b230e01 	bleq	8c5b20 <__bss_end+0x8affd0>
    2318:	11040000 	mrsne	r0, (UNDEF: 4)
    231c:	00c80001 	sbceq	r0, r8, r1
    2320:	9c010000 	stcls	0, cr0, [r1], {-0}
    2324:	00000fe9 	andeq	r0, r0, r9, ror #31
    2328:	000c9224 	andeq	r9, ip, r4, lsr #4
    232c:	01420100 	mrseq	r0, (UNDEF: 82)
    2330:	0000823a 	andeq	r8, r0, sl, lsr r2
    2334:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2338:	000de624 	andeq	lr, sp, r4, lsr #12
    233c:	01420100 	mrseq	r0, (UNDEF: 82)
    2340:	00008260 	andeq	r8, r0, r0, ror #4
    2344:	60910200 	addsvs	r0, r1, r0, lsl #4
    2348:	000ae724 	andeq	lr, sl, r4, lsr #14
    234c:	01420100 	mrseq	r0, (UNDEF: 82)
    2350:	0000617a 	andeq	r6, r0, sl, ror r1
    2354:	5f910200 	svcpl	0x00910200
    2358:	000cf125 	andeq	pc, ip, r5, lsr #2
    235c:	01440100 	mrseq	r0, (UNDEF: 84)
    2360:	000b3409 	andeq	r3, fp, r9, lsl #8
    2364:	70910200 	addsvc	r0, r1, r0, lsl #4
    2368:	000dca25 	andeq	ip, sp, r5, lsr #20
    236c:	01450100 	mrseq	r0, (UNDEF: 85)
    2370:	00002508 	andeq	r2, r0, r8, lsl #10
    2374:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2378:	000c1f25 	andeq	r1, ip, r5, lsr #30
    237c:	01460100 	mrseq	r0, (UNDEF: 86)
    2380:	000b230e 	andeq	r2, fp, lr, lsl #6
    2384:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2388:	0d6d2a00 	vpusheq	{s5-s4}
    238c:	17010000 	strne	r0, [r1, -r0]
    2390:	00760f01 	rsbseq	r0, r6, r1, lsl #30
    2394:	0ff00000 	svceq	0x00f00000	; IMB
    2398:	01140001 	tsteq	r4, r1
    239c:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a0:	000b2324 	andeq	r2, fp, r4, lsr #6
    23a4:	01170100 	tsteq	r7, r0, lsl #2
    23a8:	000b2330 	andeq	r2, fp, r0, lsr r3
    23ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23b0:	000cf224 	andeq	pc, ip, r4, lsr #4
    23b4:	01170100 	tsteq	r7, r0, lsl #2
    23b8:	00007647 	andeq	r7, r0, r7, asr #12
    23bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    23c0:	166c0000 	strbtne	r0, [ip], -r0
    23c4:	00040000 	andeq	r0, r4, r0
    23c8:	0000085a 	andeq	r0, r0, sl, asr r8
    23cc:	00780104 	rsbseq	r0, r8, r4, lsl #2
    23d0:	9b0c0000 	blls	3023d8 <__bss_end+0x2ec888>
    23d4:	f800000e 			; <UNDEFINED> instruction: 0xf800000e
    23d8:	a0000000 	andge	r0, r0, r0
    23dc:	2400011b 	strcs	r0, [r0], #-283	; 0xfffffee5
    23e0:	f5000019 			; <UNDEFINED> instruction: 0xf5000019
    23e4:	0200000c 	andeq	r0, r0, #12
    23e8:	08a60601 	stmiaeq	r6!, {r0, r9, sl}
    23ec:	25030000 	strcs	r0, [r3, #-0]
    23f0:	02000000 	andeq	r0, r0, #0
    23f4:	08a40801 	stmiaeq	r4!, {r0, fp}
    23f8:	02020000 	andeq	r0, r2, #0
    23fc:	0008bb05 	andeq	fp, r8, r5, lsl #22
    2400:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2404:	00000059 	andeq	r0, r0, r9, asr r0
    2408:	24050402 	strcs	r0, [r5], #-1026	; 0xfffffbfe
    240c:	04000001 	streq	r0, [r0], #-1
    2410:	00000046 	andeq	r0, r0, r6, asr #32
    2414:	65070402 	strvs	r0, [r7, #-1026]	; 0xfffffbfe
    2418:	04000006 	streq	r0, [r0], #-6
    241c:	00000052 	andeq	r0, r0, r2, asr r0
    2420:	1f050802 	svcne	0x00050802
    2424:	02000001 	andeq	r0, r0, #1
    2428:	06600708 	strbteq	r0, [r0], -r8, lsl #14
    242c:	04050000 	streq	r0, [r5], #-0
    2430:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2434:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2438:	0000066a 	andeq	r0, r0, sl, ror #12
    243c:	000b2b06 	andeq	r2, fp, r6, lsl #22
    2440:	17d80200 	ldrbne	r0, [r8, r0, lsl #4]
    2444:	00000073 	andeq	r0, r0, r3, ror r0
    2448:	9b040802 	blls	104458 <__bss_end+0xee908>
    244c:	07000001 	streq	r0, [r0, -r1]
    2450:	08130804 	ldmdaeq	r3, {r2, fp}
    2454:	65020000 	strvs	r0, [r2, #-0]
    2458:	00731701 	rsbseq	r1, r3, r1, lsl #14
    245c:	81060000 	mrshi	r0, (UNDEF: 6)
    2460:	03000008 	movweq	r0, #8
    2464:	00460e2e 	subeq	r0, r6, lr, lsr #28
    2468:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    246c:	03000009 	movweq	r0, #9
    2470:	00460e74 	subeq	r0, r6, r4, ror lr
    2474:	04090000 	streq	r0, [r9], #-0
    2478:	d603a503 	strle	sl, [r3], -r3, lsl #10
    247c:	0a000000 	beq	2484 <_start-0x5b7c>
    2480:	0000080d 	andeq	r0, r0, sp, lsl #16
    2484:	8f0ca703 	svchi	0x000ca703
    2488:	0a000000 	beq	2490 <_start-0x5b70>
    248c:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    2490:	d613a803 	ldrle	sl, [r3], -r3, lsl #16
    2494:	00000000 	andeq	r0, r0, r0
    2498:	0000310b 	andeq	r3, r0, fp, lsl #2
    249c:	0000e600 	andeq	lr, r0, r0, lsl #12
    24a0:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    24a4:	00030000 	andeq	r0, r3, r0
    24a8:	a203080d 	andge	r0, r3, #851968	; 0xd0000
    24ac:	00010a09 	andeq	r0, r1, r9, lsl #20
    24b0:	09870e00 	stmibeq	r7, {r9, sl, fp}
    24b4:	a4030000 	strge	r0, [r3], #-0
    24b8:	00006c07 	andeq	r6, r0, r7, lsl #24
    24bc:	8f0e0000 	svchi	0x000e0000
    24c0:	03000009 	movweq	r0, #9
    24c4:	00b405a9 	adcseq	r0, r4, r9, lsr #11
    24c8:	00040000 	andeq	r0, r4, r0
    24cc:	0008e306 	andeq	lr, r8, r6, lsl #6
    24d0:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    24d4:	000000e6 	andeq	r0, r0, r6, ror #1
    24d8:	0009ed06 	andeq	lr, r9, r6, lsl #26
    24dc:	19160400 	ldmdbne	r6, {sl}
    24e0:	00000052 	andeq	r0, r0, r2, asr r0
    24e4:	00089206 	andeq	r9, r8, r6, lsl #4
    24e8:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
    24ec:	0000006c 	andeq	r0, r0, ip, rrx
    24f0:	00078206 	andeq	r8, r7, r6, lsl #4
    24f4:	1b230400 	blne	8c34fc <__bss_end+0x8ad9ac>
    24f8:	00000122 	andeq	r0, r0, r2, lsr #2
    24fc:	0007930f 	andeq	r9, r7, pc, lsl #6
    2500:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
    2504:	00019408 	andeq	r9, r1, r8, lsl #8
    2508:	09040e00 	stmdbeq	r4, {r9, sl, fp}
    250c:	36040000 	strcc	r0, [r4], -r0
    2510:	00019413 	andeq	r9, r1, r3, lsl r4
    2514:	5f100000 	svcpl	0x00100000
    2518:	3704006b 	strcc	r0, [r4, -fp, rrx]
    251c:	00006c07 	andeq	r6, r0, r7, lsl #24
    2520:	440e0400 	strmi	r0, [lr], #-1024	; 0xfffffc00
    2524:	04000009 	streq	r0, [r0], #-9
    2528:	006c0b37 	rsbeq	r0, ip, r7, lsr fp
    252c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2530:	00001b49 	andeq	r1, r0, r9, asr #22
    2534:	6c143704 	ldcvs	7, cr3, [r4], {4}
    2538:	0c000000 	stceq	0, cr0, [r0], {-0}
    253c:	000a320e 	andeq	r3, sl, lr, lsl #4
    2540:	1b370400 	blne	dc3548 <__bss_end+0xdad9f8>
    2544:	0000006c 	andeq	r0, r0, ip, rrx
    2548:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    254c:	0b380400 	bleq	e03554 <__bss_end+0xdeda04>
    2550:	0000019a 	muleq	r0, sl, r1
    2554:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    2558:	0000013a 	andeq	r0, r0, sl, lsr r1
    255c:	0001160b 	andeq	r1, r1, fp, lsl #12
    2560:	0001aa00 	andeq	sl, r1, r0, lsl #20
    2564:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    2568:	00000000 	andeq	r0, r0, r0
    256c:	0007ba0f 	andeq	fp, r7, pc, lsl #20
    2570:	3c042400 	cfstrscc	mvf2, [r4], {-0}
    2574:	00022d08 	andeq	r2, r2, r8, lsl #26
    2578:	06b60e00 	ldrteq	r0, [r6], r0, lsl #28
    257c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    2580:	00006c09 	andeq	r6, r0, r9, lsl #24
    2584:	b80e0000 	stmdalt	lr, {}	; <UNPREDICTABLE>
    2588:	04000009 	streq	r0, [r0], #-9
    258c:	006c093f 	rsbeq	r0, ip, pc, lsr r9
    2590:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2594:	000006cb 	andeq	r0, r0, fp, asr #13
    2598:	6c094004 	stcvs	0, cr4, [r9], {4}
    259c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25a0:	000ac40e 	andeq	ip, sl, lr, lsl #8
    25a4:	09410400 	stmdbeq	r1, {sl}^
    25a8:	0000006c 	andeq	r0, r0, ip, rrx
    25ac:	085b0e0c 	ldmdaeq	fp, {r2, r3, r9, sl, fp}^
    25b0:	42040000 	andmi	r0, r4, #0
    25b4:	00006c09 	andeq	r6, r0, r9, lsl #24
    25b8:	3b0e1000 	blcc	3865c0 <__bss_end+0x370a70>
    25bc:	04000008 	streq	r0, [r0], #-8
    25c0:	006c0943 	rsbeq	r0, ip, r3, asr #18
    25c4:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    25c8:	00000a37 	andeq	r0, r0, r7, lsr sl
    25cc:	6c094404 	cfstrsvs	mvf4, [r9], {4}
    25d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    25d4:	0008c50e 	andeq	ip, r8, lr, lsl #10
    25d8:	09450400 	stmdbeq	r5, {sl}^
    25dc:	0000006c 	andeq	r0, r0, ip, rrx
    25e0:	0a8b0e1c 	beq	fe2c5e58 <_estack+0xf62b5e58>
    25e4:	46040000 	strmi	r0, [r4], -r0
    25e8:	00006c09 	andeq	r6, r0, r9, lsl #24
    25ec:	12002000 	andne	r2, r0, #0
    25f0:	000006da 	ldrdeq	r0, [r0], -sl
    25f4:	4f040108 	svcmi	0x00040108
    25f8:	00027208 	andeq	r7, r2, r8, lsl #4
    25fc:	07610e00 	strbeq	r0, [r1, -r0, lsl #28]!
    2600:	50040000 	andpl	r0, r4, r0
    2604:	0002720a 	andeq	r7, r2, sl, lsl #4
    2608:	150e0000 	strne	r0, [lr, #-0]
    260c:	04000006 	streq	r0, [r0], #-6
    2610:	02720951 	rsbseq	r0, r2, #1327104	; 0x144000
    2614:	13800000 	orrne	r0, r0, #0
    2618:	000009d4 	ldrdeq	r0, [r0], -r4
    261c:	160a5304 	strne	r5, [sl], -r4, lsl #6
    2620:	00000001 	andeq	r0, r0, r1
    2624:	07041301 	streq	r1, [r4, -r1, lsl #6]
    2628:	56040000 	strpl	r0, [r4], -r0
    262c:	0001160a 	andeq	r1, r1, sl, lsl #12
    2630:	00010400 	andeq	r0, r1, r0, lsl #8
    2634:	00008d0b 	andeq	r8, r0, fp, lsl #26
    2638:	00028200 	andeq	r8, r2, r0, lsl #4
    263c:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    2640:	001f0000 	andseq	r0, pc, r0
    2644:	00086412 	andeq	r6, r8, r2, lsl r4
    2648:	04019000 	streq	r9, [r1], #-0
    264c:	02c50862 	sbceq	r0, r5, #6422528	; 0x620000
    2650:	040e0000 	streq	r0, [lr], #-0
    2654:	04000009 	streq	r0, [r0], #-9
    2658:	02c51263 	sbceq	r1, r5, #805306374	; 0x30000006
    265c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2660:	0000091c 	andeq	r0, r0, ip, lsl r9
    2664:	6c066404 	cfstrsvs	mvf6, [r6], {4}
    2668:	04000000 	streq	r0, [r0], #-0
    266c:	0007690e 	andeq	r6, r7, lr, lsl #18
    2670:	09660400 	stmdbeq	r6!, {sl}^
    2674:	000002cb 	andeq	r0, r0, fp, asr #5
    2678:	06da0e08 	ldrbeq	r0, [sl], r8, lsl #28
    267c:	67040000 	strvs	r0, [r4, -r0]
    2680:	00022d1e 	andeq	r2, r2, lr, lsl sp
    2684:	11008800 	tstne	r0, r0, lsl #16
    2688:	00028204 	andeq	r8, r2, r4, lsl #4
    268c:	02db0b00 	sbcseq	r0, fp, #0, 22
    2690:	02db0000 	sbcseq	r0, fp, #0
    2694:	730c0000 	movwvc	r0, #49152	; 0xc000
    2698:	1f000000 	svcne	0x00000000
    269c:	e1041100 	mrs	r1, (UNDEF: 20)
    26a0:	14000002 	strne	r0, [r0], #-2
    26a4:	0008cf0f 	andeq	ip, r8, pc, lsl #30
    26a8:	7a040800 	bvc	1046b0 <__bss_end+0xeeb60>
    26ac:	00030a08 	andeq	r0, r3, r8, lsl #20
    26b0:	06c50e00 	strbeq	r0, [r5], r0, lsl #28
    26b4:	7b040000 	blvc	1026bc <__bss_end+0xecb6c>
    26b8:	00030a11 	andeq	r0, r3, r1, lsl sl
    26bc:	210e0000 	mrscs	r0, (UNDEF: 14)
    26c0:	04000006 	streq	r0, [r0], #-6
    26c4:	006c067c 	rsbeq	r0, ip, ip, ror r6
    26c8:	00040000 	andeq	r0, r4, r0
    26cc:	00310411 	eorseq	r0, r1, r1, lsl r4
    26d0:	ee0f0000 	cdp	0, 0, cr0, cr15, cr0, {0}
    26d4:	68000008 	stmdavs	r0, {r3}
    26d8:	5308ba04 	movwpl	fp, #35332	; 0x8a04
    26dc:	10000004 	andne	r0, r0, r4
    26e0:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    26e4:	030a12bb 	movweq	r1, #41659	; 0xa2bb
    26e8:	10000000 	andne	r0, r0, r0
    26ec:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
    26f0:	006c07bc 	strhteq	r0, [ip], #-124	; 0xffffff84
    26f4:	10040000 	andne	r0, r4, r0
    26f8:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
    26fc:	006c07bd 	strhteq	r0, [ip], #-125	; 0xffffff83
    2700:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2704:	000006fd 	strdeq	r0, [r0], -sp
    2708:	3809be04 	stmdacc	r9, {r2, r9, sl, fp, ip, sp, pc}
    270c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2710:	0007d60e 	andeq	sp, r7, lr, lsl #12
    2714:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
    2718:	00000038 	andeq	r0, r0, r8, lsr r0
    271c:	625f100e 	subsvs	r1, pc, #14
    2720:	c0040066 	andgt	r0, r4, r6, rrx
    2724:	0002e211 	andeq	lr, r2, r1, lsl r2
    2728:	770e1000 	strvc	r1, [lr, -r0]
    272c:	04000006 	streq	r0, [r0], #-6
    2730:	006c07c1 	rsbeq	r0, ip, r1, asr #15
    2734:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    2738:	000006e8 	andeq	r0, r0, r8, ror #13
    273c:	8d0ac804 	stchi	8, cr12, [sl, #-16]
    2740:	1c000000 	stcne	0, cr0, [r0], {-0}
    2744:	0007aa0e 	andeq	sl, r7, lr, lsl #20
    2748:	1dca0400 	cfstrdne	mvd0, [sl]
    274c:	000005d7 	ldrdeq	r0, [r0], -r7
    2750:	08340e20 	ldmdaeq	r4!, {r5, r9, sl, fp}
    2754:	cc040000 	stcgt	0, cr0, [r4], {-0}
    2758:	0006011d 	andeq	r0, r6, sp, lsl r1
    275c:	970e2400 	strls	r2, [lr, -r0, lsl #8]
    2760:	04000009 	streq	r0, [r0], #-9
    2764:	06250dcf 	strteq	r0, [r5], -pc, asr #27
    2768:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    276c:	00000aa5 	andeq	r0, r0, r5, lsr #21
    2770:	3f09d004 	svccc	0x0009d004
    2774:	2c000006 	stccs	0, cr0, [r0], {6}
    2778:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    277c:	11d30400 	bicsne	r0, r3, r0, lsl #8
    2780:	000002e2 	andeq	r0, r0, r2, ror #5
    2784:	755f1030 	ldrbvc	r1, [pc, #-48]	; 275c <_start-0x58a4>
    2788:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
    278c:	00030a12 	andeq	r0, r3, r2, lsl sl
    2790:	5f103800 	svcpl	0x00103800
    2794:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
    2798:	006c07d5 	ldrdeq	r0, [ip], #-117	; 0xffffff8b	; <UNPREDICTABLE>
    279c:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    27a0:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    27a4:	4511d804 	ldrmi	sp, [r1, #-2052]	; 0xfffff7fc
    27a8:	40000006 	andmi	r0, r0, r6
    27ac:	000a7d0e 	andeq	r7, sl, lr, lsl #26
    27b0:	11d90400 	bicsne	r0, r9, r0, lsl #8
    27b4:	00000655 	andeq	r0, r0, r5, asr r6
    27b8:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    27bc:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
    27c0:	0002e211 	andeq	lr, r2, r1, lsl r2
    27c4:	130e4400 	movwne	r4, #58368	; 0xe400
    27c8:	04000007 	streq	r0, [r0], #-7
    27cc:	006c07df 	ldrdeq	r0, [ip], #-127	; 0xffffff81	; <UNPREDICTABLE>
    27d0:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    27d4:	00000724 	andeq	r0, r0, r4, lsr #14
    27d8:	9c0ae004 	stcls	0, cr14, [sl], {4}
    27dc:	50000000 	andpl	r0, r0, r0
    27e0:	00063a0e 	andeq	r3, r6, lr, lsl #20
    27e4:	12e30400 	rscne	r0, r3, #0, 8
    27e8:	00000471 	andeq	r0, r0, r1, ror r4
    27ec:	081a0e54 	ldmdaeq	sl, {r2, r4, r6, r9, sl, fp}
    27f0:	e7040000 	str	r0, [r4, -r0]
    27f4:	00012e0c 	andeq	r2, r1, ip, lsl #28
    27f8:	f60e5800 			; <UNDEFINED> instruction: 0xf60e5800
    27fc:	04000008 	streq	r0, [r0], #-8
    2800:	010a0ee9 	smlatteq	sl, r9, lr, r0
    2804:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    2808:	0000082c 	andeq	r0, r0, ip, lsr #16
    280c:	6c09ea04 			; <UNDEFINED> instruction: 0x6c09ea04
    2810:	64000000 	strvs	r0, [r0], #-0
    2814:	006c1500 	rsbeq	r1, ip, r0, lsl #10
    2818:	04710000 	ldrbteq	r0, [r1], #-0
    281c:	71160000 	tstvc	r6, r0
    2820:	16000004 	strne	r0, [r0], -r4
    2824:	0000008d 	andeq	r0, r0, sp, lsl #1
    2828:	0005c516 	andeq	ip, r5, r6, lsl r5
    282c:	006c1600 	rsbeq	r1, ip, r0, lsl #12
    2830:	11000000 	mrsne	r0, (UNDEF: 0)
    2834:	00047c04 	andeq	r7, r4, r4, lsl #24
    2838:	04710300 	ldrbteq	r0, [r1], #-768	; 0xfffffd00
    283c:	76170000 	ldrvc	r0, [r7], -r0
    2840:	2800000a 	stmdacs	r0, {r1, r3}
    2844:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    2848:	0005c508 	andeq	ip, r5, r8, lsl #10
    284c:	08b41800 	ldmeq	r4!, {fp, ip}
    2850:	67040000 	strvs	r0, [r4, -r0]
    2854:	006c0702 	rsbeq	r0, ip, r2, lsl #14
    2858:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    285c:	0000070c 	andeq	r0, r0, ip, lsl #14
    2860:	0b026c04 	bleq	9d878 <__bss_end+0x87d28>
    2864:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    2868:	07c61804 	strbeq	r1, [r6, r4, lsl #16]
    286c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    2870:	06b11402 	ldrteq	r1, [r1], r2, lsl #8
    2874:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    2878:	0000078b 	andeq	r0, r0, fp, lsl #15
    287c:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    2880:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    2884:	0917180c 	ldmdbeq	r7, {r2, r3, fp, ip}
    2888:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    288c:	006c0802 	rsbeq	r0, ip, r2, lsl #16
    2890:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    2894:	0000062f 	andeq	r0, r0, pc, lsr #12
    2898:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    289c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    28a0:	092b1814 	stmdbeq	fp!, {r2, r4, fp, ip}
    28a4:	72040000 	andvc	r0, r4, #0
    28a8:	006c0702 	rsbeq	r0, ip, r2, lsl #14
    28ac:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    28b0:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    28b4:	16027304 	strne	r7, [r2], -r4, lsl #6
    28b8:	000008c6 	andeq	r0, r0, r6, asr #17
    28bc:	08761834 	ldmdaeq	r6!, {r2, r4, r5, fp, ip}^
    28c0:	75040000 	strvc	r0, [r4, #-0]
    28c4:	006c0702 	rsbeq	r0, ip, r2, lsl #14
    28c8:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    28cc:	00000921 	andeq	r0, r0, r1, lsr #18
    28d0:	0a027704 	beq	a04e8 <__bss_end+0x8a998>
    28d4:	000008d7 	ldrdeq	r0, [r0], -r7
    28d8:	0805183c 	stmdaeq	r5, {r2, r3, r4, r5, fp, ip}
    28dc:	7a040000 	bvc	1028e4 <__bss_end+0xecd94>
    28e0:	01941302 	orrseq	r1, r4, r2, lsl #6
    28e4:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    28e8:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    28ec:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    28f0:	0000006c 	andeq	r0, r0, ip, rrx
    28f4:	0abf1844 	beq	fefc8a0c <_estack+0xf6fb8a0c>
    28f8:	7c040000 	stcvc	0, cr0, [r4], {-0}
    28fc:	01941302 	orrseq	r1, r4, r2, lsl #6
    2900:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    2904:	00000888 	andeq	r0, r0, r8, lsl #17
    2908:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    290c:	000008dd 	ldrdeq	r0, [r0], -sp
    2910:	07ce184c 	strbeq	r1, [lr, ip, asr #16]
    2914:	80040000 	andhi	r0, r4, r0
    2918:	006c0702 	rsbeq	r0, ip, r2, lsl #14
    291c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    2920:	0000071c 	andeq	r0, r0, ip, lsl r7
    2924:	09028104 	stmdbeq	r2, {r2, r8, pc}
    2928:	000005c5 	andeq	r0, r0, r5, asr #11
    292c:	06f81854 	usateq	r1, #24, r4, asr #16
    2930:	a4040000 	strge	r0, [r4], #-0
    2934:	088c0702 	stmeq	ip, {r1, r8, r9, sl}
    2938:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    293c:	00000864 	andeq	r0, r0, r4, ror #16
    2940:	1302a804 	movwne	sl, #10244	; 0x2804
    2944:	000002c5 	andeq	r0, r0, r5, asr #5
    2948:	e3190148 	tst	r9, #72, 2
    294c:	04000007 	streq	r0, [r0], #-7
    2950:	821202a9 	andshi	r0, r2, #-1879048182	; 0x9000000a
    2954:	4c000002 	stcmi	0, cr0, [r0], {2}
    2958:	0a5a1901 	beq	1688d64 <__bss_end+0x1673214>
    295c:	ad040000 	stcge	0, cr0, [r4, #-0]
    2960:	08ee0c02 	stmiaeq	lr!, {r1, sl, fp}^
    2964:	02dc0000 	sbcseq	r0, ip, #0
    2968:	0006f019 	andeq	pc, r6, r9, lsl r0	; <UNPREDICTABLE>
    296c:	02b20400 	adcseq	r0, r2, #0, 8
    2970:	00067210 	andeq	r7, r6, r0, lsl r2
    2974:	1902e000 	stmdbne	r2, {sp, lr, pc}
    2978:	000006d5 	ldrdeq	r0, [r0], -r5
    297c:	0a02b404 	beq	af994 <__bss_end+0x99e44>
    2980:	000008fa 	strdeq	r0, [r0], -sl
    2984:	110002ec 	smlattne	r0, ip, r2, r0
    2988:	0005cb04 	andeq	ip, r5, r4, lsl #22
    298c:	08010200 	stmdaeq	r1, {r9}
    2990:	000008ad 	andeq	r0, r0, sp, lsr #17
    2994:	0005cb03 	andeq	ip, r5, r3, lsl #22
    2998:	53041100 	movwpl	r1, #16640	; 0x4100
    299c:	15000004 	strne	r0, [r0, #-4]
    29a0:	0000006c 	andeq	r0, r0, ip, rrx
    29a4:	000005fb 	strdeq	r0, [r0], -fp
    29a8:	00047116 	andeq	r7, r4, r6, lsl r1
    29ac:	008d1600 	addeq	r1, sp, r0, lsl #12
    29b0:	fb160000 	blx	5829ba <__bss_end+0x56ce6a>
    29b4:	16000005 	strne	r0, [r0], -r5
    29b8:	0000006c 	andeq	r0, r0, ip, rrx
    29bc:	d2041100 	andle	r1, r4, #0, 2
    29c0:	11000005 	tstne	r0, r5
    29c4:	0005dd04 	andeq	sp, r5, r4, lsl #26
    29c8:	00a81500 	adceq	r1, r8, r0, lsl #10
    29cc:	06250000 	strteq	r0, [r5], -r0
    29d0:	71160000 	tstvc	r6, r0
    29d4:	16000004 	strne	r0, [r0], -r4
    29d8:	0000008d 	andeq	r0, r0, sp, lsl #1
    29dc:	0000a816 	andeq	sl, r0, r6, lsl r8
    29e0:	006c1600 	rsbeq	r1, ip, r0, lsl #12
    29e4:	11000000 	mrsne	r0, (UNDEF: 0)
    29e8:	00060704 	andeq	r0, r6, r4, lsl #14
    29ec:	006c1500 	rsbeq	r1, ip, r0, lsl #10
    29f0:	063f0000 	ldrteq	r0, [pc], -r0
    29f4:	71160000 	tstvc	r6, r0
    29f8:	16000004 	strne	r0, [r0], -r4
    29fc:	0000008d 	andeq	r0, r0, sp, lsl #1
    2a00:	2b041100 	blcs	106e08 <__bss_end+0xf12b8>
    2a04:	0b000006 	bleq	2a24 <_start-0x55dc>
    2a08:	00000031 	andeq	r0, r0, r1, lsr r0
    2a0c:	00000655 	andeq	r0, r0, r5, asr r6
    2a10:	0000730c 	andeq	r7, r0, ip, lsl #6
    2a14:	0b000200 	bleq	321c <_start-0x4de4>
    2a18:	00000031 	andeq	r0, r0, r1, lsr r0
    2a1c:	00000665 	andeq	r0, r0, r5, ror #12
    2a20:	0000730c 	andeq	r7, r0, ip, lsl #6
    2a24:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2a28:	000008dc 	ldrdeq	r0, [r0], -ip
    2a2c:	1a012404 	bne	4ba44 <__bss_end+0x35ef4>
    2a30:	00000310 	andeq	r0, r0, r0, lsl r3
    2a34:	000a411a 	andeq	r4, sl, sl, lsl r1
    2a38:	28040c00 	stmdacs	r4, {sl, fp}
    2a3c:	06ab0801 	strteq	r0, [fp], r1, lsl #16
    2a40:	04180000 	ldreq	r0, [r8], #-0
    2a44:	04000009 	streq	r0, [r0], #-9
    2a48:	ab11012a 	blge	442ef8 <__bss_end+0x42d3a8>
    2a4c:	00000006 	andeq	r0, r0, r6
    2a50:	0007dc18 	andeq	sp, r7, r8, lsl ip
    2a54:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
    2a58:	00006c07 	andeq	r6, r0, r7, lsl #24
    2a5c:	d6180400 	ldrle	r0, [r8], -r0, lsl #8
    2a60:	04000008 	streq	r0, [r0], #-8
    2a64:	b10b012c 	tstlt	fp, ip, lsr #2
    2a68:	08000006 	stmdaeq	r0, {r1, r2}
    2a6c:	72041100 	andvc	r1, r4, #0, 2
    2a70:	11000006 	tstne	r0, r6
    2a74:	00066504 	andeq	r6, r6, r4, lsl #10
    2a78:	06271a00 	strteq	r1, [r7], -r0, lsl #20
    2a7c:	040e0000 	streq	r0, [lr], #-0
    2a80:	f0080144 			; <UNDEFINED> instruction: 0xf0080144
    2a84:	18000006 	stmdane	r0, {r1, r2}
    2a88:	00000981 	andeq	r0, r0, r1, lsl #19
    2a8c:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
    2a90:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a94:	09c11800 	stmibeq	r1, {fp, ip}^
    2a98:	46040000 	strmi	r0, [r4], -r0
    2a9c:	06f01201 	ldrbteq	r1, [r0], r1, lsl #4
    2aa0:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2aa4:	000009dd 	ldrdeq	r0, [r0], -sp
    2aa8:	12014704 	andne	r4, r1, #4, 14	; 0x100000
    2aac:	0000003f 	andeq	r0, r0, pc, lsr r0
    2ab0:	3f0b000c 	svccc	0x000b000c
    2ab4:	00000000 	andeq	r0, r0, r0
    2ab8:	0c000007 	stceq	0, cr0, [r0], {7}
    2abc:	00000073 	andeq	r0, r0, r3, ror r0
    2ac0:	d01b0002 	andsle	r0, fp, r2
    2ac4:	07028504 	streq	r8, [r2, -r4, lsl #10]
    2ac8:	00000815 	andeq	r0, r0, r5, lsl r8
    2acc:	000a1518 	andeq	r1, sl, r8, lsl r5
    2ad0:	02870400 	addeq	r0, r7, #0, 8
    2ad4:	00007318 	andeq	r7, r0, r8, lsl r3
    2ad8:	c7180000 	ldrgt	r0, [r8, -r0]
    2adc:	04000009 	streq	r0, [r0], #-9
    2ae0:	c5120288 	ldrgt	r0, [r2, #-648]	; 0xfffffd78
    2ae4:	04000005 	streq	r0, [r0], #-5
    2ae8:	0007f818 	andeq	pc, r7, r8, lsl r8	; <UNPREDICTABLE>
    2aec:	02890400 	addeq	r0, r9, #0, 8
    2af0:	00081510 	andeq	r1, r8, r0, lsl r5
    2af4:	96180800 	ldrls	r0, [r8], -r0, lsl #16
    2af8:	0400000a 	streq	r0, [r0], #-10
    2afc:	aa17028a 	bge	5c352c <__bss_end+0x5ad9dc>
    2b00:	24000001 	strcs	r0, [r0], #-1
    2b04:	00079b18 	andeq	r9, r7, r8, lsl fp
    2b08:	028b0400 	addeq	r0, fp, #0, 8
    2b0c:	00006c0f 	andeq	r6, r0, pc, lsl #24
    2b10:	ff184800 			; <UNDEFINED> instruction: 0xff184800
    2b14:	04000008 	streq	r0, [r0], #-8
    2b18:	652c028c 	strvs	r0, [ip, #-652]!	; 0xfffffd74
    2b1c:	50000000 	andpl	r0, r0, r0
    2b20:	000aac18 	andeq	sl, sl, r8, lsl ip
    2b24:	028d0400 	addeq	r0, sp, #0, 8
    2b28:	0006b71a 	andeq	fp, r6, sl, lsl r7
    2b2c:	0a185800 	beq	618b34 <__bss_end+0x602fe4>
    2b30:	04000009 	streq	r0, [r0], #-9
    2b34:	0a16028e 	beq	583574 <__bss_end+0x56da24>
    2b38:	68000001 	stmdavs	r0, {r0}
    2b3c:	000ab118 	andeq	fp, sl, r8, lsl r1
    2b40:	028f0400 	addeq	r0, pc, #0, 8
    2b44:	00010a16 	andeq	r0, r1, r6, lsl sl
    2b48:	a8187000 	ldmdage	r8, {ip, sp, lr}
    2b4c:	04000006 	streq	r0, [r0], #-6
    2b50:	0a160290 	beq	583598 <__bss_end+0x56da48>
    2b54:	78000001 	stmdavc	r0, {r0}
    2b58:	000a5018 	andeq	r5, sl, r8, lsl r0
    2b5c:	02910400 	addseq	r0, r1, #0, 8
    2b60:	00082510 	andeq	r2, r8, r0, lsl r5
    2b64:	ec188000 	ldc	0, cr8, [r8], {-0}
    2b68:	04000007 	streq	r0, [r0], #-7
    2b6c:	35100292 	ldrcc	r0, [r0, #-658]	; 0xfffffd6e
    2b70:	88000008 	stmdahi	r0, {r3}
    2b74:	0009f518 	andeq	pc, r9, r8, lsl r5	; <UNPREDICTABLE>
    2b78:	02930400 	addseq	r0, r3, #0, 8
    2b7c:	00006c0f 	andeq	r6, r0, pc, lsl #24
    2b80:	5318a000 	tstpl	r8, #0
    2b84:	04000007 	streq	r0, [r0], #-7
    2b88:	0a160294 	beq	5835e0 <__bss_end+0x56da90>
    2b8c:	a4000001 	strge	r0, [r0], #-1
    2b90:	00069918 	andeq	r9, r6, r8, lsl r9
    2b94:	02950400 	addseq	r0, r5, #0, 8
    2b98:	00010a16 	andeq	r0, r1, r6, lsl sl
    2b9c:	4218ac00 	andsmi	sl, r8, #0, 24
    2ba0:	04000007 	streq	r0, [r0], #-7
    2ba4:	0a160296 	beq	583604 <__bss_end+0x56dab4>
    2ba8:	b4000001 	strlt	r0, [r0], #-1
    2bac:	00064018 	andeq	r4, r6, r8, lsl r0
    2bb0:	02970400 	addseq	r0, r7, #0, 8
    2bb4:	00010a16 	andeq	r0, r1, r6, lsl sl
    2bb8:	4f18bc00 	svcmi	0x0018bc00
    2bbc:	04000006 	streq	r0, [r0], #-6
    2bc0:	0a160298 	beq	583628 <__bss_end+0x56dad8>
    2bc4:	c4000001 	strgt	r0, [r0], #-1
    2bc8:	0008b218 	andeq	fp, r8, r8, lsl r2
    2bcc:	02990400 	addseq	r0, r9, #0, 8
    2bd0:	00006c08 	andeq	r6, r0, r8, lsl #24
    2bd4:	0b00cc00 	bleq	35bdc <__bss_end+0x2008c>
    2bd8:	000005cb 	andeq	r0, r0, fp, asr #11
    2bdc:	00000825 	andeq	r0, r0, r5, lsr #16
    2be0:	0000730c 	andeq	r7, r0, ip, lsl #6
    2be4:	0b001900 	bleq	8fec <__module_entries_end+0xf48>
    2be8:	000005cb 	andeq	r0, r0, fp, asr #11
    2bec:	00000835 	andeq	r0, r0, r5, lsr r8
    2bf0:	0000730c 	andeq	r7, r0, ip, lsl #6
    2bf4:	0b000700 	bleq	47fc <_start-0x3804>
    2bf8:	000005cb 	andeq	r0, r0, fp, asr #11
    2bfc:	00000845 	andeq	r0, r0, r5, asr #16
    2c00:	0000730c 	andeq	r7, r0, ip, lsl #6
    2c04:	1b001700 	blne	880c <__module_entries_end+0x768>
    2c08:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
    2c0c:	00086c07 	andeq	r6, r8, r7, lsl #24
    2c10:	08541800 	ldmdaeq	r4, {fp, ip}^
    2c14:	a1040000 	mrsge	r0, (UNDEF: 4)
    2c18:	086c1b02 	stmdaeq	ip!, {r1, r8, r9, fp, ip}^
    2c1c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2c20:	00000a47 	andeq	r0, r0, r7, asr #20
    2c24:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
    2c28:	0000087c 	andeq	r0, r0, ip, ror r8
    2c2c:	0a0b0078 	beq	2c2e14 <__bss_end+0x2ad2c4>
    2c30:	7c000003 	stcvc	0, cr0, [r0], {3}
    2c34:	0c000008 	stceq	0, cr0, [r0], {8}
    2c38:	00000073 	andeq	r0, r0, r3, ror r0
    2c3c:	730b001d 	movwvc	r0, #45085	; 0xb01d
    2c40:	8c000000 	stchi	0, cr0, [r0], {-0}
    2c44:	0c000008 	stceq	0, cr0, [r0], {8}
    2c48:	00000073 	andeq	r0, r0, r3, ror r0
    2c4c:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    2c50:	03028304 	movweq	r8, #8964	; 0x2304
    2c54:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    2c58:	000a761d 	andeq	r7, sl, sp, lsl r6
    2c5c:	029a0400 	addseq	r0, sl, #0, 8
    2c60:	0007000b 	andeq	r0, r7, fp
    2c64:	0a831d00 	beq	fe0ca06c <_estack+0xf60ba06c>
    2c68:	a3040000 	movwge	r0, #16384	; 0x4000
    2c6c:	08450b02 	stmdaeq	r5, {r1, r8, r9, fp}^
    2c70:	0b000000 	bleq	2c78 <_start-0x5388>
    2c74:	000005cb 	andeq	r0, r0, fp, asr #11
    2c78:	000008c1 	andeq	r0, r0, r1, asr #17
    2c7c:	0000730c 	andeq	r7, r0, ip, lsl #6
    2c80:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    2c84:	00000680 	andeq	r0, r0, r0, lsl #13
    2c88:	08c10411 	stmiaeq	r1, {r0, r4, sl}^
    2c8c:	d71f0000 	ldrle	r0, [pc, -r0]
    2c90:	16000008 	strne	r0, [r0], -r8
    2c94:	00000471 	andeq	r0, r0, r1, ror r4
    2c98:	cc041100 	stfgts	f1, [r4], {-0}
    2c9c:	11000008 	tstne	r0, r8
    2ca0:	00019404 	andeq	r9, r1, r4, lsl #8
    2ca4:	08ee1f00 	stmiaeq	lr!, {r8, r9, sl, fp, ip}^
    2ca8:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    2cac:	00000000 	andeq	r0, r0, r0
    2cb0:	08f40411 	ldmeq	r4!, {r0, r4, sl}^
    2cb4:	04110000 	ldreq	r0, [r1], #-0
    2cb8:	000008e3 	andeq	r0, r0, r3, ror #17
    2cbc:	0006650b 	andeq	r6, r6, fp, lsl #10
    2cc0:	00090a00 	andeq	r0, r9, r0, lsl #20
    2cc4:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    2cc8:	00020000 	andeq	r0, r2, r0
    2ccc:	000a0920 	andeq	r0, sl, r0, lsr #18
    2cd0:	03330400 	teqeq	r3, #0, 8
    2cd4:	00047117 	andeq	r7, r4, r7, lsl r1
    2cd8:	0a022000 	beq	8ace0 <__bss_end+0x75190>
    2cdc:	34040000 	strcc	r0, [r4], #-0
    2ce0:	04771d03 	ldrbteq	r1, [r7], #-3331	; 0xfffff2fd
    2ce4:	6c210000 	stcvs	0, cr0, [r1], #-0
    2ce8:	06000008 	streq	r0, [r0], -r8
    2cec:	05c50e67 	strbeq	r0, [r5, #3687]	; 0xe67
    2cf0:	6c060000 	stcvs	0, cr0, [r6], {-0}
    2cf4:	07000000 	streq	r0, [r0, -r0]
    2cf8:	093c1047 	ldmdbeq	ip!, {r0, r1, r2, r6, ip}
    2cfc:	04110000 	ldreq	r0, [r1], #-0
    2d00:	00000942 	andeq	r0, r0, r2, asr #18
    2d04:	00094d1f 	andeq	r4, r9, pc, lsl sp
    2d08:	008d1600 	addeq	r1, sp, r0, lsl #12
    2d0c:	06000000 	streq	r0, [r0], -r0
    2d10:	0000000c 	andeq	r0, r0, ip
    2d14:	521c6108 	andspl	r6, ip, #8, 2
    2d18:	04000000 	streq	r0, [r0], #-0
    2d1c:	0000094d 	andeq	r0, r0, sp, asr #18
    2d20:	00111506 	andseq	r1, r1, r6, lsl #10
    2d24:	19570900 	ldmdbne	r7, {r8, fp}^
    2d28:	0000096a 	andeq	r0, r0, sl, ror #18
    2d2c:	09700411 	ldmdbeq	r0!, {r0, r4, sl}^
    2d30:	46150000 	ldrmi	r0, [r5], -r0
    2d34:	7f000000 	svcvc	0x00000000
    2d38:	16000009 	strne	r0, [r0], -r9
    2d3c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2d40:	036d0f00 	cmneq	sp, #0, 30
    2d44:	0a140000 	beq	502d4c <__bss_end+0x4ed1fc>
    2d48:	09ce0869 	stmibeq	lr, {r0, r3, r5, r6, fp}^
    2d4c:	200e0000 	andcs	r0, lr, r0
    2d50:	0a000003 	beq	2d64 <_start-0x529c>
    2d54:	094d0f6b 	stmdbeq	sp, {r0, r1, r3, r5, r6, r8, r9, sl, fp}^
    2d58:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2d5c:	000004d9 	ldrdeq	r0, [r0], -r9
    2d60:	d31f6c0a 	tstle	pc, #2560	; 0xa00
    2d64:	04000009 	streq	r0, [r0], #-9
    2d68:	0003f00e 	andeq	pc, r3, lr
    2d6c:	1f6d0a00 	svcne	0x006d0a00
    2d70:	000009d3 	ldrdeq	r0, [r0], -r3
    2d74:	03420e08 	movteq	r0, #11784	; 0x2e08
    2d78:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    2d7c:	00008d09 	andeq	r8, r0, r9, lsl #26
    2d80:	eb0e0c00 	bl	385d88 <__bss_end+0x370238>
    2d84:	0a000002 	beq	2d94 <_start-0x526c>
    2d88:	008d096f 	addeq	r0, sp, pc, ror #18
    2d8c:	00100000 	andseq	r0, r0, r0
    2d90:	00097f04 	andeq	r7, r9, r4, lsl #30
    2d94:	ce041100 	adfgts	f1, f4, f0
    2d98:	06000009 	streq	r0, [r0], -r9
    2d9c:	000004f8 	strdeq	r0, [r0], -r8
    2da0:	7f1b710a 	svcvc	0x001b710a
    2da4:	04000009 	streq	r0, [r0], #-9
    2da8:	000009d9 	ldrdeq	r0, [r0], -r9
    2dac:	00056e0f 	andeq	r6, r5, pc, lsl #28
    2db0:	730a0c00 	movwvc	r0, #44032	; 0xac00
    2db4:	000a1f08 	andeq	r1, sl, r8, lsl #30
    2db8:	03200e00 	nopeq	{0}	; <UNPREDICTABLE>
    2dbc:	750a0000 	strvc	r0, [sl, #-0]
    2dc0:	00094d0f 	andeq	r4, r9, pc, lsl #26
    2dc4:	d90e0000 	stmdble	lr, {}	; <UNPREDICTABLE>
    2dc8:	0a000004 	beq	2de0 <_start-0x5220>
    2dcc:	09d31e76 	ldmibeq	r3, {r1, r2, r4, r5, r6, r9, sl, fp, ip}^
    2dd0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2dd4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2dd8:	d31e770a 	tstle	lr, #2621440	; 0x280000
    2ddc:	08000009 	stmdaeq	r0, {r0, r3}
    2de0:	04600600 	strbteq	r0, [r0], #-1536	; 0xfffffa00
    2de4:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
    2de8:	0009ea20 	andeq	lr, r9, r0, lsr #20
    2dec:	0a1f0400 	beq	7c3df4 <__bss_end+0x7ae2a4>
    2df0:	7e0f0000 	cdpvc	0, 0, cr0, cr15, cr0, {0}
    2df4:	14000005 	strne	r0, [r0], #-5
    2df8:	65107e0a 	ldrvs	r7, [r0, #-3594]	; 0xfffff1f6
    2dfc:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    2e00:	0000047f 	andeq	r0, r0, pc, ror r4
    2e04:	5922800a 	stmdbpl	r2!, {r1, r3, pc}
    2e08:	00000000 	andeq	r0, r0, r0
    2e0c:	0003180e 	andeq	r1, r3, lr, lsl #16
    2e10:	17810a00 	strne	r0, [r1, r0, lsl #20]
    2e14:	00000a65 	andeq	r0, r0, r5, ror #20
    2e18:	03390e04 	teqeq	r9, #4, 28	; 0x40
    2e1c:	820a0000 	andhi	r0, sl, #0
    2e20:	000a2b19 	andeq	r2, sl, r9, lsl fp
    2e24:	11000800 	tstne	r0, r0, lsl #16
    2e28:	0009e504 	andeq	lr, r9, r4, lsl #10
    2e2c:	09b20600 	ldmibeq	r2!, {r9, sl}
    2e30:	830a0000 	movwhi	r0, #40960	; 0xa000
    2e34:	000a3003 	andeq	r3, sl, r3
    2e38:	0a6b0300 	beq	1ac3a40 <__bss_end+0x1aadef0>
    2e3c:	66060000 	strvs	r0, [r6], -r0
    2e40:	0b000010 	bleq	2e88 <_start-0x5178>
    2e44:	008d1063 	addeq	r1, sp, r3, rrx
    2e48:	8b0f0000 	blhi	3c2e50 <__bss_end+0x3ad300>
    2e4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2e50:	b010680b 	andslt	r6, r0, fp, lsl #16
    2e54:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    2e58:	00000ba0 	andeq	r0, r0, r0, lsr #23
    2e5c:	46106a0b 	ldrmi	r6, [r0], -fp, lsl #20
    2e60:	00000000 	andeq	r0, r0, r0
    2e64:	000df10e 	andeq	pc, sp, lr, lsl #2
    2e68:	106b0b00 	rsbne	r0, fp, r0, lsl #22
    2e6c:	0000094d 	andeq	r0, r0, sp, asr #18
    2e70:	11060004 	tstne	r6, r4
    2e74:	0b00000c 	bleq	2eac <_start-0x5154>
    2e78:	0a88036c 	beq	fe203c30 <_estack+0xf61f3c30>
    2e7c:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    2e80:	0c000012 	stceq	0, cr0, [r0], {18}
    2e84:	f110710b 			; <UNDEFINED> instruction: 0xf110710b
    2e88:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    2e8c:	0000137a 	andeq	r1, r0, sl, ror r3
    2e90:	8d08730b 	stchi	3, cr7, [r8, #-44]	; 0xffffffd4
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	0013030e 	andseq	r0, r3, lr, lsl #6
    2e9c:	10740b00 	rsbsne	r0, r4, r0, lsl #22
    2ea0:	00000052 	andeq	r0, r0, r2, asr r0
    2ea4:	0ed10e04 	cdpeq	14, 13, cr0, cr1, cr4, {0}
    2ea8:	750b0000 	strvc	r0, [fp, #-0]
    2eac:	00005210 	andeq	r5, r0, r0, lsl r2
    2eb0:	06000800 	streq	r0, [r0], -r0, lsl #16
    2eb4:	000011ce 	andeq	r1, r0, lr, asr #3
    2eb8:	bc03760b 	stclt	6, cr7, [r3], {11}
    2ebc:	0300000a 	movweq	r0, #10
    2ec0:	00000af1 	strdeq	r0, [r0], -r1
    2ec4:	002c0411 	eoreq	r0, ip, r1, lsl r4
    2ec8:	02030000 	andeq	r0, r3, #0
    2ecc:	1100000b 	tstne	r0, fp
    2ed0:	00005204 	andeq	r5, r0, r4, lsl #4
    2ed4:	0e270f00 	cdpeq	15, 2, cr0, cr7, cr0, {0}
    2ed8:	01480000 	mrseq	r0, (UNDEF: 72)
    2edc:	0b7c1066 	bleq	1f0707c <__bss_end+0x1ef152c>
    2ee0:	400e0000 	andmi	r0, lr, r0
    2ee4:	01000001 	tsteq	r0, r1
    2ee8:	0b7c1b68 	bleq	1f09c90 <__bss_end+0x1ef4140>
    2eec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2ef0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    2ef4:	d90f6e01 	stmdble	pc, {r0, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
    2ef8:	04000009 	streq	r0, [r0], #-9
    2efc:	0005e10e 	andeq	lr, r5, lr, lsl #2
    2f00:	0f6f0100 	svceq	0x006f0100
    2f04:	000009d9 	ldrdeq	r0, [r0], -r9
    2f08:	04a20e18 	strteq	r0, [r2], #3608	; 0xe18
    2f0c:	70010000 	andvc	r0, r1, r0
    2f10:	00005219 	andeq	r5, r0, r9, lsl r2
    2f14:	810e2c00 	tsthi	lr, r0, lsl #24
    2f18:	01000012 	tsteq	r0, r2, lsl r0
    2f1c:	0b0d1471 	bleq	3480e8 <__bss_end+0x332598>
    2f20:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    2f24:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2f28:	82117201 	andshi	r7, r1, #268435456	; 0x10000000
    2f2c:	3400000b 	strcc	r0, [r0], #-11
    2f30:	0012770e 	andseq	r7, r2, lr, lsl #14
    2f34:	14860100 	strne	r0, [r6], #256	; 0x100
    2f38:	0000095e 	andeq	r0, r0, lr, asr r9
    2f3c:	04110044 	ldreq	r0, [r1], #-68	; 0xffffffbc
    2f40:	00000059 	andeq	r0, r0, r9, asr r0
    2f44:	0000250b 	andeq	r2, r0, fp, lsl #10
    2f48:	000b9200 	andeq	r9, fp, r0, lsl #4
    2f4c:	00730c00 	rsbseq	r0, r3, r0, lsl #24
    2f50:	000f0000 	andeq	r0, pc, r0
    2f54:	00107206 	andseq	r7, r0, r6, lsl #4
    2f58:	03930100 	orrseq	r0, r3, #0, 2
    2f5c:	00000b13 	andeq	r0, r0, r3, lsl fp
    2f60:	000b9203 	andeq	r9, fp, r3, lsl #4
    2f64:	01f32200 	mvnseq	r2, r0, lsl #4
    2f68:	9f010000 	svcls	0x00010000
    2f6c:	000bbb23 	andeq	fp, fp, r3, lsr #22
    2f70:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    2f74:	11000147 	tstne	r0, r7, asr #2
    2f78:	000b9204 	andeq	r9, fp, r4, lsl #4
    2f7c:	0bb50400 	bleq	fed43f84 <_estack+0xf6d33f84>
    2f80:	6b0b0000 	blvs	2c2f88 <__bss_end+0x2ad438>
    2f84:	d000000a 	andle	r0, r0, sl
    2f88:	0c00000b 	stceq	0, cr0, [r0], {11}
    2f8c:	00000073 	andeq	r0, r0, r3, ror r0
    2f90:	89230004 	stmdbhi	r3!, {r2}
    2f94:	0100000e 	tsteq	r0, lr
    2f98:	0bc01ea3 	bleq	ff00aa2c <_estack+0xf6ffaa2c>
    2f9c:	03050000 	movweq	r0, #20480	; 0x5000
    2fa0:	000147f8 	strdeq	r4, [r1], -r8
    2fa4:	000f0523 	andeq	r0, pc, r3, lsr #10
    2fa8:	1ea40100 	fdvnes	f0, f4, f0
    2fac:	00000a6b 	andeq	r0, r0, fp, ror #20
    2fb0:	485c0305 	ldmdami	ip, {r0, r2, r8, r9}^
    2fb4:	17230001 	strne	r0, [r3, -r1]!
    2fb8:	0100000f 	tsteq	r0, pc
    2fbc:	0a6b1ea5 	beq	1acaa58 <__bss_end+0x1ab4f08>
    2fc0:	03050000 	movweq	r0, #20480	; 0x5000
    2fc4:	00014870 	andeq	r4, r1, r0, ror r8
    2fc8:	00129823 	andseq	r9, r2, r3, lsr #16
    2fcc:	29a60100 	stmibcs	r6!, {r8}
    2fd0:	00000c1e 	andeq	r0, r0, lr, lsl ip
    2fd4:	48840305 	stmmi	r4, {r0, r2, r8, r9}
    2fd8:	04110001 	ldreq	r0, [r1], #-1
    2fdc:	00000a6b 	andeq	r0, r0, fp, ror #20
    2fe0:	000c1804 	andeq	r1, ip, r4, lsl #16
    2fe4:	0c180300 	ldceq	3, cr0, [r8], {-0}
    2fe8:	a1230000 			; <UNDEFINED> instruction: 0xa1230000
    2fec:	01000010 	tsteq	r0, r0, lsl r0
    2ff0:	0c1e29a7 			; <UNDEFINED> instruction: 0x0c1e29a7
    2ff4:	03050000 	movweq	r0, #20480	; 0x5000
    2ff8:	00014888 	andeq	r4, r1, r8, lsl #17
    2ffc:	000fd723 	andeq	sp, pc, r3, lsr #14
    3000:	1ea80100 	fdvnee	f0, f0, f0
    3004:	00000a6b 	andeq	r0, r0, fp, ror #20
    3008:	488c0305 	stmmi	ip, {r0, r2, r8, r9}
    300c:	30230001 	eorcc	r0, r3, r1
    3010:	01000010 	tsteq	r0, r0, lsl r0
    3014:	0a6b1fac 	beq	1acaecc <__bss_end+0x1ab537c>
    3018:	03050000 	movweq	r0, #20480	; 0x5000
    301c:	000148a0 	andeq	r4, r1, r0, lsr #17
    3020:	00108723 	andseq	r8, r0, r3, lsr #14
    3024:	39ad0100 	stmibcc	sp!, {r8}
    3028:	00000059 	andeq	r0, r0, r9, asr r0
    302c:	48b40305 	ldmmi	r4!, {r0, r2, r8, r9}
    3030:	ab230001 	blge	8c303c <__bss_end+0x8ad4ec>
    3034:	0100000f 	tsteq	r0, pc
    3038:	0a6b1fb3 	beq	1acaf0c <__bss_end+0x1ab53bc>
    303c:	03050000 	movweq	r0, #20480	; 0x5000
    3040:	000148b8 			; <UNDEFINED> instruction: 0x000148b8
    3044:	0013f623 	andseq	pc, r3, r3, lsr #12
    3048:	38be0100 	ldmcc	lr!, {r8}
    304c:	00000059 	andeq	r0, r0, r9, asr r0
    3050:	48cc0305 	stmiami	ip, {r0, r2, r8, r9}^
    3054:	96230001 	strtls	r0, [r3], -r1
    3058:	01000010 	tsteq	r0, r0, lsl r0
    305c:	09592ebf 	ldmdbeq	r9, {r0, r1, r2, r3, r4, r5, r7, r9, sl, fp, sp}^
    3060:	03050000 	movweq	r0, #20480	; 0x5000
    3064:	000148d0 	ldrdeq	r4, [r1], -r0
    3068:	0012aa23 	andseq	sl, r2, r3, lsr #20
    306c:	2fc00100 	svccs	0x00c00100
    3070:	00000052 	andeq	r0, r0, r2, asr r0
    3074:	48d40305 	ldmmi	r4, {r0, r2, r8, r9}^
    3078:	52230001 	eorpl	r0, r3, #1
    307c:	0100000e 	tsteq	r0, lr
    3080:	005938c1 	subseq	r3, r9, r1, asr #17
    3084:	03050000 	movweq	r0, #20480	; 0x5000
    3088:	000148d8 	ldrdeq	r4, [r1], -r8
    308c:	000e7723 	andeq	r7, lr, r3, lsr #14
    3090:	36c20100 	strbcc	r0, [r2], r0, lsl #2
    3094:	0000004d 	andeq	r0, r0, sp, asr #32
    3098:	48dc0305 	ldmmi	ip, {r0, r2, r8, r9}^
    309c:	70230001 	eorvc	r0, r3, r1
    30a0:	0100000f 	tsteq	r0, pc
    30a4:	005938c3 	subseq	r3, r9, r3, asr #17
    30a8:	03050000 	movweq	r0, #20480	; 0x5000
    30ac:	000148e0 	andeq	r4, r1, r0, ror #17
    30b0:	000f4423 	andeq	r4, pc, r3, lsr #8
    30b4:	38c40100 	stmiacc	r4, {r8}^
    30b8:	00000059 	andeq	r0, r0, r9, asr r0
    30bc:	48e40305 	stmiami	r4!, {r0, r2, r8, r9}^
    30c0:	49230001 	stmdbmi	r3!, {r0}
    30c4:	01000010 	tsteq	r0, r0, lsl r0
    30c8:	004d2fc5 	subeq	r2, sp, r5, asr #31
    30cc:	03050000 	movweq	r0, #20480	; 0x5000
    30d0:	000148e8 	andeq	r4, r1, r8, ror #17
    30d4:	00126723 	andseq	r6, r2, r3, lsr #14
    30d8:	2fc60100 	svccs	0x00c60100
    30dc:	0000004d 	andeq	r0, r0, sp, asr #32
    30e0:	48ec0305 	stmiami	ip!, {r0, r2, r8, r9}^
    30e4:	b0230001 	eorlt	r0, r3, r1
    30e8:	01000011 	tsteq	r0, r1, lsl r0
    30ec:	00522fc7 	subseq	r2, r2, r7, asr #31
    30f0:	03050000 	movweq	r0, #20480	; 0x5000
    30f4:	000148f0 	strdeq	r4, [r1], -r0
    30f8:	00116823 	andseq	r6, r1, r3, lsr #16
    30fc:	25c80100 	strbcs	r0, [r8, #256]	; 0x100
    3100:	0000094d 	andeq	r0, r0, sp, asr #18
    3104:	47640305 	strbmi	r0, [r4, -r5, lsl #6]!
    3108:	98240001 	stmdals	r4!, {r0}
    310c:	01000013 	tsteq	r0, r3, lsl r0
    3110:	900e0929 	andls	r0, lr, r9, lsr #18
    3114:	34000134 	strcc	r0, [r0], #-308	; 0xfffffecc
    3118:	01000000 	mrseq	r0, (UNDEF: 0)
    311c:	000d709c 	muleq	sp, ip, r0
    3120:	141c2500 	ldrne	r2, [ip], #-1280	; 0xfffffb00
    3124:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3128:	0bb52409 	bleq	fed4c154 <_estack+0xf6d3c154>
    312c:	91020000 	mrsls	r0, (UNDEF: 2)
    3130:	94260074 	strtls	r0, [r6], #-116	; 0xffffff8c
    3134:	0100000f 	tsteq	r0, pc
    3138:	b510086a 	ldrlt	r0, [r0, #-2154]	; 0xfffff796
    313c:	e000000b 	and	r0, r0, fp
    3140:	b0000133 	andlt	r0, r0, r3, lsr r1
    3144:	01000000 	mrseq	r0, (UNDEF: 0)
    3148:	000dbc9c 	muleq	sp, ip, ip
    314c:	117d2500 	cmnne	sp, r0, lsl #10
    3150:	6a010000 	bvs	43158 <__bss_end+0x2d608>
    3154:	003f3708 	eorseq	r3, pc, r8, lsl #14
    3158:	91020000 	mrsls	r0, (UNDEF: 2)
    315c:	1337256e 	teqne	r7, #461373440	; 0x1b800000
    3160:	6a010000 	bvs	43168 <__bss_end+0x2d618>
    3164:	0b0d5508 	bleq	35858c <__bss_end+0x342a3c>
    3168:	91020000 	mrsls	r0, (UNDEF: 2)
    316c:	11422768 	cmpne	r2, r8, ror #14
    3170:	6c010000 	stcvs	0, cr0, [r1], {-0}
    3174:	0bb50908 	bleq	fed4559c <_estack+0xf6d3559c>
    3178:	91020000 	mrsls	r0, (UNDEF: 2)
    317c:	d7240074 			; <UNDEFINED> instruction: 0xd7240074
    3180:	01000013 	tsteq	r0, r3, lsl r0
    3184:	280d0850 	stmdacs	sp, {r4, r6, fp}
    3188:	b8000133 	stmdalt	r0, {r0, r1, r4, r5, r8}
    318c:	01000000 	mrseq	r0, (UNDEF: 0)
    3190:	000de49c 	muleq	sp, ip, r4
    3194:	05152500 	ldreq	r2, [r5, #-1280]	; 0xfffffb00
    3198:	50010000 	andpl	r0, r1, r0
    319c:	094d3a08 	stmdbeq	sp, {r3, r9, fp, ip, sp}^
    31a0:	91020000 	mrsls	r0, (UNDEF: 2)
    31a4:	5a240074 	bpl	90337c <__bss_end+0x8ed82c>
    31a8:	01000013 	tsteq	r0, r3, lsl r0
    31ac:	6c0d082d 	stcvs	8, cr0, [sp], {45}	; 0x2d
    31b0:	bc000132 	stflts	f0, [r0], {50}	; 0x32
    31b4:	01000000 	mrseq	r0, (UNDEF: 0)
    31b8:	000e309c 	muleq	lr, ip, r0
    31bc:	32782800 	rsbscc	r2, r8, #0, 16
    31c0:	00980001 	addseq	r0, r8, r1
    31c4:	26270000 	strtcs	r0, [r7], -r0
    31c8:	01000011 	tsteq	r0, r1, lsl r0
    31cc:	46110831 			; <UNDEFINED> instruction: 0x46110831
    31d0:	02000000 	andeq	r0, r0, #0
    31d4:	b8287491 	stmdalt	r8!, {r0, r4, r7, sl, ip, sp, lr}
    31d8:	58000132 	stmdapl	r0, {r1, r4, r5, r8}
    31dc:	27000000 	strcs	r0, [r0, -r0]
    31e0:	0000141c 	andeq	r1, r0, ip, lsl r4
    31e4:	0d083d01 	stceq	13, cr3, [r8, #-4]
    31e8:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    31ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
    31f0:	fe240000 	cdp2	0, 2, cr0, cr4, cr0, {0}
    31f4:	0100000f 	tsteq	r0, pc
    31f8:	ac0d080d 	stcge	8, cr0, [sp], {13}
    31fc:	c0000131 	andgt	r0, r0, r1, lsr r1
    3200:	01000000 	mrseq	r0, (UNDEF: 0)
    3204:	000e589c 	muleq	lr, ip, r8
    3208:	04a22700 	strteq	r2, [r2], #1792	; 0x700
    320c:	0f010000 	svceq	0x00010000
    3210:	00521808 	subseq	r1, r2, r8, lsl #16
    3214:	91020000 	mrsls	r0, (UNDEF: 2)
    3218:	ef240074 	svc	0x00240074
    321c:	01000011 	tsteq	r0, r1, lsl r0
    3220:	ec0d07b7 	stc	7, cr0, [sp], {183}	; 0xb7
    3224:	c0000130 	andgt	r0, r0, r0, lsr r1
    3228:	01000000 	mrseq	r0, (UNDEF: 0)
    322c:	000ec09c 	muleq	lr, ip, r0
    3230:	141c2500 	ldrne	r2, [ip], #-1280	; 0xfffffb00
    3234:	b7010000 	strlt	r0, [r1, -r0]
    3238:	0bb53007 	bleq	fed4f25c <_estack+0xf6d3f25c>
    323c:	91020000 	mrsls	r0, (UNDEF: 2)
    3240:	119f2574 	orrsne	r2, pc, r4, ror r5	; <UNPREDICTABLE>
    3244:	b7010000 	strlt	r0, [r1, -r0]
    3248:	0b085107 	bleq	21766c <__bss_end+0x201b1c>
    324c:	91020000 	mrsls	r0, (UNDEF: 2)
    3250:	04a22570 	strteq	r2, [r2], #1392	; 0x570
    3254:	b7010000 	strlt	r0, [r1, -r0]
    3258:	00527007 	subseq	r7, r2, r7
    325c:	91020000 	mrsls	r0, (UNDEF: 2)
    3260:	13ce256c 	bicne	r2, lr, #108, 10	; 0x1b000000
    3264:	b7010000 	strlt	r0, [r1, -r0]
    3268:	0ec69807 	cdpeq	8, 12, cr9, cr6, cr7, {0}
    326c:	91020000 	mrsls	r0, (UNDEF: 2)
    3270:	117d2568 	cmnne	sp, r8, ror #10
    3274:	b7010000 	strlt	r0, [r1, -r0]
    3278:	003fb107 	eorseq	fp, pc, r7, lsl #2
    327c:	91020000 	mrsls	r0, (UNDEF: 2)
    3280:	04110000 	ldreq	r0, [r1], #-0
    3284:	00000afd 	strdeq	r0, [r0], -sp
    3288:	000ec003 	andeq	ip, lr, r3
    328c:	11092400 	tstne	r9, r0, lsl #8
    3290:	76010000 	strvc	r0, [r1], -r0
    3294:	30bc0807 	adcscc	r0, ip, r7, lsl #16
    3298:	00300001 	eorseq	r0, r0, r1
    329c:	9c010000 	stcls	0, cr0, [r1], {-0}
    32a0:	00000ef3 	strdeq	r0, [r0], -r3
    32a4:	00012d25 	andeq	r2, r1, r5, lsr #26
    32a8:	07760100 	ldrbeq	r0, [r6, -r0, lsl #2]!
    32ac:	00008d08 	andeq	r8, r0, r8, lsl #26
    32b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32b4:	13262900 			; <UNDEFINED> instruction: 0x13262900
    32b8:	42010000 	andmi	r0, r1, #0
    32bc:	30940607 	addscc	r0, r4, r7, lsl #12
    32c0:	00280001 	eoreq	r0, r8, r1
    32c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    32c8:	0012bc2a 	andseq	fp, r2, sl, lsr #24
    32cc:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    32d0:	0000460f 	andeq	r4, r0, pc, lsl #12
    32d4:	012fa000 			; <UNDEFINED> instruction: 0x012fa000
    32d8:	0000f400 	andeq	pc, r0, r0, lsl #8
    32dc:	529c0100 	addspl	r0, ip, #0, 2
    32e0:	2500000f 	strcs	r0, [r0, #-15]
    32e4:	000011a6 	andeq	r1, r0, r6, lsr #3
    32e8:	3a071401 	bcc	1c82f4 <__bss_end+0x1b27a4>
    32ec:	00000f58 	andeq	r0, r0, r8, asr pc
    32f0:	256c9102 	strbcs	r9, [ip, #-258]!	; 0xfffffefe
    32f4:	00001079 	andeq	r1, r0, r9, ror r0
    32f8:	5a071401 	bpl	1c8304 <__bss_end+0x1b27b4>
    32fc:	00000f63 	andeq	r0, r0, r3, ror #30
    3300:	27689102 	strbcs	r9, [r8, -r2, lsl #2]!
    3304:	00000c1f 	andeq	r0, r0, pc, lsl ip
    3308:	0f071601 	svceq	0x00071601
    330c:	00000046 	andeq	r0, r0, r6, asr #32
    3310:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3314:	0ab00411 	beq	fec04360 <_estack+0xf6bf4360>
    3318:	52030000 	andpl	r0, r3, #0
    331c:	1100000f 	tstne	r0, pc
    3320:	00094d04 	andeq	r4, r9, r4, lsl #26
    3324:	0f5d0300 	svceq	0x005d0300
    3328:	de2b0000 	cdple	0, 2, cr0, cr11, cr0, {0}
    332c:	0100000e 	tsteq	r0, lr
    3330:	5806070c 	stmdapl	r6, {r2, r3, r8, r9, sl}
    3334:	4800012f 	stmdami	r0, {r0, r1, r2, r3, r5, r8}
    3338:	01000000 	mrseq	r0, (UNDEF: 0)
    333c:	000f909c 	muleq	pc, ip, r0	; <UNPREDICTABLE>
    3340:	11a62500 			; <UNDEFINED> instruction: 0x11a62500
    3344:	0c010000 	stceq	0, cr0, [r1], {-0}
    3348:	0f583107 	svceq	0x00583107
    334c:	91020000 	mrsls	r0, (UNDEF: 2)
    3350:	e32a0074 			; <UNDEFINED> instruction: 0xe32a0074
    3354:	01000010 	tsteq	r0, r0, lsl r0
    3358:	461606d9 			; <UNDEFINED> instruction: 0x461606d9
    335c:	40000000 	andmi	r0, r0, r0
    3360:	1800012e 	stmdane	r0, {r1, r2, r3, r5, r8}
    3364:	01000001 	tsteq	r0, r1
    3368:	000fdc9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    336c:	04e02500 	strbteq	r2, [r0], #1280	; 0x500
    3370:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3374:	0fe24406 	svceq	0x00e24406
    3378:	91020000 	mrsls	r0, (UNDEF: 2)
    337c:	0f85276c 	svceq	0x0085276c
    3380:	db010000 	blle	43388 <__bss_end+0x2d838>
    3384:	0bb50906 	bleq	fed457a4 <_estack+0xf6d357a4>
    3388:	91020000 	mrsls	r0, (UNDEF: 2)
    338c:	0c1f2770 	ldceq	7, cr2, [pc], {112}	; 0x70
    3390:	dc010000 	stcle	0, cr0, [r1], {-0}
    3394:	00460f06 	subeq	r0, r6, r6, lsl #30
    3398:	91020000 	mrsls	r0, (UNDEF: 2)
    339c:	04110074 	ldreq	r0, [r1], #-116	; 0xffffff8c
    33a0:	00000a77 	andeq	r0, r0, r7, ror sl
    33a4:	000fdc03 	andeq	sp, pc, r3, lsl #24
    33a8:	10bb2c00 	adcsne	r2, fp, r0, lsl #24
    33ac:	87010000 	strhi	r0, [r1, -r0]
    33b0:	2da40606 	stccs	6, cr0, [r4, #24]!
    33b4:	009c0001 	addseq	r0, ip, r1
    33b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    33bc:	0000102f 	andeq	r1, r0, pc, lsr #32
    33c0:	0004e025 	andeq	lr, r4, r5, lsr #32
    33c4:	06870100 	streq	r0, [r7], r0, lsl #2
    33c8:	000fe231 	andeq	lr, pc, r1, lsr r2	; <UNPREDICTABLE>
    33cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    33d0:	00107a25 	andseq	r7, r0, r5, lsr #20
    33d4:	06870100 	streq	r0, [r7], r0, lsl #2
    33d8:	00094d4b 	andeq	r4, r9, fp, asr #26
    33dc:	68910200 	ldmvs	r1, {r9}
    33e0:	00051527 	andeq	r1, r5, r7, lsr #10
    33e4:	06890100 	streq	r0, [r9], r0, lsl #2
    33e8:	00094d0e 	andeq	r4, r9, lr, lsl #26
    33ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33f0:	12542b00 	subsne	r2, r4, #0, 22
    33f4:	4b010000 	blmi	433fc <__bss_end+0x2d8ac>
    33f8:	2c9c0606 	ldccs	6, cr0, [ip], {6}
    33fc:	01080001 	tsteq	r8, r1
    3400:	9c010000 	stcls	0, cr0, [r1], {-0}
    3404:	00001061 	andeq	r1, r0, r1, rrx
    3408:	012d0828 			; <UNDEFINED> instruction: 0x012d0828
    340c:	00007800 	andeq	r7, r0, r0, lsl #16
    3410:	04ec2700 	strbteq	r2, [ip], #1792	; 0x700
    3414:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3418:	0c230306 	stceq	3, cr0, [r3], #-24	; 0xffffffe8
    341c:	91020000 	mrsls	r0, (UNDEF: 2)
    3420:	2a000074 	bcs	35f8 <_start-0x4a08>
    3424:	00001224 	andeq	r1, r0, r4, lsr #4
    3428:	10062d01 	andne	r2, r6, r1, lsl #26
    342c:	00000046 	andeq	r0, r0, r6, asr #32
    3430:	00012c20 	andeq	r2, r1, r0, lsr #24
    3434:	0000007c 	andeq	r0, r0, ip, ror r0
    3438:	10bd9c01 	adcsne	r9, sp, r1, lsl #24
    343c:	dd250000 	stcle	0, cr0, [r5, #-0]
    3440:	01000010 	tsteq	r0, r0, lsl r0
    3444:	7c3a062d 	ldcvc	6, cr0, [sl], #-180	; 0xffffff4c
    3448:	0200000a 	andeq	r0, r0, #10
    344c:	c2256c91 	eorgt	r6, r5, #37120	; 0x9100
    3450:	01000013 	tsteq	r0, r3, lsl r0
    3454:	8d47062d 	stclhi	6, cr0, [r7, #-180]	; 0xffffff4c
    3458:	02000000 	andeq	r0, r0, #0
    345c:	1d276891 	stcne	8, cr6, [r7, #-580]!	; 0xfffffdbc
    3460:	01000014 	tsteq	r0, r4, lsl r0
    3464:	b50a062f 	strlt	r0, [sl, #-1583]	; 0xfffff9d1
    3468:	0200000b 	andeq	r0, r0, #11
    346c:	1f277491 	svcne	0x00277491
    3470:	0100000c 	tsteq	r0, ip
    3474:	46100630 			; <UNDEFINED> instruction: 0x46100630
    3478:	02000000 	andeq	r0, r0, #0
    347c:	2a007091 	bcs	1f6c8 <__bss_end+0x9b78>
    3480:	00001015 	andeq	r1, r0, r5, lsl r0
    3484:	13061001 	movwne	r1, #24577	; 0x6001
    3488:	0000095e 	andeq	r0, r0, lr, asr r9
    348c:	00012bc4 	andeq	r2, r1, r4, asr #23
    3490:	0000005c 	andeq	r0, r0, ip, asr r0
    3494:	11099c01 	tstne	r9, r1, lsl #24
    3498:	dd250000 	stcle	0, cr0, [r5, #-0]
    349c:	01000010 	tsteq	r0, r0, lsl r0
    34a0:	7c3b0610 	ldcvc	6, cr0, [fp], #-64	; 0xffffffc0
    34a4:	0200000a 	andeq	r0, r0, #10
    34a8:	1d276c91 	stcne	12, cr6, [r7, #-580]!	; 0xfffffdbc
    34ac:	01000014 	tsteq	r0, r4, lsl r0
    34b0:	b50a0612 	strlt	r0, [sl, #-1554]	; 0xfffff9ee
    34b4:	0200000b 	andeq	r0, r0, #11
    34b8:	1f277491 	svcne	0x00277491
    34bc:	0100000c 	tsteq	r0, ip
    34c0:	5e130613 	mrcpl	6, 0, r0, cr3, cr3, {0}
    34c4:	02000009 	andeq	r0, r0, #9
    34c8:	2c007091 	stccs	0, cr7, [r0], {145}	; 0x91
    34cc:	00000f29 	andeq	r0, r0, r9, lsr #30
    34d0:	0705f601 	streq	pc, [r5, -r1, lsl #12]
    34d4:	00012b68 	andeq	r2, r1, r8, ror #22
    34d8:	0000005c 	andeq	r0, r0, ip, asr r0
    34dc:	11519c01 	cmpne	r1, r1, lsl #24
    34e0:	dd250000 	stcle	0, cr0, [r5, #-0]
    34e4:	01000010 	tsteq	r0, r0, lsl r0
    34e8:	7c2f05f6 	cfstr32vc	mvfx0, [pc], #-984	; 3118 <_start-0x4ee8>
    34ec:	0200000a 	andeq	r0, r0, #10
    34f0:	33256c91 			; <UNDEFINED> instruction: 0x33256c91
    34f4:	01000011 	tsteq	r0, r1, lsl r0
    34f8:	5e4705f6 	mcrpl	5, 2, r0, cr7, cr6, {7}
    34fc:	02000009 	andeq	r0, r0, #9
    3500:	1d276891 	stcne	8, cr6, [r7, #-580]!	; 0xfffffdbc
    3504:	01000014 	tsteq	r0, r4, lsl r0
    3508:	b50a05f8 	strlt	r0, [sl, #-1528]	; 0xfffffa08
    350c:	0200000b 	andeq	r0, r0, #11
    3510:	2c007491 	cfstrscs	mvf7, [r0], {145}	; 0x91
    3514:	000011dc 	ldrdeq	r1, [r0], -ip
    3518:	0605a901 	streq	sl, [r5], -r1, lsl #18
    351c:	0001294c 	andeq	r2, r1, ip, asr #18
    3520:	0000021c 	andeq	r0, r0, ip, lsl r2
    3524:	11b19c01 			; <UNDEFINED> instruction: 0x11b19c01
    3528:	1c270000 	stcne	0, cr0, [r7], #-0
    352c:	01000014 	tsteq	r0, r4, lsl r0
    3530:	b50a05ab 	strlt	r0, [sl, #-1451]	; 0xfffffa55
    3534:	0200000b 	andeq	r0, r0, #11
    3538:	8c2d7091 	stchi	0, cr7, [sp], #-580	; 0xfffffdbc
    353c:	84000129 	strhi	r0, [r0], #-297	; 0xfffffed7
    3540:	96000000 	strls	r0, [r0], -r0
    3544:	27000011 	smladcs	r0, r1, r0, r0
    3548:	000002c9 	andeq	r0, r0, r9, asr #5
    354c:	0b05b501 	bleq	170958 <__bss_end+0x15ae08>
    3550:	00000c18 	andeq	r0, r0, r8, lsl ip
    3554:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3558:	012a1028 			; <UNDEFINED> instruction: 0x012a1028
    355c:	00011000 	andeq	r1, r1, r0
    3560:	03202700 	nopeq	{0}	; <UNPREDICTABLE>
    3564:	d6010000 	strle	r0, [r1], -r0
    3568:	094d0305 	stmdbeq	sp, {r0, r2, r8, r9}^
    356c:	91020000 	mrsls	r0, (UNDEF: 2)
    3570:	2e00006c 	cdpcs	0, 0, cr0, cr0, cr12, {3}
    3574:	00000e3b 	andeq	r0, r0, fp, lsr lr
    3578:	1804f701 	stmdane	r4, {r0, r8, r9, sl, ip, sp, lr, pc}
    357c:	00000052 	andeq	r0, r0, r2, asr r0
    3580:	00012928 	andeq	r2, r1, r8, lsr #18
    3584:	00000024 	andeq	r0, r0, r4, lsr #32
    3588:	be2f9c01 	cdplt	12, 2, cr9, cr15, cr1, {0}
    358c:	0100000f 	tsteq	r0, pc
    3590:	4d0e04ea 	cfstrsmi	mvf0, [lr, #-936]	; 0xfffffc58
    3594:	f0000009 			; <UNDEFINED> instruction: 0xf0000009
    3598:	38000128 	stmdacc	r0, {r3, r5, r8}
    359c:	01000000 	mrseq	r0, (UNDEF: 0)
    35a0:	0012049c 	mulseq	r2, ip, r4
    35a4:	0c1f2700 	ldceq	7, cr2, [pc], {-0}
    35a8:	ec010000 	stc	0, cr0, [r1], {-0}
    35ac:	094d0e04 	stmdbeq	sp, {r2, r9, sl, fp}^
    35b0:	91020000 	mrsls	r0, (UNDEF: 2)
    35b4:	0bc42770 	bleq	ff10d37c <_estack+0xf70fd37c>
    35b8:	ed010000 	stc	0, cr0, [r1, #-0]
    35bc:	00521804 	subseq	r1, r2, r4, lsl #16
    35c0:	91020000 	mrsls	r0, (UNDEF: 2)
    35c4:	562a0074 			; <UNDEFINED> instruction: 0x562a0074
    35c8:	01000011 	tsteq	r0, r1, lsl r0
    35cc:	4d0e04db 	cfstrsmi	mvf0, [lr, #-876]	; 0xfffffc94
    35d0:	bc000009 	stclt	0, cr0, [r0], {9}
    35d4:	34000128 	strcc	r0, [r0], #-296	; 0xfffffed8
    35d8:	01000000 	mrseq	r0, (UNDEF: 0)
    35dc:	0012309c 	mulseq	r2, ip, r0
    35e0:	118a2700 	orrne	r2, sl, r0, lsl #14
    35e4:	dd010000 	stcle	0, cr0, [r1, #-0]
    35e8:	094d0e04 	stmdbeq	sp, {r2, r9, sl, fp}^
    35ec:	91020000 	mrsls	r0, (UNDEF: 2)
    35f0:	892a0074 	stmdbhi	sl!, {r2, r4, r5, r6}
    35f4:	01000012 	tsteq	r0, r2, lsl r0
    35f8:	46160484 	ldrmi	r0, [r6], -r4, lsl #9
    35fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3600:	a4000127 	strge	r0, [r0], #-295	; 0xfffffed9
    3604:	01000001 	tsteq	r0, r1
    3608:	0012859c 	mulseq	r2, ip, r5
    360c:	141c2700 	ldrne	r2, [ip], #-1792	; 0xfffff900
    3610:	86010000 	strhi	r0, [r1], -r0
    3614:	0bb51204 	bleq	fed47e2c <_estack+0xf6d37e2c>
    3618:	54010000 	strpl	r0, [r1], #-0
    361c:	0013b227 	andseq	fp, r3, r7, lsr #4
    3620:	04870100 	streq	r0, [r7], #256	; 0x100
    3624:	00004616 	andeq	r4, r0, r6, lsl r6
    3628:	6c910200 	lfmvs	f0, 4, [r1], {0}
    362c:	01276428 			; <UNDEFINED> instruction: 0x01276428
    3630:	00012400 	andeq	r2, r1, r0, lsl #8
    3634:	0f612700 	svceq	0x00612700
    3638:	9a010000 	bls	43640 <__bss_end+0x2daf0>
    363c:	00461304 	subeq	r1, r6, r4, lsl #6
    3640:	91020000 	mrsls	r0, (UNDEF: 2)
    3644:	29000068 	stmdbcs	r0, {r3, r5, r6}
    3648:	00001056 	andeq	r1, r0, r6, asr r0
    364c:	06047c01 	streq	r7, [r4], -r1, lsl #24
    3650:	000126e8 	andeq	r2, r1, r8, ror #13
    3654:	00000030 	andeq	r0, r0, r0, lsr r0
    3658:	15309c01 	ldrne	r9, [r0, #-3073]!	; 0xfffff3ff
    365c:	0100000e 	tsteq	r0, lr
    3660:	b0060471 	andlt	r0, r6, r1, ror r4
    3664:	38000126 	stmdacc	r0, {r1, r2, r5, r8}
    3668:	01000000 	mrseq	r0, (UNDEF: 0)
    366c:	13462c9c 	movtne	r2, #27804	; 0x6c9c
    3670:	30010000 	andcc	r0, r1, r0
    3674:	26140604 	ldrcs	r0, [r4], -r4, lsl #12
    3678:	009c0001 	addseq	r0, ip, r1
    367c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3680:	000012d3 	ldrdeq	r1, [r0], -r3
    3684:	000c1f27 	andeq	r1, ip, r7, lsr #30
    3688:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    368c:	0000460f 	andeq	r4, r0, pc, lsl #12
    3690:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3694:	13132a00 	tstne	r3, #0, 20
    3698:	02010000 	andeq	r0, r1, #0
    369c:	00461004 	subeq	r1, r6, r4
    36a0:	24f80000 	ldrbtcs	r0, [r8], #0
    36a4:	011c0001 	tsteq	ip, r1
    36a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36ac:	0000132f 	andeq	r1, r0, pc, lsr #6
    36b0:	000f5225 	andeq	r5, pc, r5, lsr #4
    36b4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    36b8:	000a7c30 	andeq	r7, sl, r0, lsr ip
    36bc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    36c0:	000f6127 	andeq	r6, pc, r7, lsr #2
    36c4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    36c8:	00004610 	andeq	r4, r0, r0, lsl r6
    36cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    36d0:	00141c27 	andseq	r1, r4, r7, lsr #24
    36d4:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    36d8:	000bb50a 	andeq	fp, fp, sl, lsl #10
    36dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    36e0:	000bc427 	andeq	ip, fp, r7, lsr #8
    36e4:	04060100 	streq	r0, [r6], #-256	; 0xffffff00
    36e8:	00005219 	andeq	r5, r0, r9, lsl r2
    36ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36f0:	14222c00 	strtne	r2, [r2], #-3072	; 0xfffff400
    36f4:	d5010000 	strle	r0, [r1, #-0]
    36f8:	24000703 	strcs	r0, [r0], #-1795	; 0xfffff8fd
    36fc:	00f80001 	rscseq	r0, r8, r1
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	00001367 	andeq	r1, r0, r7, ror #6
    3708:	000f5225 	andeq	r5, pc, r5, lsr #4
    370c:	03d50100 	bicseq	r0, r5, #0, 2
    3710:	000a7c20 	andeq	r7, sl, r0, lsr #24
    3714:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3718:	00141c27 	andseq	r1, r4, r7, lsr #24
    371c:	03d70100 	bicseq	r0, r7, #0, 2
    3720:	000bb50a 	andeq	fp, fp, sl, lsl #10
    3724:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3728:	0fe92f00 	svceq	0x00e92f00
    372c:	b3010000 	movwlt	r0, #4096	; 0x1000
    3730:	00461703 	subeq	r1, r6, r3, lsl #14
    3734:	23840000 	orrcs	r0, r4, #0
    3738:	007c0001 	rsbseq	r0, ip, r1
    373c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3740:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    3744:	0010dd25 	andseq	sp, r0, r5, lsr #26
    3748:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    374c:	000a7c39 	andeq	r7, sl, r9, lsr ip
    3750:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3754:	000c1f27 	andeq	r1, ip, r7, lsr #30
    3758:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    375c:	00004610 	andeq	r4, r0, r0, lsl r6
    3760:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3764:	00141c27 	andseq	r1, r4, r7, lsr #24
    3768:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    376c:	0013b917 	andseq	fp, r3, r7, lsl r9
    3770:	70910200 	addsvc	r0, r1, r0, lsl #4
    3774:	9e041100 	adflss	f1, f4, f0
    3778:	0300000b 	movweq	r0, #11
    377c:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    3780:	0013a52c 	andseq	sl, r3, ip, lsr #10
    3784:	03730100 	cmneq	r3, #0, 2
    3788:	01228007 			; <UNDEFINED> instruction: 0x01228007
    378c:	00010400 	andeq	r0, r1, r0, lsl #8
    3790:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    3794:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3798:	000012d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    379c:	21037301 	tstcs	r3, r1, lsl #6
    37a0:	00000a7c 	andeq	r0, r0, ip, ror sl
    37a4:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    37a8:	0000141c 	andeq	r1, r0, ip, lsl r4
    37ac:	0a037501 	beq	e0bb8 <__bss_end+0xcb068>
    37b0:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    37b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    37b8:	0011bd2c 	andseq	fp, r1, ip, lsr #26
    37bc:	03070100 	movweq	r0, #28928	; 0x7100
    37c0:	0120d807 			; <UNDEFINED> instruction: 0x0120d807
    37c4:	0001a800 	andeq	sl, r1, r0, lsl #16
    37c8:	5e9c0100 	fmlple	f0, f4, f0
    37cc:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    37d0:	000010dc 	ldrdeq	r1, [r0], -ip
    37d4:	25030701 	strcs	r0, [r3, #-1793]	; 0xfffff8ff
    37d8:	00000a7c 	andeq	r0, r0, ip, ror sl
    37dc:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    37e0:	00001191 	muleq	r0, r1, r1
    37e4:	44030701 	strmi	r0, [r3], #-1793	; 0xfffff8ff
    37e8:	00000052 	andeq	r0, r0, r2, asr r0
    37ec:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    37f0:	0000141c 	andeq	r1, r0, ip, lsl r4
    37f4:	0a030901 	beq	c5c00 <__bss_end+0xb00b0>
    37f8:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    37fc:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    3800:	00000ef3 	strdeq	r0, [r0], -r3
    3804:	19030a01 	stmdbne	r3, {r0, r9, fp}
    3808:	00000052 	andeq	r0, r0, r2, asr r0
    380c:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3810:	00000f61 	andeq	r0, r0, r1, ror #30
    3814:	10030b01 	andne	r0, r3, r1, lsl #22
    3818:	00000046 	andeq	r0, r0, r6, asr #32
    381c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3820:	000e652a 	andeq	r6, lr, sl, lsr #10
    3824:	02f10100 	rscseq	r0, r1, #0, 2
    3828:	00005219 	andeq	r5, r0, r9, lsl r2
    382c:	01208000 			; <UNDEFINED> instruction: 0x01208000
    3830:	00005800 	andeq	r5, r0, r0, lsl #16
    3834:	aa9c0100 	bge	fe703c3c <_estack+0xf66f3c3c>
    3838:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    383c:	000010dc 	ldrdeq	r1, [r0], -ip
    3840:	3802f101 	stmdacc	r2, {r0, r8, ip, sp, lr, pc}
    3844:	00000a7c 	andeq	r0, r0, ip, ror sl
    3848:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    384c:	0000141c 	andeq	r1, r0, ip, lsl r4
    3850:	0a02f301 	beq	c045c <__bss_end+0xaa90c>
    3854:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    3858:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    385c:	00000c1e 	andeq	r0, r0, lr, lsl ip
    3860:	1902f401 	stmdbne	r2, {r0, sl, ip, sp, lr, pc}
    3864:	00000052 	andeq	r0, r0, r2, asr r0
    3868:	00709102 	rsbseq	r9, r0, r2, lsl #2
    386c:	0010d12c 	andseq	sp, r0, ip, lsr #2
    3870:	02c30100 	sbceq	r0, r3, #0, 2
    3874:	011ffc07 	tsteq	pc, r7, lsl #24	; <UNPREDICTABLE>
    3878:	00008400 	andeq	r8, r0, r0, lsl #8
    387c:	f29c0100 	vaddw.s16	q0, q6, d0
    3880:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    3884:	0000032b 	andeq	r0, r0, fp, lsr #6
    3888:	2002c301 	andcs	ip, r2, r1, lsl #6
    388c:	0000094d 	andeq	r0, r0, sp, asr #18
    3890:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3894:	00000515 	andeq	r0, r0, r5, lsl r5
    3898:	0f02c501 	svceq	0x0002c501
    389c:	0000094d 	andeq	r0, r0, sp, asr #18
    38a0:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    38a4:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    38a8:	1702c601 	strne	ip, [r2, -r1, lsl #12]
    38ac:	00000046 	andeq	r0, r0, r6, asr #32
    38b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38b4:	0013882c 	andseq	r8, r3, ip, lsr #16
    38b8:	02820100 	addeq	r0, r2, #0, 2
    38bc:	011eec07 	tsteq	lr, r7, lsl #24
    38c0:	00011000 	andeq	r1, r1, r0
    38c4:	5a9c0100 	bpl	fe703ccc <_estack+0xf66f3ccc>
    38c8:	25000015 	strcs	r0, [r0, #-21]	; 0xffffffeb
    38cc:	000012e1 	andeq	r1, r0, r1, ror #5
    38d0:	2d028201 	sfmcs	f0, 1, [r2, #-4]
    38d4:	00000f63 	andeq	r0, r0, r3, ror #30
    38d8:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    38dc:	0000140d 	andeq	r1, r0, sp, lsl #8
    38e0:	4e028201 	cdpmi	2, 0, cr8, cr2, cr1, {0}
    38e4:	0000094d 	andeq	r0, r0, sp, asr #18
    38e8:	27609102 	strbcs	r9, [r0, -r2, lsl #2]!
    38ec:	00000515 	andeq	r0, r0, r5, lsl r5
    38f0:	0f028401 	svceq	0x00028401
    38f4:	0000094d 	andeq	r0, r0, sp, asr #18
    38f8:	27709102 	ldrbcs	r9, [r0, -r2, lsl #2]!
    38fc:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    3900:	10028501 	andne	r8, r2, r1, lsl #10
    3904:	00000046 	andeq	r0, r0, r6, asr #32
    3908:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    390c:	000010fc 	strdeq	r1, [r0], -ip
    3910:	21028501 	tstcs	r2, r1, lsl #10
    3914:	00000046 	andeq	r0, r0, r6, asr #32
    3918:	00749102 	rsbseq	r9, r4, r2, lsl #2
    391c:	0012182c 	andseq	r1, r2, ip, lsr #16
    3920:	02400100 	subeq	r0, r0, #0, 2
    3924:	011dec07 	tsteq	sp, r7, lsl #24
    3928:	00010000 	andeq	r0, r1, r0
    392c:	929c0100 	addsls	r0, ip, #0, 2
    3930:	25000015 	strcs	r0, [r0, #-21]	; 0xffffffeb
    3934:	000012f4 	strdeq	r1, [r0], -r4
    3938:	20024001 	andcs	r4, r2, r1
    393c:	00000a7c 	andeq	r0, r0, ip, ror sl
    3940:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3944:	0000141c 	andeq	r1, r0, ip, lsl r4
    3948:	0a024201 	beq	94154 <__bss_end+0x7e604>
    394c:	00000bb5 			; <UNDEFINED> instruction: 0x00000bb5
    3950:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3954:	0012412a 	andseq	r4, r2, sl, lsr #2
    3958:	019b0100 	orrseq	r0, fp, r0, lsl #2
    395c:	00004616 	andeq	r4, r0, r6, lsl r6
    3960:	011ba000 	tsteq	fp, r0
    3964:	00024c00 	andeq	r4, r2, r0, lsl #24
    3968:	699c0100 	ldmibvs	ip, {r8}
    396c:	25000016 	strcs	r0, [r0, #-22]	; 0xffffffea
    3970:	0000114b 	andeq	r1, r0, fp, asr #2
    3974:	36019b01 	strcc	r9, [r1], -r1, lsl #22
    3978:	00000930 	andeq	r0, r0, r0, lsr r9
    397c:	25649102 	strbcs	r9, [r4, #-258]!	; 0xfffffefe
    3980:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    3984:	5c019b01 			; <UNDEFINED> instruction: 0x5c019b01
    3988:	00000b08 	andeq	r0, r0, r8, lsl #22
    398c:	25609102 	strbcs	r9, [r0, #-258]!	; 0xfffffefe
    3990:	0000117d 	andeq	r1, r0, sp, ror r1
    3994:	73019b01 	movwvc	r9, #6913	; 0x1b01
    3998:	0000003f 	andeq	r0, r0, pc, lsr r0
    399c:	255e9102 	ldrbcs	r9, [lr, #-258]	; 0xfffffefe
    39a0:	0000012d 	andeq	r0, r0, sp, lsr #2
    39a4:	87019b01 	strhi	r9, [r1, -r1, lsl #22]
    39a8:	0000008d 	andeq	r0, r0, sp, lsl #1
    39ac:	25589102 	ldrbcs	r9, [r8, #-258]	; 0xfffffefe
    39b0:	000004a2 	andeq	r0, r0, r2, lsr #9
    39b4:	ac019b01 			; <UNDEFINED> instruction: 0xac019b01
    39b8:	00000052 	andeq	r0, r0, r2, asr r0
    39bc:	25009102 	strcs	r9, [r0, #-258]	; 0xfffffefe
    39c0:	0000142e 	andeq	r1, r0, lr, lsr #8
    39c4:	c5019b01 	strgt	r9, [r1, #-2817]	; 0xfffff4ff
    39c8:	00001669 	andeq	r1, r0, r9, ror #12
    39cc:	25049102 	strcs	r9, [r4, #-258]	; 0xfffffefe
    39d0:	00001337 	andeq	r1, r0, r7, lsr r3
    39d4:	e4019b01 	str	r9, [r1], #-2817	; 0xfffff4ff
    39d8:	00000b0d 	andeq	r0, r0, sp, lsl #22
    39dc:	31089102 	tstcc	r8, r2, lsl #2
    39e0:	000013ce 	andeq	r1, r0, lr, asr #7
    39e4:	10019b01 	andne	r9, r1, r1, lsl #22
    39e8:	000ec601 	andeq	ip, lr, r1, lsl #12
    39ec:	0c910200 	lfmeq	f0, 4, [r1], {0}
    39f0:	000c1f27 	andeq	r1, ip, r7, lsr #30
    39f4:	019d0100 	orrseq	r0, sp, r0, lsl #2
    39f8:	00004616 	andeq	r4, r0, r6, lsl r6
    39fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3a00:	00114227 	andseq	r4, r1, r7, lsr #4
    3a04:	019e0100 	orrseq	r0, lr, r0, lsl #2
    3a08:	000bb50a 	andeq	fp, fp, sl, lsl #10
    3a0c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3a10:	011be028 	tsteq	fp, r8, lsr #32
    3a14:	00019c00 	andeq	r9, r1, r0, lsl #24
    3a18:	01402700 	cmpeq	r0, r0, lsl #14
    3a1c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3a20:	0b0d1301 	bleq	34862c <__bss_end+0x332adc>
    3a24:	91020000 	mrsls	r0, (UNDEF: 2)
    3a28:	1100006c 	tstne	r0, ip, rrx
    3a2c:	000a7c04 	andeq	r7, sl, r4, lsl #24
    3a30:	02d70000 	sbcseq	r0, r7, #0
    3a34:	00040000 	andeq	r0, r4, r0
    3a38:	00000b7b 	andeq	r0, r0, fp, ror fp
    3a3c:	00780104 	rsbseq	r0, r8, r4, lsl #2
    3a40:	a10c0000 	mrsge	r0, (UNDEF: 12)
    3a44:	f8000014 			; <UNDEFINED> instruction: 0xf8000014
    3a48:	c4000000 	strgt	r0, [r0], #-0
    3a4c:	a0000134 	andge	r0, r0, r4, lsr r1
    3a50:	ad000003 	stcge	0, cr0, [r0, #-12]
    3a54:	02000015 	andeq	r0, r0, #21
    3a58:	00001536 	andeq	r1, r0, r6, lsr r5
    3a5c:	31100b02 	tstcc	r0, r2, lsl #22
    3a60:	03000000 	movweq	r0, #0
    3a64:	00003704 	andeq	r3, r0, r4, lsl #14
    3a68:	00470400 	subeq	r0, r7, r0, lsl #8
    3a6c:	47050000 	strmi	r0, [r5, -r0]
    3a70:	05000000 	streq	r0, [r0, #-0]
    3a74:	00000053 	andeq	r0, r0, r3, asr r0
    3a78:	07040600 	streq	r0, [r4, -r0, lsl #12]
    3a7c:	0000066a 	andeq	r0, r0, sl, ror #12
    3a80:	00004707 	andeq	r4, r0, r7, lsl #14
    3a84:	09040800 	stmdbeq	r4, {fp}
    3a88:	090d0208 	stmdbeq	sp, {r3, r9}
    3a8c:	00000079 	andeq	r0, r0, r9, ror r0
    3a90:	0014ee0a 	andseq	lr, r4, sl, lsl #28
    3a94:	180e0200 	stmdane	lr, {r9}
    3a98:	00000025 	andeq	r0, r0, r5, lsr #32
    3a9c:	00300a00 	eorseq	r0, r0, r0, lsl #20
    3aa0:	0f020000 	svceq	0x00020000
    3aa4:	0000530f 	andeq	r5, r0, pc, lsl #6
    3aa8:	02000400 	andeq	r0, r0, #0, 8
    3aac:	0000154b 	andeq	r1, r0, fp, asr #10
    3ab0:	55031002 	strpl	r1, [r3, #-2]
    3ab4:	0b000000 	bleq	3abc <_start-0x4544>
    3ab8:	00000079 	andeq	r0, r0, r9, ror r0
    3abc:	00000095 	muleq	r0, r5, r0
    3ac0:	0000470c 	andeq	r4, r0, ip, lsl #14
    3ac4:	0d004700 	stceq	7, cr4, [r0, #-0]
    3ac8:	0000151e 	andeq	r1, r0, lr, lsl r5
    3acc:	85190901 	ldrhi	r0, [r9, #-2305]	; 0xfffff6ff
    3ad0:	05000000 	streq	r0, [r0, #-0]
    3ad4:	0148f403 	cmpeq	r8, r3, lsl #8	; <UNPREDICTABLE>
    3ad8:	01280900 			; <UNDEFINED> instruction: 0x01280900
    3adc:	0133090c 	teqeq	r3, ip, lsl #18
    3ae0:	640a0000 	strvs	r0, [sl], #-0
    3ae4:	01000015 	tsteq	r0, r5, lsl r0
    3ae8:	0133100d 	teqeq	r3, sp
    3aec:	0a000000 	beq	3af4 <_start-0x450c>
    3af0:	0000143c 	andeq	r1, r0, ip, lsr r4
    3af4:	33100e01 	tstcc	r0, #1, 28
    3af8:	04000001 	streq	r0, [r0], #-1
    3afc:	0014450a 	andseq	r4, r4, sl, lsl #10
    3b00:	100f0100 	andne	r0, pc, r0, lsl #2
    3b04:	00000133 	andeq	r0, r0, r3, lsr r1
    3b08:	146d0a08 	strbtne	r0, [sp], #-2568	; 0xfffff5f8
    3b0c:	10010000 	andne	r0, r1, r0
    3b10:	00013310 	andeq	r3, r1, r0, lsl r3
    3b14:	840a0c00 	strhi	r0, [sl], #-3072	; 0xfffff400
    3b18:	01000015 	tsteq	r0, r5, lsl r0
    3b1c:	01331011 	teqeq	r3, r1, lsl r0
    3b20:	0a100000 	beq	403b28 <__bss_end+0x3edfd8>
    3b24:	00001504 	andeq	r1, r0, r4, lsl #10
    3b28:	33101201 	tstcc	r0, #268435456	; 0x10000000
    3b2c:	14000001 	strne	r0, [r0], #-1
    3b30:	0015780a 	andseq	r7, r5, sl, lsl #16
    3b34:	10130100 	andsne	r0, r3, r0, lsl #2
    3b38:	00000133 	andeq	r0, r0, r3, lsr r1
    3b3c:	150c0a18 	strne	r0, [ip, #-2584]	; 0xfffff5e8
    3b40:	14010000 	strne	r0, [r1], #-0
    3b44:	00013310 	andeq	r3, r1, r0, lsl r3
    3b48:	150a1c00 	strne	r1, [sl, #-3072]	; 0xfffff400
    3b4c:	01000015 	tsteq	r0, r5, lsl r0
    3b50:	01331015 	teqeq	r3, r5, lsl r0
    3b54:	0a200000 	beq	803b5c <__bss_end+0x7ee00c>
    3b58:	0000144e 	andeq	r1, r0, lr, asr #8
    3b5c:	33101601 	tstcc	r0, #1048576	; 0x100000
    3b60:	24000001 	strcs	r0, [r0], #-1
    3b64:	07040600 	streq	r0, [r4, -r0, lsl #12]
    3b68:	00000665 	andeq	r0, r0, r5, ror #12
    3b6c:	00145b02 	andseq	r5, r4, r2, lsl #22
    3b70:	03170100 	tsteq	r7, #0, 2
    3b74:	000000a7 	andeq	r0, r0, r7, lsr #1
    3b78:	00013a0e 	andeq	r3, r1, lr, lsl #20
    3b7c:	013a0d00 	teqeq	sl, r0, lsl #26
    3b80:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3b84:	0001632b 	andeq	r6, r1, fp, lsr #6
    3b88:	40030500 	andmi	r0, r3, r0, lsl #10
    3b8c:	03000147 	movweq	r0, #327	; 0x147
    3b90:	00014604 	andeq	r4, r1, r4, lsl #12
    3b94:	015d0700 	cmpeq	sp, r0, lsl #14
    3b98:	330b0000 	movwcc	r0, #45056	; 0xb000
    3b9c:	78000001 	stmdavc	r0, {r0}
    3ba0:	0c000001 	stceq	0, cr0, [r0], {1}
    3ba4:	00000047 	andeq	r0, r0, r7, asr #32
    3ba8:	990d0002 	stmdbls	sp, {r1}
    3bac:	01000014 	tsteq	r0, r4, lsl r0
    3bb0:	0168161c 	cmneq	r8, ip, lsl r6
    3bb4:	03050000 	movweq	r0, #20480	; 0x5000
    3bb8:	00014b34 	andeq	r4, r1, r4, lsr fp
    3bbc:	0014e30f 	andseq	lr, r4, pc, lsl #6
    3bc0:	066d0100 	strbteq	r0, [sp], -r0, lsl #2
    3bc4:	00013784 	andeq	r3, r1, r4, lsl #15
    3bc8:	000000e0 	andeq	r0, r0, r0, ror #1
    3bcc:	01bf9c01 			; <UNDEFINED> instruction: 0x01bf9c01
    3bd0:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
    3bd4:	01007172 	tsteq	r0, r2, ror r1
    3bd8:	004e256d 	subeq	r2, lr, sp, ror #10
    3bdc:	91020000 	mrsls	r0, (UNDEF: 2)
    3be0:	14de0d6c 	ldrbne	r0, [lr], #3436	; 0xd6c
    3be4:	6f010000 	svcvs	0x00010000
    3be8:	00013310 	andeq	r3, r1, r0, lsl r3
    3bec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3bf0:	152c0f00 	strne	r0, [ip, #-3840]!	; 0xfffff100
    3bf4:	5b010000 	blpl	43bfc <__bss_end+0x2e0ac>
    3bf8:	0136b006 	teqeq	r6, r6
    3bfc:	0000d400 	andeq	sp, r0, r0, lsl #8
    3c00:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    3c04:	10000001 	andne	r0, r0, r1
    3c08:	00717269 	rsbseq	r7, r1, r9, ror #4
    3c0c:	4e245b01 	vmulmi.f64	d5, d4, d1
    3c10:	02000000 	andeq	r0, r0, #0
    3c14:	de0d6c91 	mcrle	12, 0, r6, cr13, cr1, {4}
    3c18:	01000014 	tsteq	r0, r4, lsl r0
    3c1c:	0133105d 	teqeq	r3, sp, asr r0
    3c20:	91020000 	mrsls	r0, (UNDEF: 2)
    3c24:	75110074 	ldrvc	r0, [r1, #-116]	; 0xffffff8c
    3c28:	01000014 	tsteq	r0, r4, lsl r0
    3c2c:	364c0651 			; <UNDEFINED> instruction: 0x364c0651
    3c30:	00640001 	rsbeq	r0, r4, r1
    3c34:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c38:	00000238 	andeq	r0, r0, r8, lsr r2
    3c3c:	71726910 	cmnvc	r2, r0, lsl r9
    3c40:	26510100 	ldrbcs	r0, [r1], -r0, lsl #2
    3c44:	0000004e 	andeq	r0, r0, lr, asr #32
    3c48:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    3c4c:	000014ee 	andeq	r1, r0, lr, ror #9
    3c50:	25405101 	strbcs	r5, [r0, #-257]	; 0xfffffeff
    3c54:	02000000 	andeq	r0, r0, #0
    3c58:	30127091 	mulscc	r2, r1, r0
    3c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c60:	00535251 	subseq	r5, r3, r1, asr r2
    3c64:	91020000 	mrsls	r0, (UNDEF: 2)
    3c68:	8113006c 	tsthi	r3, ip, rrx
    3c6c:	01000014 	tsteq	r0, r4, lsl r0
    3c70:	3630064c 	ldrtcc	r0, [r0], -ip, asr #12
    3c74:	001c0001 	andseq	r0, ip, r1
    3c78:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c7c:	00156d13 	andseq	r6, r5, r3, lsl sp
    3c80:	06470100 	strbeq	r0, [r7], -r0, lsl #2
    3c84:	00013614 	andeq	r3, r1, r4, lsl r6
    3c88:	0000001c 	andeq	r0, r0, ip, lsl r0
    3c8c:	f9119c01 			; <UNDEFINED> instruction: 0xf9119c01
    3c90:	01000014 	tsteq	r0, r4, lsl r0
    3c94:	35740636 	ldrbcc	r0, [r4, #-1590]!	; 0xfffff9ca
    3c98:	00a00001 	adceq	r0, r0, r1
    3c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ca0:	00000281 	andeq	r0, r0, r1, lsl #5
    3ca4:	00148a0d 	andseq	r8, r4, sp, lsl #20
    3ca8:	19380100 	ldmdbne	r8!, {r8}
    3cac:	00000133 	andeq	r0, r0, r3, lsr r1
    3cb0:	14005401 	strne	r5, [r0], #-1025	; 0xfffffbff
    3cb4:	000014d2 	ldrdeq	r1, [r0], -r2
    3cb8:	c40d1e01 	strgt	r1, [sp], #-3585	; 0xfffff1ff
    3cbc:	b0000134 	andlt	r0, r0, r4, lsr r1
    3cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    3cc4:	155c129c 	ldrbne	r1, [ip, #-668]	; 0xfffffd64
    3cc8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3ccc:	00013328 	andeq	r3, r1, r8, lsr #6
    3cd0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3cd4:	0006c612 	andeq	ip, r6, r2, lsl r6
    3cd8:	441e0100 	ldrmi	r0, [lr], #-256	; 0xffffff00
    3cdc:	0000004e 	andeq	r0, r0, lr, asr #32
    3ce0:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    3ce4:	000134dc 	ldrdeq	r3, [r1], -ip
    3ce8:	0000007c 	andeq	r0, r0, ip, ror r0
    3cec:	74696216 	strbtvc	r6, [r9], #-534	; 0xfffffdea
    3cf0:	10230100 	eorne	r0, r3, r0, lsl #2
    3cf4:	00000047 	andeq	r0, r0, r7, asr #32
    3cf8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    3cfc:	00717269 	rsbseq	r7, r1, r9, ror #4
    3d00:	47102601 	ldrmi	r2, [r0, -r1, lsl #12]
    3d04:	02000000 	andeq	r0, r0, #0
    3d08:	00007091 	muleq	r0, r1, r0
    3d0c:	00043400 	andeq	r3, r4, r0, lsl #8
    3d10:	c0000400 	andgt	r0, r0, r0, lsl #8
    3d14:	0400000c 	streq	r0, [r0], #-12
    3d18:	00007801 	andeq	r7, r0, r1, lsl #16
    3d1c:	16370c00 	ldrtne	r0, [r7], -r0, lsl #24
    3d20:	00f80000 	rscseq	r0, r8, r0
    3d24:	38640000 	stmdacc	r4!, {}^	; <UNPREDICTABLE>
    3d28:	05d80001 	ldrbeq	r0, [r8, #1]
    3d2c:	171c0000 	ldrne	r0, [ip, -r0]
    3d30:	69020000 	stmdbvs	r2, {}	; <UNPREDICTABLE>
    3d34:	07000016 	smladeq	r0, r6, r0, r0
    3d38:	00006201 	andeq	r6, r0, r1, lsl #4
    3d3c:	06470200 	strbeq	r0, [r7], -r0, lsl #4
    3d40:	00000062 	andeq	r0, r0, r2, rrx
    3d44:	0016b503 	andseq	fp, r6, r3, lsl #10
    3d48:	d0030000 	andle	r0, r3, r0
    3d4c:	01000016 	tsteq	r0, r6, lsl r0
    3d50:	00177e03 	andseq	r7, r7, r3, lsl #28
    3d54:	a9030200 	stmdbge	r3, {r9}
    3d58:	03000016 	movweq	r0, #22
    3d5c:	0016de03 	andseq	sp, r6, r3, lsl #28
    3d60:	dd030400 	cfstrsle	mvf0, [r3, #-0]
    3d64:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    3d68:	0015f103 	andseq	pc, r5, r3, lsl #2
    3d6c:	04000600 	streq	r0, [r0], #-1536	; 0xfffffa00
    3d70:	08a40801 	stmiaeq	r4!, {r0, fp}
    3d74:	92020000 	andls	r0, r2, #0
    3d78:	07000016 	smladeq	r0, r6, r0, r0
    3d7c:	00006201 	andeq	r6, r0, r1, lsl #4
    3d80:	065a0200 	ldrbeq	r0, [sl], -r0, lsl #4
    3d84:	00000088 	andeq	r0, r0, r8, lsl #1
    3d88:	0016a103 	andseq	sl, r6, r3, lsl #2
    3d8c:	ab030000 	blge	c3d94 <__bss_end+0xae244>
    3d90:	01000017 	tsteq	r0, r7, lsl r0
    3d94:	01a00500 	lsleq	r0, r0, #10
    3d98:	01ca094a 	biceq	r0, sl, sl, asr #18
    3d9c:	14060000 	strne	r0, [r6], #-0
    3da0:	01000017 	tsteq	r0, r7, lsl r0
    3da4:	01ca104b 	biceq	r1, sl, fp, asr #32
    3da8:	06000000 	streq	r0, [r0], -r0
    3dac:	0000171b 	andeq	r1, r0, fp, lsl r7
    3db0:	e1104c01 	tst	r0, r1, lsl #24
    3db4:	18000001 	stmdane	r0, {r0}
    3db8:	00159306 	andseq	r9, r5, r6, lsl #6
    3dbc:	104d0100 	subne	r0, sp, r0, lsl #2
    3dc0:	000001e8 	andeq	r0, r0, r8, ror #3
    3dc4:	1726061c 			; <UNDEFINED> instruction: 0x1726061c
    3dc8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3dcc:	0001e110 	andeq	lr, r1, r0, lsl r1
    3dd0:	d1062400 	tstle	r6, r0, lsl #8
    3dd4:	01000015 	tsteq	r0, r5, lsl r0
    3dd8:	01e8104f 	mvneq	r1, pc, asr #32
    3ddc:	06280000 	strteq	r0, [r8], -r0
    3de0:	00001731 	andeq	r1, r0, r1, lsr r7
    3de4:	e1105001 	tst	r0, r1
    3de8:	30000001 	andcc	r0, r0, r1
    3dec:	00167506 	andseq	r7, r6, r6, lsl #10
    3df0:	10510100 	subsne	r0, r1, r0, lsl #2
    3df4:	000001e8 	andeq	r0, r0, r8, ror #3
    3df8:	173c0634 			; <UNDEFINED> instruction: 0x173c0634
    3dfc:	52010000 	andpl	r0, r1, #0
    3e00:	0001e110 	andeq	lr, r1, r0, lsl r1
    3e04:	f7063c00 			; <UNDEFINED> instruction: 0xf7063c00
    3e08:	01000016 	tsteq	r0, r6, lsl r0
    3e0c:	01e81053 	mvneq	r1, r3, asr r0
    3e10:	06400000 	strbeq	r0, [r0], -r0
    3e14:	00001747 	andeq	r1, r0, r7, asr #14
    3e18:	e1105401 	tst	r0, r1, lsl #8
    3e1c:	48000001 	stmdami	r0, {r0}
    3e20:	0016f106 	andseq	pc, r6, r6, lsl #2
    3e24:	10550100 	subsne	r0, r5, r0, lsl #2
    3e28:	000001e8 	andeq	r0, r0, r8, ror #3
    3e2c:	1752064c 	ldrbne	r0, [r2, -ip, asr #12]
    3e30:	56010000 	strpl	r0, [r1], -r0
    3e34:	0001e110 	andeq	lr, r1, r0, lsl r1
    3e38:	9b065400 	blls	198e40 <__bss_end+0x1832f0>
    3e3c:	01000016 	tsteq	r0, r6, lsl r0
    3e40:	01e81057 	mvneq	r1, r7, asr r0
    3e44:	06580000 	ldrbeq	r0, [r8], -r0
    3e48:	0000175d 	andeq	r1, r0, sp, asr r7
    3e4c:	e1105801 	tst	r0, r1, lsl #16
    3e50:	60000001 	andvs	r0, r0, r1
    3e54:	0015d706 	andseq	sp, r5, r6, lsl #14
    3e58:	10590100 	subsne	r0, r9, r0, lsl #2
    3e5c:	000001e8 	andeq	r0, r0, r8, ror #3
    3e60:	17680664 	strbne	r0, [r8, -r4, ror #12]!
    3e64:	5a010000 	bpl	43e6c <__bss_end+0x2e31c>
    3e68:	0001e110 	andeq	lr, r1, r0, lsl r1
    3e6c:	c1066c00 	tstgt	r6, r0, lsl #24
    3e70:	01000016 	tsteq	r0, r6, lsl r0
    3e74:	01e8105b 	mvneq	r1, fp, asr r0
    3e78:	06700000 	ldrbteq	r0, [r0], -r0
    3e7c:	00001773 	andeq	r1, r0, r3, ror r7
    3e80:	e1105c01 	tst	r0, r1, lsl #24
    3e84:	78000001 	stmdavc	r0, {r0}
    3e88:	00167b06 	andseq	r7, r6, r6, lsl #22
    3e8c:	105d0100 	subsne	r0, sp, r0, lsl #2
    3e90:	000001e8 	andeq	r0, r0, r8, ror #3
    3e94:	1795067c 			; <UNDEFINED> instruction: 0x1795067c
    3e98:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3e9c:	0001e110 	andeq	lr, r1, r0, lsl r1
    3ea0:	19068400 	stmdbne	r6, {sl, pc}
    3ea4:	01000016 	tsteq	r0, r6, lsl r0
    3ea8:	01e8105f 	mvneq	r1, pc, asr r0
    3eac:	06880000 	streq	r0, [r8], r0
    3eb0:	000017a0 	andeq	r1, r0, r0, lsr #15
    3eb4:	e1106001 	tst	r0, r1
    3eb8:	90000001 	andls	r0, r0, r1
    3ebc:	00163106 	andseq	r3, r6, r6, lsl #2
    3ec0:	10610100 	rsbne	r0, r1, r0, lsl #2
    3ec4:	000001f8 	strdeq	r0, [r0], -r8
    3ec8:	16c70694 			; <UNDEFINED> instruction: 0x16c70694
    3ecc:	62010000 	andvs	r0, r1, #0
    3ed0:	0001e810 	andeq	lr, r1, r0, lsl r8
    3ed4:	07009800 	streq	r9, [r0, -r0, lsl #16]
    3ed8:	000001e1 	andeq	r0, r0, r1, ror #3
    3edc:	000001da 	ldrdeq	r0, [r0], -sl
    3ee0:	0001da08 	andeq	sp, r1, r8, lsl #20
    3ee4:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    3ee8:	066a0704 	strbteq	r0, [sl], -r4, lsl #14
    3eec:	04040000 	streq	r0, [r4], #-0
    3ef0:	00066507 	andeq	r6, r6, r7, lsl #10
    3ef4:	01e10700 	mvneq	r0, r0, lsl #14
    3ef8:	01f80000 	mvnseq	r0, r0
    3efc:	da080000 	ble	203f04 <__bss_end+0x1ee3b4>
    3f00:	01000001 	tsteq	r0, r1
    3f04:	01e10700 	mvneq	r0, r0, lsl #14
    3f08:	02080000 	andeq	r0, r8, #0
    3f0c:	da080000 	ble	203f14 <__bss_end+0x1ee3c4>
    3f10:	00000001 	andeq	r0, r0, r1
    3f14:	15990900 	ldrne	r0, [r9, #2304]	; 0x900
    3f18:	64010000 	strvs	r0, [r1], #-0
    3f1c:	00008803 	andeq	r8, r0, r3, lsl #16
    3f20:	02080a00 	andeq	r0, r8, #0, 20
    3f24:	3a0b0000 	bcc	2c3f2c <__bss_end+0x2ae3dc>
    3f28:	01000001 	tsteq	r0, r1
    3f2c:	02312466 	eorseq	r2, r1, #1711276032	; 0x66000000
    3f30:	03050000 	movweq	r0, #20480	; 0x5000
    3f34:	00014744 	andeq	r4, r1, r4, asr #14
    3f38:	0214040c 	andseq	r0, r4, #12, 8	; 0xc000000
    3f3c:	2b0d0000 	blcs	343f44 <__bss_end+0x32e3f4>
    3f40:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3f44:	00001606 	andeq	r1, r0, r6, lsl #12
    3f48:	e406c201 	str	ip, [r6], #-513	; 0xfffffdff
    3f4c:	5800013d 	stmdapl	r0, {r0, r2, r3, r4, r5, r8}
    3f50:	01000000 	mrseq	r0, (UNDEF: 0)
    3f54:	00027a9c 	muleq	r2, ip, sl
    3f58:	15b00f00 	ldrne	r0, [r0, #3840]!	; 0xf00
    3f5c:	c2010000 	andgt	r0, r1, #0
    3f60:	0001da26 	andeq	sp, r1, r6, lsr #20
    3f64:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3f68:	0014de10 	andseq	sp, r4, r0, lsl lr
    3f6c:	10c40100 	sbcne	r0, r4, r0, lsl #2
    3f70:	000001e1 	andeq	r0, r0, r1, ror #3
    3f74:	10749102 	rsbsne	r9, r4, r2, lsl #2
    3f78:	00000725 	andeq	r0, r0, r5, lsr #14
    3f7c:	e110c501 	tst	r0, r1, lsl #10
    3f80:	02000001 	andeq	r0, r0, #1
    3f84:	0e007091 	mcreq	0, 0, r7, cr0, cr1, {4}
    3f88:	000016fd 	strdeq	r1, [r0], -sp
    3f8c:	2c06a501 	cfstr32cs	mvfx10, [r6], {1}
    3f90:	b800013c 	stmdalt	r0, {r2, r3, r4, r5, r8}
    3f94:	01000001 	tsteq	r0, r1
    3f98:	0002cd9c 	muleq	r2, ip, sp
    3f9c:	15b00f00 	ldrne	r0, [r0, #3840]!	; 0xf00
    3fa0:	a5010000 	strge	r0, [r1, #-0]
    3fa4:	0001da25 	andeq	sp, r1, r5, lsr #20
    3fa8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3fac:	00170f0f 	andseq	r0, r7, pc, lsl #30
    3fb0:	3ea50100 	fdvccs	f0, f5, f0
    3fb4:	00000025 	andeq	r0, r0, r5, lsr #32
    3fb8:	106b9102 	rsbne	r9, fp, r2, lsl #2
    3fbc:	000014de 	ldrdeq	r1, [r0], -lr
    3fc0:	e110a701 	tst	r0, r1, lsl #14
    3fc4:	02000001 	andeq	r0, r0, #1
    3fc8:	25107491 	ldrcs	r7, [r0, #-1169]	; 0xfffffb6f
    3fcc:	01000007 	tsteq	r0, r7
    3fd0:	01e110a8 	mvneq	r1, r8, lsr #1
    3fd4:	91020000 	mrsls	r0, (UNDEF: 2)
    3fd8:	200e0070 	andcs	r0, lr, r0, ror r0
    3fdc:	01000016 	tsteq	r0, r6, lsl r0
    3fe0:	3a7c0688 	bcc	1f05a08 <__bss_end+0x1eefeb8>
    3fe4:	01b00001 	movseq	r0, r1
    3fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fec:	00000320 	andeq	r0, r0, r0, lsr #6
    3ff0:	0015b00f 	andseq	fp, r5, pc
    3ff4:	24880100 	strcs	r0, [r8], #256	; 0x100
    3ff8:	000001da 	ldrdeq	r0, [r0], -sl
    3ffc:	0f6c9102 	svceq	0x006c9102
    4000:	0000170f 	andeq	r1, r0, pc, lsl #14
    4004:	253d8801 	ldrcs	r8, [sp, #-2049]!	; 0xfffff7ff
    4008:	02000000 	andeq	r0, r0, #0
    400c:	de106b91 	vmovle.32	r6, d16[0]
    4010:	01000014 	tsteq	r0, r4, lsl r0
    4014:	01e1108a 	mvneq	r1, sl, lsl #1
    4018:	91020000 	mrsls	r0, (UNDEF: 2)
    401c:	07251074 			; <UNDEFINED> instruction: 0x07251074
    4020:	8b010000 	blhi	44028 <__bss_end+0x2e4d8>
    4024:	0001e110 	andeq	lr, r1, r0, lsl r1
    4028:	70910200 	addsvc	r0, r1, r0, lsl #4
    402c:	15b71100 	ldrne	r1, [r7, #256]!	; 0x100
    4030:	84010000 	strhi	r0, [r1], #-0
    4034:	00034a05 	andeq	r4, r3, r5, lsl #20
    4038:	013a2c00 	teqeq	sl, r0, lsl #24
    403c:	00005000 	andeq	r5, r0, r0
    4040:	4a9c0100 	bmi	fe704448 <_estack+0xf66f4448>
    4044:	0f000003 	svceq	0x00000003
    4048:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    404c:	da1b8401 	ble	6e5058 <__bss_end+0x6cf508>
    4050:	02000001 	andeq	r0, r0, #1
    4054:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    4058:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    405c:	8d0e0074 	stchi	0, cr0, [lr, #-464]	; 0xfffffe30
    4060:	01000017 	tsteq	r0, r7, lsl r0
    4064:	39740679 	ldmdbcc	r4!, {r0, r3, r4, r5, r6, r9, sl}^
    4068:	00b80001 	adcseq	r0, r8, r1
    406c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4070:	000003a4 	andeq	r0, r0, r4, lsr #7
    4074:	0015b00f 	andseq	fp, r5, pc
    4078:	1b790100 	blne	1e44480 <__bss_end+0x1e2e930>
    407c:	000001da 	ldrdeq	r0, [r0], -sl
    4080:	0f6c9102 	svceq	0x006c9102
    4084:	0000158c 	andeq	r1, r0, ip, lsl #11
    4088:	da307901 	ble	c22494 <__bss_end+0xc0c944>
    408c:	02000001 	andeq	r0, r0, #1
    4090:	25106891 	ldrcs	r6, [r0, #-2193]	; 0xfffff76f
    4094:	01000007 	tsteq	r0, r7
    4098:	01e1107a 	mvneq	r1, sl, ror r0
    409c:	91020000 	mrsls	r0, (UNDEF: 2)
    40a0:	14de1074 	ldrbne	r1, [lr], #116	; 0x74
    40a4:	7b010000 	blvc	440ac <__bss_end+0x2e55c>
    40a8:	0001e110 	andeq	lr, r1, r0, lsl r1
    40ac:	70910200 	addsvc	r0, r1, r0, lsl #4
    40b0:	15c01300 	strbne	r1, [r0, #768]	; 0x300
    40b4:	75010000 	strvc	r0, [r1, #-0]
    40b8:	01394006 	teqeq	r9, r6
    40bc:	00003400 	andeq	r3, r0, r0, lsl #8
    40c0:	d99c0100 	ldmible	ip, {r8}
    40c4:	0f000003 	svceq	0x00000003
    40c8:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    40cc:	da247501 	ble	9214d8 <__bss_end+0x90b988>
    40d0:	02000001 	andeq	r0, r0, #1
    40d4:	64147491 	ldrvs	r7, [r4], #-1169	; 0xfffffb6f
    40d8:	01007269 	tsteq	r0, r9, ror #4
    40dc:	00693a75 	rsbeq	r3, r9, r5, ror sl
    40e0:	91020000 	mrsls	r0, (UNDEF: 2)
    40e4:	82150073 	andshi	r0, r5, #115	; 0x73
    40e8:	01000016 	tsteq	r0, r6, lsl r0
    40ec:	38640669 	stmdacc	r4!, {r0, r3, r5, r6, r9, sl}^
    40f0:	00dc0001 	sbcseq	r0, ip, r1
    40f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    40f8:	0015b00f 	andseq	fp, r5, pc
    40fc:	23690100 	cmncs	r9, #0, 2
    4100:	000001da 	ldrdeq	r0, [r0], -sl
    4104:	0f649102 	svceq	0x00649102
    4108:	000016e9 	andeq	r1, r0, r9, ror #13
    410c:	da386901 	ble	e1e518 <__bss_end+0xe089c8>
    4110:	02000001 	andeq	r0, r0, #1
    4114:	25106091 	ldrcs	r6, [r0, #-145]	; 0xffffff6f
    4118:	01000007 	tsteq	r0, r7
    411c:	034a066b 	movteq	r0, #42603	; 0xa66b
    4120:	91020000 	mrsls	r0, (UNDEF: 2)
    4124:	61761674 	cmnvs	r6, r4, ror r6
    4128:	6d01006c 	stcvs	0, cr0, [r1, #-432]	; 0xfffffe50
    412c:	0001e110 	andeq	lr, r1, r0, lsl r1
    4130:	70910200 	addsvc	r0, r1, r0, lsl #4
    4134:	0015ab10 	andseq	sl, r5, r0, lsl fp
    4138:	066f0100 	strbteq	r0, [pc], -r0, lsl #2
    413c:	0000034a 	andeq	r0, r0, sl, asr #6
    4140:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4144:	000b7900 	andeq	r7, fp, r0, lsl #18
    4148:	27000400 	strcs	r0, [r0, -r0, lsl #8]
    414c:	0400000e 	streq	r0, [r0], #-14
    4150:	00007801 	andeq	r7, r0, r1, lsl #16
    4154:	18460c00 	stmdane	r6, {sl, fp}^
    4158:	00f80000 	rscseq	r0, r8, r0
    415c:	3e3c0000 	cdpcc	0, 3, cr0, cr12, cr0, {0}
    4160:	04ac0001 	strteq	r0, [ip], #1
    4164:	188d0000 	stmne	sp, {}	; <UNPREDICTABLE>
    4168:	2b020000 	blcs	84170 <__bss_end+0x6e620>
    416c:	0200000b 	andeq	r0, r0, #11
    4170:	003617d8 	ldrsbteq	r1, [r6], -r8
    4174:	25030000 	strcs	r0, [r3, #-0]
    4178:	04000000 	streq	r0, [r0], #-0
    417c:	066a0704 	strbteq	r0, [sl], -r4, lsl #14
    4180:	04050000 	streq	r0, [r5], #-0
    4184:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4188:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    418c:	0000011f 	andeq	r0, r0, pc, lsl r1
    4190:	9b040804 	blls	1061a8 <__bss_end+0xf0658>
    4194:	06000001 	streq	r0, [r0], -r1
    4198:	00000813 	andeq	r0, r0, r3, lsl r8
    419c:	17016502 	strne	r6, [r1, -r2, lsl #10]
    41a0:	00000036 	andeq	r0, r0, r6, lsr r0
    41a4:	a6060104 	strge	r0, [r6], -r4, lsl #2
    41a8:	04000008 	streq	r0, [r0], #-8
    41ac:	08a40801 	stmiaeq	r4!, {r0, fp}
    41b0:	02040000 	andeq	r0, r4, #0
    41b4:	0008bb05 	andeq	fp, r8, r5, lsl #22
    41b8:	07020400 	streq	r0, [r2, -r0, lsl #8]
    41bc:	00000059 	andeq	r0, r0, r9, asr r0
    41c0:	00007403 	andeq	r7, r0, r3, lsl #8
    41c4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    41c8:	00000124 	andeq	r0, r0, r4, lsr #2
    41cc:	65070404 	strvs	r0, [r7, #-1028]	; 0xfffffbfc
    41d0:	04000006 	streq	r0, [r0], #-6
    41d4:	06600708 	strbteq	r0, [r0], -r8, lsl #14
    41d8:	81020000 	mrshi	r0, (UNDEF: 2)
    41dc:	03000008 	movweq	r0, #8
    41e0:	00800e2e 	addeq	r0, r0, lr, lsr #28
    41e4:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
    41e8:	03000009 	movweq	r0, #9
    41ec:	00800e74 	addeq	r0, r0, r4, ror lr
    41f0:	04070000 	streq	r0, [r7], #-0
    41f4:	cf03a503 	svcgt	0x0003a503
    41f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    41fc:	0000080d 	andeq	r0, r0, sp, lsl #16
    4200:	520ca703 	andpl	sl, ip, #786432	; 0xc0000
    4204:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4208:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    420c:	cf13a803 	svcgt	0x0013a803
    4210:	00000000 	andeq	r0, r0, r0
    4214:	00006609 	andeq	r6, r0, r9, lsl #12
    4218:	0000df00 	andeq	sp, r0, r0, lsl #30
    421c:	00360a00 	eorseq	r0, r6, r0, lsl #20
    4220:	00030000 	andeq	r0, r3, r0
    4224:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    4228:	00010309 	andeq	r0, r1, r9, lsl #6
    422c:	09870c00 	stmibeq	r7, {sl, fp}
    4230:	a4030000 	strge	r0, [r3], #-0
    4234:	00003d07 	andeq	r3, r0, r7, lsl #26
    4238:	8f0c0000 	svchi	0x000c0000
    423c:	03000009 	movweq	r0, #9
    4240:	00ad05a9 	adceq	r0, sp, r9, lsr #11
    4244:	00040000 	andeq	r0, r4, r0
    4248:	0008e302 	andeq	lr, r8, r2, lsl #6
    424c:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    4250:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4254:	ed02040d 	cfstrs	mvf0, [r2, #-52]	; 0xffffffcc
    4258:	04000009 	streq	r0, [r0], #-9
    425c:	00871916 	addeq	r1, r7, r6, lsl r9
    4260:	92020000 	andls	r0, r2, #0
    4264:	05000008 	streq	r0, [r0, #-8]
    4268:	003d0d0c 	eorseq	r0, sp, ip, lsl #26
    426c:	82020000 	andhi	r0, r2, #0
    4270:	04000007 	streq	r0, [r0], #-7
    4274:	011d1b23 	tsteq	sp, r3, lsr #22
    4278:	930e0000 	movwls	r0, #57344	; 0xe000
    427c:	18000007 	stmdane	r0, {r0, r1, r2}
    4280:	8f083404 	svchi	0x00083404
    4284:	0c000001 	stceq	0, cr0, [r0], {1}
    4288:	00000904 	andeq	r0, r0, r4, lsl #18
    428c:	8f133604 	svchi	0x00133604
    4290:	00000001 	andeq	r0, r0, r1
    4294:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    4298:	3d073704 	stccc	7, cr3, [r7, #-16]
    429c:	04000000 	streq	r0, [r0], #-0
    42a0:	0009440c 	andeq	r4, r9, ip, lsl #8
    42a4:	0b370400 	bleq	dc52ac <__bss_end+0xdaf75c>
    42a8:	0000003d 	andeq	r0, r0, sp, lsr r0
    42ac:	1b490c08 	blne	12472d4 <__bss_end+0x1231784>
    42b0:	37040000 	strcc	r0, [r4, -r0]
    42b4:	00003d14 	andeq	r3, r0, r4, lsl sp
    42b8:	320c0c00 	andcc	r0, ip, #0, 24
    42bc:	0400000a 	streq	r0, [r0], #-10
    42c0:	003d1b37 	eorseq	r1, sp, r7, lsr fp
    42c4:	0f100000 	svceq	0x00100000
    42c8:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    42cc:	01950b38 	orrseq	r0, r5, r8, lsr fp
    42d0:	00140000 	andseq	r0, r4, r0
    42d4:	01350410 	teqeq	r5, r0, lsl r4
    42d8:	11090000 	mrsne	r0, (UNDEF: 9)
    42dc:	a5000001 	strge	r0, [r0, #-1]
    42e0:	0a000001 	beq	42ec <_start-0x3d14>
    42e4:	00000036 	andeq	r0, r0, r6, lsr r0
    42e8:	ba0e0000 	blt	3842f0 <__bss_end+0x36e7a0>
    42ec:	24000007 	strcs	r0, [r0], #-7
    42f0:	28083c04 	stmdacs	r8, {r2, sl, fp, ip, sp}
    42f4:	0c000002 	stceq	0, cr0, [r0], {2}
    42f8:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    42fc:	3d093e04 	stccc	14, cr3, [r9, #-16]
    4300:	00000000 	andeq	r0, r0, r0
    4304:	0009b80c 	andeq	fp, r9, ip, lsl #16
    4308:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    430c:	0000003d 	andeq	r0, r0, sp, lsr r0
    4310:	06cb0c04 	strbeq	r0, [fp], r4, lsl #24
    4314:	40040000 	andmi	r0, r4, r0
    4318:	00003d09 	andeq	r3, r0, r9, lsl #26
    431c:	c40c0800 	strgt	r0, [ip], #-2048	; 0xfffff800
    4320:	0400000a 	streq	r0, [r0], #-10
    4324:	003d0941 	eorseq	r0, sp, r1, asr #18
    4328:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    432c:	0000085b 	andeq	r0, r0, fp, asr r8
    4330:	3d094204 	sfmcc	f4, 4, [r9, #-16]
    4334:	10000000 	andne	r0, r0, r0
    4338:	00083b0c 	andeq	r3, r8, ip, lsl #22
    433c:	09430400 	stmdbeq	r3, {sl}^
    4340:	0000003d 	andeq	r0, r0, sp, lsr r0
    4344:	0a370c14 	beq	dc739c <__bss_end+0xdb184c>
    4348:	44040000 	strmi	r0, [r4], #-0
    434c:	00003d09 	andeq	r3, r0, r9, lsl #26
    4350:	c50c1800 	strgt	r1, [ip, #-2048]	; 0xfffff800
    4354:	04000008 	streq	r0, [r0], #-8
    4358:	003d0945 	eorseq	r0, sp, r5, asr #18
    435c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    4360:	00000a8b 	andeq	r0, r0, fp, lsl #21
    4364:	3d094604 	stccc	6, cr4, [r9, #-16]
    4368:	20000000 	andcs	r0, r0, r0
    436c:	06da1100 	ldrbeq	r1, [sl], r0, lsl #2
    4370:	01080000 	mrseq	r0, (UNDEF: 8)
    4374:	6d084f04 	stcvs	15, cr4, [r8, #-16]
    4378:	0c000002 	stceq	0, cr0, [r0], {2}
    437c:	00000761 	andeq	r0, r0, r1, ror #14
    4380:	6d0a5004 	stcvs	0, cr5, [sl, #-16]
    4384:	00000002 	andeq	r0, r0, r2
    4388:	0006150c 	andeq	r1, r6, ip, lsl #10
    438c:	09510400 	ldmdbeq	r1, {sl}^
    4390:	0000026d 	andeq	r0, r0, sp, ror #4
    4394:	09d41280 	ldmibeq	r4, {r7, r9, ip}^
    4398:	53040000 	movwpl	r0, #16384	; 0x4000
    439c:	0001110a 	andeq	r1, r1, sl, lsl #2
    43a0:	12010000 	andne	r0, r1, #0
    43a4:	00000704 	andeq	r0, r0, r4, lsl #14
    43a8:	110a5604 	tstne	sl, r4, lsl #12
    43ac:	04000001 	streq	r0, [r0], #-1
    43b0:	0f090001 	svceq	0x00090001
    43b4:	7d000001 	stcvc	0, cr0, [r0, #-4]
    43b8:	0a000002 	beq	43c8 <_start-0x3c38>
    43bc:	00000036 	andeq	r0, r0, r6, lsr r0
    43c0:	6411001f 	ldrvs	r0, [r1], #-31	; 0xffffffe1
    43c4:	90000008 	andls	r0, r0, r8
    43c8:	08620401 	stmdaeq	r2!, {r0, sl}^
    43cc:	000002c0 	andeq	r0, r0, r0, asr #5
    43d0:	0009040c 	andeq	r0, r9, ip, lsl #8
    43d4:	12630400 	rsbne	r0, r3, #0, 8
    43d8:	000002c0 	andeq	r0, r0, r0, asr #5
    43dc:	091c0c00 	ldmdbeq	ip, {sl, fp}
    43e0:	64040000 	strvs	r0, [r4], #-0
    43e4:	00003d06 	andeq	r3, r0, r6, lsl #26
    43e8:	690c0400 	stmdbvs	ip, {sl}
    43ec:	04000007 	streq	r0, [r0], #-7
    43f0:	02c60966 	sbceq	r0, r6, #1671168	; 0x198000
    43f4:	0c080000 	stceq	0, cr0, [r8], {-0}
    43f8:	000006da 	ldrdeq	r0, [r0], -sl
    43fc:	281e6704 	ldmdacs	lr, {r2, r8, r9, sl, sp, lr}
    4400:	88000002 	stmdahi	r0, {r1}
    4404:	7d041000 	stcvc	0, cr1, [r4, #-0]
    4408:	09000002 	stmdbeq	r0, {r1}
    440c:	000002d6 	ldrdeq	r0, [r0], -r6
    4410:	000002d6 	ldrdeq	r0, [r0], -r6
    4414:	0000360a 	andeq	r3, r0, sl, lsl #12
    4418:	10001f00 	andne	r1, r0, r0, lsl #30
    441c:	0002dc04 	andeq	sp, r2, r4, lsl #24
    4420:	cf0e1300 	svcgt	0x000e1300
    4424:	08000008 	stmdaeq	r0, {r3}
    4428:	05087a04 	streq	r7, [r8, #-2564]	; 0xfffff5fc
    442c:	0c000003 	stceq	0, cr0, [r0], {3}
    4430:	000006c5 	andeq	r0, r0, r5, asr #13
    4434:	05117b04 	ldreq	r7, [r1, #-2820]	; 0xfffff4fc
    4438:	00000003 	andeq	r0, r0, r3
    443c:	0006210c 	andeq	r2, r6, ip, lsl #2
    4440:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    4444:	0000003d 	andeq	r0, r0, sp, lsr r0
    4448:	04100004 	ldreq	r0, [r0], #-4
    444c:	00000066 	andeq	r0, r0, r6, rrx
    4450:	0008ee0e 	andeq	lr, r8, lr, lsl #28
    4454:	ba046800 	blt	11e45c <__bss_end+0x10890c>
    4458:	00044e08 	andeq	r4, r4, r8, lsl #28
    445c:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    4460:	12bb0400 	adcsne	r0, fp, #0, 8
    4464:	00000305 	andeq	r0, r0, r5, lsl #6
    4468:	725f0f00 	subsvc	r0, pc, #0, 30
    446c:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    4470:	0000003d 	andeq	r0, r0, sp, lsr r0
    4474:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    4478:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    447c:	0000003d 	andeq	r0, r0, sp, lsr r0
    4480:	06fd0c08 	ldrbteq	r0, [sp], r8, lsl #24
    4484:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    4488:	00006d09 	andeq	r6, r0, r9, lsl #26
    448c:	d60c0c00 	strle	r0, [ip], -r0, lsl #24
    4490:	04000007 	streq	r0, [r0], #-7
    4494:	006d09bf 	strhteq	r0, [sp], #-159	; 0xffffff61
    4498:	0f0e0000 	svceq	0x000e0000
    449c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    44a0:	dd11c004 	ldcle	0, cr12, [r1, #-16]
    44a4:	10000002 	andne	r0, r0, r2
    44a8:	0006770c 	andeq	r7, r6, ip, lsl #14
    44ac:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    44b0:	0000003d 	andeq	r0, r0, sp, lsr r0
    44b4:	06e80c18 	usateq	r0, #8, r8, lsl #24
    44b8:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    44bc:	00010f0a 	andeq	r0, r1, sl, lsl #30
    44c0:	aa0c1c00 	bge	30b4c8 <__bss_end+0x2f5978>
    44c4:	04000007 	streq	r0, [r0], #-7
    44c8:	05d21dca 	ldrbeq	r1, [r2, #3530]	; 0xdca
    44cc:	0c200000 	stceq	0, cr0, [r0], #-0
    44d0:	00000834 	andeq	r0, r0, r4, lsr r8
    44d4:	fc1dcc04 	ldc2	12, cr12, [sp], {4}
    44d8:	24000005 	strcs	r0, [r0], #-5
    44dc:	0009970c 	andeq	r9, r9, ip, lsl #14
    44e0:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 44e8 <_start-0x3b18>
    44e4:	00000620 	andeq	r0, r0, r0, lsr #12
    44e8:	0aa50c28 	beq	fe947590 <_estack+0xf6937590>
    44ec:	d0040000 	andle	r0, r4, r0
    44f0:	00063a09 	andeq	r3, r6, r9, lsl #20
    44f4:	5f0f2c00 	svcpl	0x000f2c00
    44f8:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    44fc:	02dd11d3 	sbcseq	r1, sp, #-1073741772	; 0xc0000034
    4500:	0f300000 	svceq	0x00300000
    4504:	0070755f 	rsbseq	r7, r0, pc, asr r5
    4508:	0512d404 	ldreq	sp, [r2, #-1028]	; 0xfffffbfc
    450c:	38000003 	stmdacc	r0, {r0, r1}
    4510:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    4514:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    4518:	0000003d 	andeq	r0, r0, sp, lsr r0
    451c:	06bf0c3c 			; <UNDEFINED> instruction: 0x06bf0c3c
    4520:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    4524:	00064011 	andeq	r4, r6, r1, lsl r0
    4528:	7d0c4000 	stcvc	0, cr4, [ip, #-0]
    452c:	0400000a 	streq	r0, [r0], #-10
    4530:	065011d9 			; <UNDEFINED> instruction: 0x065011d9
    4534:	0f430000 	svceq	0x00430000
    4538:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    453c:	dd11dc04 	ldcle	12, cr13, [r1, #-16]
    4540:	44000002 	strmi	r0, [r0], #-2
    4544:	0007130c 	andeq	r1, r7, ip, lsl #6
    4548:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    454c:	0000003d 	andeq	r0, r0, sp, lsr r0
    4550:	07240c4c 	streq	r0, [r4, -ip, asr #24]!
    4554:	e0040000 	and	r0, r4, r0
    4558:	0000950a 	andeq	r9, r0, sl, lsl #10
    455c:	3a0c5000 	bcc	318564 <__bss_end+0x302a14>
    4560:	04000006 	streq	r0, [r0], #-6
    4564:	046c12e3 	strbteq	r1, [ip], #-739	; 0xfffffd1d
    4568:	0c540000 	mraeq	r0, r4, acc0
    456c:	0000081a 	andeq	r0, r0, sl, lsl r8
    4570:	290ce704 	stmdbcs	ip, {r2, r8, r9, sl, sp, lr, pc}
    4574:	58000001 	stmdapl	r0, {r0}
    4578:	0008f60c 	andeq	pc, r8, ip, lsl #12
    457c:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    4580:	00000103 	andeq	r0, r0, r3, lsl #2
    4584:	082c0c5c 	stmdaeq	ip!, {r2, r3, r4, r6, sl, fp}
    4588:	ea040000 	b	104590 <__bss_end+0xeea40>
    458c:	00003d09 	andeq	r3, r0, r9, lsl #26
    4590:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
    4594:	0000003d 	andeq	r0, r0, sp, lsr r0
    4598:	0000046c 	andeq	r0, r0, ip, ror #8
    459c:	00046c15 	andeq	r6, r4, r5, lsl ip
    45a0:	010f1500 	tsteq	pc, r0, lsl #10
    45a4:	c0150000 	andsgt	r0, r5, r0
    45a8:	15000005 	strne	r0, [r0, #-5]
    45ac:	0000003d 	andeq	r0, r0, sp, lsr r0
    45b0:	77041000 	strvc	r1, [r4, -r0]
    45b4:	03000004 	movweq	r0, #4
    45b8:	0000046c 	andeq	r0, r0, ip, ror #8
    45bc:	000a7616 	andeq	r7, sl, r6, lsl r6
    45c0:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    45c4:	c0080265 	andgt	r0, r8, r5, ror #4
    45c8:	17000005 	strne	r0, [r0, -r5]
    45cc:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    45d0:	07026704 	streq	r6, [r2, -r4, lsl #14]
    45d4:	0000003d 	andeq	r0, r0, sp, lsr r0
    45d8:	070c1700 	streq	r1, [ip, -r0, lsl #14]
    45dc:	6c040000 	stcvs	0, cr0, [r4], {-0}
    45e0:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
    45e4:	17040000 	strne	r0, [r4, -r0]
    45e8:	000007c6 	andeq	r0, r0, r6, asr #15
    45ec:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    45f0:	000006ac 	andeq	r0, r0, ip, lsr #13
    45f4:	078b1708 	streq	r1, [fp, r8, lsl #14]
    45f8:	6c040000 	stcvs	0, cr0, [r4], {-0}
    45fc:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
    4600:	170c0000 	strne	r0, [ip, -r0]
    4604:	00000917 	andeq	r0, r0, r7, lsl r9
    4608:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    460c:	0000003d 	andeq	r0, r0, sp, lsr r0
    4610:	062f1710 			; <UNDEFINED> instruction: 0x062f1710
    4614:	6f040000 	svcvs	0x00040000
    4618:	08ac0802 	stmiaeq	ip!, {r1, fp}
    461c:	17140000 	ldrne	r0, [r4, -r0]
    4620:	0000092b 	andeq	r0, r0, fp, lsr #18
    4624:	07027204 	streq	r7, [r2, -r4, lsl #4]
    4628:	0000003d 	andeq	r0, r0, sp, lsr r0
    462c:	19b61730 	ldmibne	r6!, {r4, r5, r8, r9, sl, ip}
    4630:	73040000 	movwvc	r0, #16384	; 0x4000
    4634:	08c11602 	stmiaeq	r1, {r1, r9, sl, ip}^
    4638:	17340000 	ldrne	r0, [r4, -r0]!
    463c:	00000876 	andeq	r0, r0, r6, ror r8
    4640:	07027504 	streq	r7, [r2, -r4, lsl #10]
    4644:	0000003d 	andeq	r0, r0, sp, lsr r0
    4648:	09211738 	stmdbeq	r1!, {r3, r4, r5, r8, r9, sl, ip}
    464c:	77040000 	strvc	r0, [r4, -r0]
    4650:	08d20a02 	ldmeq	r2, {r1, r9, fp}^
    4654:	173c0000 	ldrne	r0, [ip, -r0]!
    4658:	00000805 	andeq	r0, r0, r5, lsl #16
    465c:	13027a04 	movwne	r7, #10756	; 0x2a04
    4660:	0000018f 	andeq	r0, r0, pc, lsl #3
    4664:	07b01740 	ldreq	r1, [r0, r0, asr #14]!
    4668:	7b040000 	blvc	104670 <__bss_end+0xeeb20>
    466c:	003d0702 	eorseq	r0, sp, r2, lsl #14
    4670:	17440000 	strbne	r0, [r4, -r0]
    4674:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    4678:	13027c04 	movwne	r7, #11268	; 0x2c04
    467c:	0000018f 	andeq	r0, r0, pc, lsl #3
    4680:	08881748 	stmeq	r8, {r3, r6, r8, r9, sl, ip}
    4684:	7d040000 	stcvc	0, cr0, [r4, #-0]
    4688:	08d81402 	ldmeq	r8, {r1, sl, ip}^
    468c:	174c0000 	strbne	r0, [ip, -r0]
    4690:	000007ce 	andeq	r0, r0, lr, asr #15
    4694:	07028004 	streq	r8, [r2, -r4]
    4698:	0000003d 	andeq	r0, r0, sp, lsr r0
    469c:	071c1750 			; <UNDEFINED> instruction: 0x071c1750
    46a0:	81040000 	mrshi	r0, (UNDEF: 4)
    46a4:	05c00902 	strbeq	r0, [r0, #2306]	; 0x902
    46a8:	17540000 	ldrbne	r0, [r4, -r0]
    46ac:	000006f8 	strdeq	r0, [r0], -r8
    46b0:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    46b4:	00000887 	andeq	r0, r0, r7, lsl #17
    46b8:	08641858 	stmdaeq	r4!, {r3, r4, r6, fp, ip}^
    46bc:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    46c0:	02c01302 	sbceq	r1, r0, #134217728	; 0x8000000
    46c4:	01480000 	mrseq	r0, (UNDEF: 72)
    46c8:	0007e318 	andeq	lr, r7, r8, lsl r3
    46cc:	02a90400 	adceq	r0, r9, #0, 8
    46d0:	00027d12 	andeq	r7, r2, r2, lsl sp
    46d4:	18014c00 	stmdane	r1, {sl, fp, lr}
    46d8:	00000a5a 	andeq	r0, r0, sl, asr sl
    46dc:	0c02ad04 	stceq	13, cr10, [r2], {4}
    46e0:	000008e9 	andeq	r0, r0, r9, ror #17
    46e4:	f01802dc 			; <UNDEFINED> instruction: 0xf01802dc
    46e8:	04000006 	streq	r0, [r0], #-6
    46ec:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
    46f0:	e0000006 	and	r0, r0, r6
    46f4:	06d51802 	ldrbeq	r1, [r5], r2, lsl #16
    46f8:	b4040000 	strlt	r0, [r4], #-0
    46fc:	08f50a02 	ldmeq	r5!, {r1, r9, fp}^
    4700:	02ec0000 	rsceq	r0, ip, #0
    4704:	c6041000 	strgt	r1, [r4], -r0
    4708:	04000005 	streq	r0, [r0], #-5
    470c:	08ad0801 	stmiaeq	sp!, {r0, fp}
    4710:	c6030000 	strgt	r0, [r3], -r0
    4714:	10000005 	andne	r0, r0, r5
    4718:	00044e04 	andeq	r4, r4, r4, lsl #28
    471c:	003d1400 	eorseq	r1, sp, r0, lsl #8
    4720:	05f60000 	ldrbeq	r0, [r6, #0]!
    4724:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    4728:	15000004 	strne	r0, [r0, #-4]
    472c:	0000010f 	andeq	r0, r0, pc, lsl #2
    4730:	0005f615 	andeq	pc, r5, r5, lsl r6	; <UNPREDICTABLE>
    4734:	003d1500 	eorseq	r1, sp, r0, lsl #10
    4738:	10000000 	andne	r0, r0, r0
    473c:	0005cd04 	andeq	ip, r5, r4, lsl #26
    4740:	d8041000 	stmdale	r4, {ip}
    4744:	14000005 	strne	r0, [r0], #-5
    4748:	000000a1 	andeq	r0, r0, r1, lsr #1
    474c:	00000620 	andeq	r0, r0, r0, lsr #12
    4750:	00046c15 	andeq	r6, r4, r5, lsl ip
    4754:	010f1500 	tsteq	pc, r0, lsl #10
    4758:	a1150000 	tstge	r5, r0
    475c:	15000000 	strne	r0, [r0, #-0]
    4760:	0000003d 	andeq	r0, r0, sp, lsr r0
    4764:	02041000 	andeq	r1, r4, #0
    4768:	14000006 	strne	r0, [r0], #-6
    476c:	0000003d 	andeq	r0, r0, sp, lsr r0
    4770:	0000063a 	andeq	r0, r0, sl, lsr r6
    4774:	00046c15 	andeq	r6, r4, r5, lsl ip
    4778:	010f1500 	tsteq	pc, r0, lsl #10
    477c:	10000000 	andne	r0, r0, r0
    4780:	00062604 	andeq	r2, r6, r4, lsl #12
    4784:	00660900 	rsbeq	r0, r6, r0, lsl #18
    4788:	06500000 	ldrbeq	r0, [r0], -r0
    478c:	360a0000 	strcc	r0, [sl], -r0
    4790:	02000000 	andeq	r0, r0, #0
    4794:	00660900 	rsbeq	r0, r6, r0, lsl #18
    4798:	06600000 	strbteq	r0, [r0], -r0
    479c:	360a0000 	strcc	r0, [sl], -r0
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	08dc0600 	ldmeq	ip, {r9, sl}^
    47a8:	24040000 	strcs	r0, [r4], #-0
    47ac:	030b1a01 	movweq	r1, #47617	; 0xba01
    47b0:	41190000 	tstmi	r9, r0
    47b4:	0c00000a 	stceq	0, cr0, [r0], {10}
    47b8:	08012804 	stmdaeq	r1, {r2, fp, sp}
    47bc:	000006a6 	andeq	r0, r0, r6, lsr #13
    47c0:	00090417 	andeq	r0, r9, r7, lsl r4
    47c4:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    47c8:	0006a611 	andeq	sl, r6, r1, lsl r6
    47cc:	dc170000 	ldcle	0, cr0, [r7], {-0}
    47d0:	04000007 	streq	r0, [r0], #-7
    47d4:	3d07012b 	stfccs	f0, [r7, #-172]	; 0xffffff54
    47d8:	04000000 	streq	r0, [r0], #-0
    47dc:	0008d617 	andeq	sp, r8, r7, lsl r6
    47e0:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    47e4:	0006ac0b 	andeq	sl, r6, fp, lsl #24
    47e8:	10000800 	andne	r0, r0, r0, lsl #16
    47ec:	00066d04 	andeq	r6, r6, r4, lsl #26
    47f0:	60041000 	andvs	r1, r4, r0
    47f4:	19000006 	stmdbne	r0, {r1, r2}
    47f8:	00000627 	andeq	r0, r0, r7, lsr #12
    47fc:	0144040e 	cmpeq	r4, lr, lsl #8
    4800:	0006eb08 	andeq	lr, r6, r8, lsl #22
    4804:	09811700 	stmibeq	r1, {r8, r9, sl, ip}
    4808:	45040000 	strmi	r0, [r4, #-0]
    480c:	06eb1201 	strbteq	r1, [fp], r1, lsl #4
    4810:	17000000 	strne	r0, [r0, -r0]
    4814:	000009c1 	andeq	r0, r0, r1, asr #19
    4818:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    481c:	000006eb 	andeq	r0, r0, fp, ror #13
    4820:	09dd1706 	ldmibeq	sp, {r1, r2, r8, r9, sl, ip}^
    4824:	47040000 	strmi	r0, [r4, -r0]
    4828:	00741201 	rsbseq	r1, r4, r1, lsl #4
    482c:	000c0000 	andeq	r0, ip, r0
    4830:	00007409 	andeq	r7, r0, r9, lsl #8
    4834:	0006fb00 	andeq	pc, r6, r0, lsl #22
    4838:	00360a00 	eorseq	r0, r6, r0, lsl #20
    483c:	00020000 	andeq	r0, r2, r0
    4840:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    4844:	08100702 	ldmdaeq	r0, {r1, r8, r9, sl}
    4848:	15170000 	ldrne	r0, [r7, #-0]
    484c:	0400000a 	streq	r0, [r0], #-10
    4850:	36180287 	ldrcc	r0, [r8], -r7, lsl #5
    4854:	00000000 	andeq	r0, r0, r0
    4858:	0009c717 	andeq	ip, r9, r7, lsl r7
    485c:	02880400 	addeq	r0, r8, #0, 8
    4860:	0005c012 	andeq	ip, r5, r2, lsl r0
    4864:	f8170400 			; <UNDEFINED> instruction: 0xf8170400
    4868:	04000007 	streq	r0, [r0], #-7
    486c:	10100289 	andsne	r0, r0, r9, lsl #5
    4870:	08000008 	stmdaeq	r0, {r3}
    4874:	000a9617 	andeq	r9, sl, r7, lsl r6
    4878:	028a0400 	addeq	r0, sl, #0, 8
    487c:	0001a517 	andeq	sl, r1, r7, lsl r5
    4880:	9b172400 	blls	5cd888 <__bss_end+0x5b7d38>
    4884:	04000007 	streq	r0, [r0], #-7
    4888:	3d0f028b 	sfmcc	f0, 4, [pc, #-556]	; 4664 <_start-0x399c>
    488c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4890:	0008ff17 	andeq	pc, r8, r7, lsl pc	; <UNPREDICTABLE>
    4894:	028c0400 	addeq	r0, ip, #0, 8
    4898:	00008e2c 	andeq	r8, r0, ip, lsr #28
    489c:	ac175000 	ldcge	0, cr5, [r7], {-0}
    48a0:	0400000a 	streq	r0, [r0], #-10
    48a4:	b21a028d 	andslt	r0, sl, #-805306360	; 0xd0000008
    48a8:	58000006 	stmdapl	r0, {r1, r2}
    48ac:	00090a17 	andeq	r0, r9, r7, lsl sl
    48b0:	028e0400 	addeq	r0, lr, #0, 8
    48b4:	00010316 	andeq	r0, r1, r6, lsl r3
    48b8:	b1176800 	tstlt	r7, r0, lsl #16
    48bc:	0400000a 	streq	r0, [r0], #-10
    48c0:	0316028f 	tsteq	r6, #-268435448	; 0xf0000008
    48c4:	70000001 	andvc	r0, r0, r1
    48c8:	0006a817 	andeq	sl, r6, r7, lsl r8
    48cc:	02900400 	addseq	r0, r0, #0, 8
    48d0:	00010316 	andeq	r0, r1, r6, lsl r3
    48d4:	50177800 	andspl	r7, r7, r0, lsl #16
    48d8:	0400000a 	streq	r0, [r0], #-10
    48dc:	20100291 	mulscs	r0, r1, r2
    48e0:	80000008 	andhi	r0, r0, r8
    48e4:	0007ec17 	andeq	lr, r7, r7, lsl ip
    48e8:	02920400 	addseq	r0, r2, #0, 8
    48ec:	00083010 	andeq	r3, r8, r0, lsl r0
    48f0:	f5178800 			; <UNDEFINED> instruction: 0xf5178800
    48f4:	04000009 	streq	r0, [r0], #-9
    48f8:	3d0f0293 	sfmcc	f0, 4, [pc, #-588]	; 46b4 <_start-0x394c>
    48fc:	a0000000 	andge	r0, r0, r0
    4900:	00075317 	andeq	r5, r7, r7, lsl r3
    4904:	02940400 	addseq	r0, r4, #0, 8
    4908:	00010316 	andeq	r0, r1, r6, lsl r3
    490c:	9917a400 	ldmdbls	r7, {sl, sp, pc}
    4910:	04000006 	streq	r0, [r0], #-6
    4914:	03160295 	tsteq	r6, #1342177289	; 0x50000009
    4918:	ac000001 	stcge	0, cr0, [r0], {1}
    491c:	00074217 	andeq	r4, r7, r7, lsl r2
    4920:	02960400 	addseq	r0, r6, #0, 8
    4924:	00010316 	andeq	r0, r1, r6, lsl r3
    4928:	4017b400 	andsmi	fp, r7, r0, lsl #8
    492c:	04000006 	streq	r0, [r0], #-6
    4930:	03160297 	tsteq	r6, #1879048201	; 0x70000009
    4934:	bc000001 	stclt	0, cr0, [r0], {1}
    4938:	00064f17 	andeq	r4, r6, r7, lsl pc
    493c:	02980400 	addseq	r0, r8, #0, 8
    4940:	00010316 	andeq	r0, r1, r6, lsl r3
    4944:	b217c400 	andslt	ip, r7, #0, 8
    4948:	04000008 	streq	r0, [r0], #-8
    494c:	3d080299 	sfmcc	f0, 4, [r8, #-612]	; 0xfffffd9c
    4950:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4954:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    4958:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    495c:	360a0000 	strcc	r0, [sl], -r0
    4960:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4964:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    4968:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    496c:	360a0000 	strcc	r0, [sl], -r0
    4970:	07000000 	streq	r0, [r0, -r0]
    4974:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    4978:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
    497c:	360a0000 	strcc	r0, [sl], -r0
    4980:	17000000 	strne	r0, [r0, -r0]
    4984:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    4988:	6707029e 			; <UNDEFINED> instruction: 0x6707029e
    498c:	17000008 	strne	r0, [r0, -r8]
    4990:	00000854 	andeq	r0, r0, r4, asr r8
    4994:	1b02a104 	blne	acdac <__bss_end+0x9725c>
    4998:	00000867 	andeq	r0, r0, r7, ror #16
    499c:	0a471700 	beq	11ca5a4 <__bss_end+0x11b4a54>
    49a0:	a2040000 	andge	r0, r4, #0
    49a4:	08771802 	ldmdaeq	r7!, {r1, fp, ip}^
    49a8:	00780000 	rsbseq	r0, r8, r0
    49ac:	00030509 	andeq	r0, r3, r9, lsl #10
    49b0:	00087700 	andeq	r7, r8, r0, lsl #14
    49b4:	00360a00 	eorseq	r0, r6, r0, lsl #20
    49b8:	001d0000 	andseq	r0, sp, r0
    49bc:	00003609 	andeq	r3, r0, r9, lsl #12
    49c0:	00088700 	andeq	r8, r8, r0, lsl #14
    49c4:	00360a00 	eorseq	r0, r6, r0, lsl #20
    49c8:	001d0000 	andseq	r0, sp, r0
    49cc:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    49d0:	08ac0302 	stmiaeq	ip!, {r1, r8, r9}
    49d4:	761c0000 	ldrvc	r0, [ip], -r0
    49d8:	0400000a 	streq	r0, [r0], #-10
    49dc:	fb0b029a 	blx	2c544e <__bss_end+0x2af8fe>
    49e0:	1c000006 	stcne	0, cr0, [r0], {6}
    49e4:	00000a83 	andeq	r0, r0, r3, lsl #21
    49e8:	0b02a304 	bleq	ad600 <__bss_end+0x97ab0>
    49ec:	00000840 	andeq	r0, r0, r0, asr #16
    49f0:	05c60900 	strbeq	r0, [r6, #2304]	; 0x900
    49f4:	08bc0000 	ldmeq	ip!, {}	; <UNPREDICTABLE>
    49f8:	360a0000 	strcc	r0, [sl], -r0
    49fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4a00:	06801d00 	streq	r1, [r0], r0, lsl #26
    4a04:	04100000 	ldreq	r0, [r0], #-0
    4a08:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    4a0c:	0008d21e 	andeq	sp, r8, lr, lsl r2
    4a10:	046c1500 	strbteq	r1, [ip], #-1280	; 0xfffffb00
    4a14:	10000000 	andne	r0, r0, r0
    4a18:	0008c704 	andeq	ip, r8, r4, lsl #14
    4a1c:	8f041000 	svchi	0x00041000
    4a20:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    4a24:	000008e9 	andeq	r0, r0, r9, ror #17
    4a28:	00003d15 	andeq	r3, r0, r5, lsl sp
    4a2c:	04100000 	ldreq	r0, [r0], #-0
    4a30:	000008ef 	andeq	r0, r0, pc, ror #17
    4a34:	08de0410 	ldmeq	lr, {r4, sl}^
    4a38:	60090000 	andvs	r0, r9, r0
    4a3c:	05000006 	streq	r0, [r0, #-6]
    4a40:	0a000009 	beq	4a6c <_start-0x3594>
    4a44:	00000036 	andeq	r0, r0, r6, lsr r0
    4a48:	091f0002 	ldmdbeq	pc, {r1}	; <UNPREDICTABLE>
    4a4c:	0400000a 	streq	r0, [r0], #-10
    4a50:	6c170333 	ldcvs	3, cr0, [r7], {51}	; 0x33
    4a54:	1f000004 	svcne	0x00000004
    4a58:	00000a02 	andeq	r0, r0, r2, lsl #20
    4a5c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    4a60:	00000472 	andeq	r0, r0, r2, ror r4
    4a64:	00086c20 	andeq	r6, r8, r0, lsr #24
    4a68:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
    4a6c:	000005c0 	andeq	r0, r0, r0, asr #11
    4a70:	0017fd21 	andseq	pc, r7, r1, lsr #26
    4a74:	01100000 	tsteq	r0, r0
    4a78:	09520e5c 	ldmdbeq	r2, {r2, r3, r4, r6, r9, sl, fp}^
    4a7c:	34080000 	strcc	r0, [r8], #-0
    4a80:	01000018 	tsteq	r0, r8, lsl r0
    4a84:	0959175f 	ldmdbeq	r9, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip}^
    4a88:	8f080000 	svchi	0x00080000
    4a8c:	01000018 	tsteq	r0, r8, lsl r0
    4a90:	095e1063 	ldmdbeq	lr, {r0, r1, r5, r6, ip}^
    4a94:	04000000 	streq	r0, [r0], #-0
    4a98:	01a00408 	lsleq	r0, r8, #8
    4a9c:	52220000 	eorpl	r0, r2, #0
    4aa0:	09000009 	stmdbeq	r0, {r0, r3}
    4aa4:	00000066 	andeq	r0, r0, r6, rrx
    4aa8:	0000096f 	andeq	r0, r0, pc, ror #18
    4aac:	00003623 	andeq	r3, r0, r3, lsr #12
    4ab0:	000fff00 	andeq	pc, pc, r0, lsl #30
    4ab4:	00196b24 	andseq	r6, r9, r4, lsr #22
    4ab8:	03640100 	cmneq	r4, #0, 2
    4abc:	0000092b 	andeq	r0, r0, fp, lsr #18
    4ac0:	4b400305 	blmi	10056dc <__bss_end+0xfefb8c>
    4ac4:	bf0e0001 	svclt	0x000e0001
    4ac8:	08000018 	stmdaeq	r0, {r3, r4}
    4acc:	a9106801 	ldmdbge	r0, {r0, fp, sp, lr}
    4ad0:	0c000009 	stceq	0, cr0, [r0], {9}
    4ad4:	000017e5 	andeq	r1, r0, r5, ror #15
    4ad8:	a9176a01 	ldmdbge	r7, {r0, r9, fp, sp, lr}
    4adc:	00000009 	andeq	r0, r0, r9
    4ae0:	0017da0c 	andseq	sp, r7, ip, lsl #20
    4ae4:	096b0100 	stmdbeq	fp!, {r8}^
    4ae8:	00000025 	andeq	r0, r0, r5, lsr #32
    4aec:	04100004 	ldreq	r0, [r0], #-4
    4af0:	00000981 	andeq	r0, r0, r1, lsl #19
    4af4:	00194a02 	andseq	r4, r9, r2, lsl #20
    4af8:	036c0100 	cmneq	ip, #0, 2
    4afc:	00000981 	andeq	r0, r0, r1, lsl #19
    4b00:	00191224 	andseq	r1, r9, r4, lsr #4
    4b04:	1d820100 	stfnes	f0, [r2]
    4b08:	0000007b 	andeq	r0, r0, fp, ror r0
    4b0c:	47480305 	strbmi	r0, [r8, -r5, lsl #6]
    4b10:	c4240001 	strtgt	r0, [r4], #-1
    4b14:	01000017 	tsteq	r0, r7, lsl r0
    4b18:	00311585 	eorseq	r1, r1, r5, lsl #11
    4b1c:	03050000 	movweq	r0, #20480	; 0x5000
    4b20:	0001474c 	andeq	r4, r1, ip, asr #14
    4b24:	00180824 	andseq	r0, r8, r4, lsr #16
    4b28:	13880100 	orrne	r0, r8, #0, 2
    4b2c:	000009af 	andeq	r0, r0, pc, lsr #19
    4b30:	5b400305 	blpl	100574c <__bss_end+0xfefbfc>
    4b34:	55240001 	strpl	r0, [r4, #-1]!
    4b38:	01000019 	tsteq	r0, r9, lsl r0
    4b3c:	0a031c88 	beq	cbd64 <__bss_end+0xb6214>
    4b40:	03050000 	movweq	r0, #20480	; 0x5000
    4b44:	00015b48 	andeq	r5, r1, r8, asr #22
    4b48:	09af0410 	stmibeq	pc!, {r4, sl}	; <UNPREDICTABLE>
    4b4c:	2c240000 	stccs	0, cr0, [r4], #-0
    4b50:	01000019 	tsteq	r0, r9, lsl r0
    4b54:	00250f8c 	eoreq	r0, r5, ip, lsl #31
    4b58:	03050000 	movweq	r0, #20480	; 0x5000
    4b5c:	00014768 	andeq	r4, r1, r8, ror #14
    4b60:	00194025 	andseq	r4, r9, r5, lsr #32
    4b64:	08910100 	ldmeq	r1, {r8}
    4b68:	00000025 	andeq	r0, r0, r5, lsr #32
    4b6c:	5b4c0305 	blpl	1305788 <__bss_end+0x12efc38>
    4b70:	e1260001 			; <UNDEFINED> instruction: 0xe1260001
    4b74:	01000018 	tsteq	r0, r8, lsl r0
    4b78:	940d0134 	strls	r0, [sp], #-308	; 0xfffffecc
    4b7c:	54000141 	strpl	r0, [r0], #-321	; 0xfffffebf
    4b80:	01000001 	tsteq	r0, r1
    4b84:	000a759c 	muleq	sl, ip, r5
    4b88:	195b2700 	ldmdbne	fp, {r8, r9, sl, sp}^
    4b8c:	34010000 	strcc	r0, [r1], #-0
    4b90:	0a033501 	beq	d1f9c <__bss_end+0xbc44c>
    4b94:	91020000 	mrsls	r0, (UNDEF: 2)
    4b98:	09e2286c 	stmibeq	r2!, {r2, r3, r5, r6, fp, sp}^
    4b9c:	36010000 	strcc	r0, [r1], -r0
    4ba0:	0a030d01 	beq	c7fac <__bss_end+0xb245c>
    4ba4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ba8:	75702974 	ldrbvc	r2, [r0, #-2420]!	; 0xfffff68c
    4bac:	37010063 	strcc	r0, [r1, -r3, rrx]
    4bb0:	03051001 	movweq	r1, #20481	; 0x5001
    4bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    4bb8:	1c260070 	stcne	0, cr0, [r6], #-448	; 0xfffffe40
    4bbc:	01000018 	tsteq	r0, r8, lsl r0
    4bc0:	bc0d0113 	stflts	f0, [sp], {19}
    4bc4:	d8000140 	stmdale	r0, {r6, r8}
    4bc8:	01000000 	mrseq	r0, (UNDEF: 0)
    4bcc:	000aad9c 	muleq	sl, ip, sp
    4bd0:	18962800 	ldmne	r6, {fp, sp}
    4bd4:	15010000 	strne	r0, [r1, #-0]
    4bd8:	0a030d01 	beq	c7fe4 <__bss_end+0xb2494>
    4bdc:	91020000 	mrsls	r0, (UNDEF: 2)
    4be0:	183b2870 	ldmdane	fp!, {r4, r5, r6, fp, sp}
    4be4:	16010000 	strne	r0, [r1], -r0
    4be8:	03051001 	movweq	r1, #20481	; 0x5001
    4bec:	91020000 	mrsls	r0, (UNDEF: 2)
    4bf0:	fc2a0074 	stc2	0, cr0, [sl], #-464	; 0xfffffe30
    4bf4:	01000018 	tsteq	r0, r8, lsl r0
    4bf8:	a406010d 	strge	r0, [r6], #-269	; 0xfffffef3
    4bfc:	18000140 	stmdane	r0, {r6, r8}
    4c00:	01000000 	mrseq	r0, (UNDEF: 0)
    4c04:	18cc2b9c 	stmiane	ip, {r2, r3, r4, r7, r8, r9, fp, sp}^
    4c08:	07010000 	streq	r0, [r1, -r0]
    4c0c:	00250801 	eoreq	r0, r5, r1, lsl #16
    4c10:	40800000 	addmi	r0, r0, r0
    4c14:	00240001 	eoreq	r0, r4, r1
    4c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c1c:	0019222c 	andseq	r2, r9, ip, lsr #4
    4c20:	06ee0100 	strbteq	r0, [lr], r0, lsl #2
    4c24:	00014004 	andeq	r4, r1, r4
    4c28:	0000007c 	andeq	r0, r0, ip, ror r0
    4c2c:	0b1a9c01 	bleq	6abc38 <__bss_end+0x6960e8>
    4c30:	702d0000 	eorvc	r0, sp, r0
    4c34:	ee010076 	mcr	0, 0, r0, cr1, cr6, {3}
    4c38:	00010f17 	andeq	r0, r1, r7, lsl pc
    4c3c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4c40:	6375702e 	cmnvs	r5, #46	; 0x2e
    4c44:	10f00100 	rscsne	r0, r0, r0, lsl #2
    4c48:	00000305 	andeq	r0, r0, r5, lsl #6
    4c4c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    4c50:	000017d3 	ldrdeq	r1, [r0], -r3
    4c54:	030df101 	movweq	pc, #53505	; 0xd101	; <UNPREDICTABLE>
    4c58:	0200000a 	andeq	r0, r0, #10
    4c5c:	2f007091 	svccs	0x00007091
    4c60:	0000180f 	andeq	r1, r0, pc, lsl #16
    4c64:	0f079201 	svceq	0x00079201
    4c68:	3c000001 	stccc	0, cr0, [r0], {1}
    4c6c:	c800013e 	stmdagt	r0, {r1, r2, r3, r4, r5, r8}
    4c70:	01000001 	tsteq	r0, r1
    4c74:	1828309c 	stmdane	r8!, {r2, r3, r4, r7, ip, sp}
    4c78:	92010000 	andls	r0, r1, #0
    4c7c:	0000251c 	andeq	r2, r0, ip, lsl r5
    4c80:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4c84:	0017f524 	andseq	pc, r7, r4, lsr #10
    4c88:	0d940100 	ldfeqs	f0, [r4]
    4c8c:	00000a03 	andeq	r0, r0, r3, lsl #20
    4c90:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    4c94:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    4c98:	03179401 	tsteq	r7, #16777216	; 0x1000000
    4c9c:	0200000a 	andeq	r0, r0, #10
    4ca0:	a7247091 			; <UNDEFINED> instruction: 0xa7247091
    4ca4:	01000018 	tsteq	r0, r8, lsl r0
    4ca8:	0a032994 	beq	cf300 <__bss_end+0xb97b0>
    4cac:	91020000 	mrsls	r0, (UNDEF: 2)
    4cb0:	18b62468 	ldmne	r6!, {r3, r5, r6, sl, sp}
    4cb4:	95010000 	strls	r0, [r1, #-0]
    4cb8:	00010f07 	andeq	r0, r1, r7, lsl #30
    4cbc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4cc0:	00d70000 	sbcseq	r0, r7, r0
    4cc4:	00040000 	andeq	r0, r4, r0
    4cc8:	0000110f 	andeq	r1, r0, pc, lsl #2
    4ccc:	00780104 	rsbseq	r0, r8, r4, lsl #2
    4cd0:	7c0c0000 	stcvc	0, cr0, [ip], {-0}
    4cd4:	f8000019 			; <UNDEFINED> instruction: 0xf8000019
    4cd8:	00000000 	andeq	r0, r0, r0
    4cdc:	18000143 	stmdane	r0, {r0, r1, r6, r8}
    4ce0:	fc000001 	stc2	0, cr0, [r0], {1}
    4ce4:	0200001a 	andeq	r0, r0, #26
    4ce8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4cec:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    4cf0:	00066a07 	andeq	r6, r6, r7, lsl #20
    4cf4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    4cf8:	0000011f 	andeq	r0, r0, pc, lsl r1
    4cfc:	9b040803 	blls	106d10 <__bss_end+0xf11c0>
    4d00:	04000001 	streq	r0, [r0], #-1
    4d04:	07040304 	streq	r0, [r4, -r4, lsl #6]
    4d08:	00000665 	andeq	r0, r0, r5, ror #12
    4d0c:	24050403 	strcs	r0, [r5], #-1027	; 0xfffffbfd
    4d10:	03000001 	movweq	r0, #1
    4d14:	08a60601 	stmiaeq	r6!, {r0, r9, sl}
    4d18:	02030000 	andeq	r0, r3, #0
    4d1c:	00005907 	andeq	r5, r0, r7, lsl #18
    4d20:	08010300 	stmdaeq	r1, {r8, r9}
    4d24:	000008a4 	andeq	r0, r0, r4, lsr #17
    4d28:	00197705 	andseq	r7, r9, r5, lsl #14
    4d2c:	06660100 	strbteq	r0, [r6], -r0, lsl #2
    4d30:	00014380 	andeq	r4, r1, r0, lsl #7
    4d34:	00000098 	muleq	r0, r8, r0
    4d38:	71069c01 	tstvc	r6, r1, lsl #24
    4d3c:	01000019 	tsteq	r0, r9, lsl r0
    4d40:	433c0654 	teqmi	ip, #84, 12	; 0x5400000
    4d44:	00440001 	subeq	r0, r4, r1
    4d48:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d4c:	000000ab 	andeq	r0, r0, fp, lsr #1
    4d50:	00003007 	andeq	r3, r0, r7
    4d54:	12540100 	subsne	r0, r4, #0, 2
    4d58:	00000041 	andeq	r0, r0, r1, asr #32
    4d5c:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
    4d60:	56010069 	strpl	r0, [r1], -r9, rrx
    4d64:	00002506 	andeq	r2, r0, r6, lsl #10
    4d68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4d6c:	19a60900 	stmibne	r6!, {r8, fp}
    4d70:	4a010000 	bmi	44d78 <__bss_end+0x2f228>
    4d74:	01430006 	cmpeq	r3, r6
    4d78:	00003c00 	andeq	r3, r0, r0, lsl #24
    4d7c:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    4d80:	00000030 	andeq	r0, r0, r0, lsr r0
    4d84:	41124a01 	tstmi	r2, r1, lsl #20
    4d88:	02000000 	andeq	r0, r0, #0
    4d8c:	69086c91 	stmdbvs	r8, {r0, r4, r7, sl, fp, sp, lr}
    4d90:	064c0100 	strbeq	r0, [ip], -r0, lsl #2
    4d94:	00000025 	andeq	r0, r0, r5, lsr #32
    4d98:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4d9c:	000f3100 	andeq	r3, pc, r0, lsl #2
    4da0:	b2000400 	andlt	r0, r0, #0, 8
    4da4:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    4da8:	001c6501 	andseq	r6, ip, r1, lsl #10
    4dac:	1a750c00 	bne	1d47db4 <__bss_end+0x1d32264>
    4db0:	1bee0000 	blne	ffb84db8 <_estack+0xf7b74db8>
    4db4:	44180000 	ldrmi	r0, [r8], #-0
    4db8:	011c0001 	tsteq	ip, r1
    4dbc:	1bae0000 	blne	feb84dc4 <_estack+0xf6b74dc4>
    4dc0:	04020000 	streq	r0, [r2], #-0
    4dc4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4dc8:	0b2b0300 	bleq	ac59d0 <__bss_end+0xaafe80>
    4dcc:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    4dd0:	00003817 	andeq	r3, r0, r7, lsl r8
    4dd4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    4dd8:	0000066a 	andeq	r0, r0, sl, ror #12
    4ddc:	001b5a05 	andseq	r5, fp, r5, lsl #20
    4de0:	01480200 	mrseq	r0, (UNDEF: 104)
    4de4:	00003818 	andeq	r3, r0, r8, lsl r8
    4de8:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    4dec:	0000011f 	andeq	r0, r0, pc, lsl r1
    4df0:	9b040804 	blls	106e08 <__bss_end+0xf12b8>
    4df4:	05000001 	streq	r0, [r0, #-1]
    4df8:	00000813 	andeq	r0, r0, r3, lsl r8
    4dfc:	17016502 	strne	r6, [r1, -r2, lsl #10]
    4e00:	00000038 	andeq	r0, r0, r8, lsr r0
    4e04:	a6060104 	strge	r0, [r6], -r4, lsl #2
    4e08:	04000008 	streq	r0, [r0], #-8
    4e0c:	08a40801 	stmiaeq	r4!, {r0, fp}
    4e10:	02040000 	andeq	r0, r4, #0
    4e14:	0008bb05 	andeq	fp, r8, r5, lsl #22
    4e18:	07020400 	streq	r0, [r2, -r0, lsl #8]
    4e1c:	00000059 	andeq	r0, r0, r9, asr r0
    4e20:	24050404 	strcs	r0, [r5], #-1028	; 0xfffffbfc
    4e24:	06000001 	streq	r0, [r0], -r1
    4e28:	00000083 	andeq	r0, r0, r3, lsl #1
    4e2c:	65070404 	strvs	r0, [r7, #-1028]	; 0xfffffbfc
    4e30:	04000006 	streq	r0, [r0], #-6
    4e34:	06600708 	strbteq	r0, [r0], -r8, lsl #14
    4e38:	81030000 	mrshi	r0, (UNDEF: 3)
    4e3c:	03000008 	movweq	r0, #8
    4e40:	00830e2e 	addeq	r0, r3, lr, lsr #28
    4e44:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    4e48:	03000009 	movweq	r0, #9
    4e4c:	00830e74 	addeq	r0, r3, r4, ror lr
    4e50:	04070000 	streq	r0, [r7], #-0
    4e54:	d703a503 	strle	sl, [r3, -r3, lsl #10]
    4e58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4e5c:	0000080d 	andeq	r0, r0, sp, lsl #16
    4e60:	5a0ca703 	bpl	32ea74 <__bss_end+0x318f24>
    4e64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4e68:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    4e6c:	d713a803 	ldrle	sl, [r3, -r3, lsl #16]
    4e70:	00000000 	andeq	r0, r0, r0
    4e74:	00006e09 	andeq	r6, r0, r9, lsl #28
    4e78:	0000e700 	andeq	lr, r0, r0, lsl #14
    4e7c:	00380a00 	eorseq	r0, r8, r0, lsl #20
    4e80:	00030000 	andeq	r0, r3, r0
    4e84:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    4e88:	00010b09 	andeq	r0, r1, r9, lsl #22
    4e8c:	09870c00 	stmibeq	r7, {sl, fp}
    4e90:	a4030000 	strge	r0, [r3], #-0
    4e94:	00002507 	andeq	r2, r0, r7, lsl #10
    4e98:	8f0c0000 	svchi	0x000c0000
    4e9c:	03000009 	movweq	r0, #9
    4ea0:	00b505a9 	adcseq	r0, r5, r9, lsr #11
    4ea4:	00040000 	andeq	r0, r4, r0
    4ea8:	0008e303 	andeq	lr, r8, r3, lsl #6
    4eac:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    4eb0:	000000e7 	andeq	r0, r0, r7, ror #1
    4eb4:	170e040d 	strne	r0, [lr, -sp, lsl #8]
    4eb8:	03000001 	movweq	r0, #1
    4ebc:	000009ed 	andeq	r0, r0, sp, ror #19
    4ec0:	8f191604 	svchi	0x00191604
    4ec4:	03000000 	movweq	r0, #0
    4ec8:	00000892 	muleq	r0, r2, r8
    4ecc:	250d0c05 	strcs	r0, [sp, #-3077]	; 0xfffff3fb
    4ed0:	03000000 	movweq	r0, #0
    4ed4:	00000782 	andeq	r0, r0, r2, lsl #15
    4ed8:	2a1b2304 	bcs	6cdaf0 <__bss_end+0x6b7fa0>
    4edc:	0f000001 	svceq	0x00000001
    4ee0:	00000793 	muleq	r0, r3, r7
    4ee4:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
    4ee8:	0000019c 	muleq	r0, ip, r1
    4eec:	0009040c 	andeq	r0, r9, ip, lsl #8
    4ef0:	13360400 	teqne	r6, #0, 8
    4ef4:	0000019c 	muleq	r0, ip, r1
    4ef8:	6b5f1000 	blvs	17c8f00 <__bss_end+0x17b33b0>
    4efc:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
    4f00:	00000025 	andeq	r0, r0, r5, lsr #32
    4f04:	09440c04 	stmdbeq	r4, {r2, sl, fp}^
    4f08:	37040000 	strcc	r0, [r4, -r0]
    4f0c:	0000250b 	andeq	r2, r0, fp, lsl #10
    4f10:	490c0800 	stmdbmi	ip, {fp}
    4f14:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    4f18:	00251437 	eoreq	r1, r5, r7, lsr r4
    4f1c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    4f20:	00000a32 	andeq	r0, r0, r2, lsr sl
    4f24:	251b3704 	ldrcs	r3, [fp, #-1796]	; 0xfffff8fc
    4f28:	10000000 	andne	r0, r0, r0
    4f2c:	00785f10 	rsbseq	r5, r8, r0, lsl pc
    4f30:	a20b3804 	andge	r3, fp, #4, 16	; 0x40000
    4f34:	14000001 	strne	r0, [r0], #-1
    4f38:	42041100 	andmi	r1, r4, #0, 2
    4f3c:	09000001 	stmdbeq	r0, {r0}
    4f40:	0000011e 	andeq	r0, r0, lr, lsl r1
    4f44:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4f48:	0000380a 	andeq	r3, r0, sl, lsl #16
    4f4c:	0f000000 	svceq	0x00000000
    4f50:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    4f54:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
    4f58:	00000235 	andeq	r0, r0, r5, lsr r2
    4f5c:	0006b60c 	andeq	fp, r6, ip, lsl #12
    4f60:	093e0400 	ldmdbeq	lr!, {sl}
    4f64:	00000025 	andeq	r0, r0, r5, lsr #32
    4f68:	09b80c00 	ldmibeq	r8!, {sl, fp}
    4f6c:	3f040000 	svccc	0x00040000
    4f70:	00002509 	andeq	r2, r0, r9, lsl #10
    4f74:	cb0c0400 	blgt	305f7c <__bss_end+0x2f042c>
    4f78:	04000006 	streq	r0, [r0], #-6
    4f7c:	00250940 	eoreq	r0, r5, r0, asr #18
    4f80:	0c080000 	stceq	0, cr0, [r8], {-0}
    4f84:	00000ac4 	andeq	r0, r0, r4, asr #21
    4f88:	25094104 	strcs	r4, [r9, #-260]	; 0xfffffefc
    4f8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4f90:	00085b0c 	andeq	r5, r8, ip, lsl #22
    4f94:	09420400 	stmdbeq	r2, {sl}^
    4f98:	00000025 	andeq	r0, r0, r5, lsr #32
    4f9c:	083b0c10 	ldmdaeq	fp!, {r4, sl, fp}
    4fa0:	43040000 	movwmi	r0, #16384	; 0x4000
    4fa4:	00002509 	andeq	r2, r0, r9, lsl #10
    4fa8:	370c1400 	strcc	r1, [ip, -r0, lsl #8]
    4fac:	0400000a 	streq	r0, [r0], #-10
    4fb0:	00250944 	eoreq	r0, r5, r4, asr #18
    4fb4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    4fb8:	000008c5 	andeq	r0, r0, r5, asr #17
    4fbc:	25094504 	strcs	r4, [r9, #-1284]	; 0xfffffafc
    4fc0:	1c000000 	stcne	0, cr0, [r0], {-0}
    4fc4:	000a8b0c 	andeq	r8, sl, ip, lsl #22
    4fc8:	09460400 	stmdbeq	r6, {sl}^
    4fcc:	00000025 	andeq	r0, r0, r5, lsr #32
    4fd0:	da120020 	ble	485058 <__bss_end+0x46f508>
    4fd4:	08000006 	stmdaeq	r0, {r1, r2}
    4fd8:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
    4fdc:	0000027a 	andeq	r0, r0, sl, ror r2
    4fe0:	0007610c 	andeq	r6, r7, ip, lsl #2
    4fe4:	0a500400 	beq	1405fec <__bss_end+0x13f049c>
    4fe8:	0000027a 	andeq	r0, r0, sl, ror r2
    4fec:	06150c00 	ldreq	r0, [r5], -r0, lsl #24
    4ff0:	51040000 	mrspl	r0, (UNDEF: 4)
    4ff4:	00027a09 	andeq	r7, r2, r9, lsl #20
    4ff8:	d4138000 	ldrle	r8, [r3], #-0
    4ffc:	04000009 	streq	r0, [r0], #-9
    5000:	011e0a53 	tsteq	lr, r3, asr sl
    5004:	01000000 	mrseq	r0, (UNDEF: 0)
    5008:	00070413 	andeq	r0, r7, r3, lsl r4
    500c:	0a560400 	beq	1586014 <__bss_end+0x15704c4>
    5010:	0000011e 	andeq	r0, r0, lr, lsl r1
    5014:	09000104 	stmdbeq	r0, {r2, r8}
    5018:	00000117 	andeq	r0, r0, r7, lsl r1
    501c:	0000028a 	andeq	r0, r0, sl, lsl #5
    5020:	0000380a 	andeq	r3, r0, sl, lsl #16
    5024:	12001f00 	andne	r1, r0, #0, 30
    5028:	00000864 	andeq	r0, r0, r4, ror #16
    502c:	62040190 	andvs	r0, r4, #144, 2	; 0x24
    5030:	0002cd08 	andeq	ip, r2, r8, lsl #26
    5034:	09040c00 	stmdbeq	r4, {sl, fp}
    5038:	63040000 	movwvs	r0, #16384	; 0x4000
    503c:	0002cd12 	andeq	ip, r2, r2, lsl sp
    5040:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    5044:	04000009 	streq	r0, [r0], #-9
    5048:	00250664 	eoreq	r0, r5, r4, ror #12
    504c:	0c040000 	stceq	0, cr0, [r4], {-0}
    5050:	00000769 	andeq	r0, r0, r9, ror #14
    5054:	d3096604 	movwle	r6, #38404	; 0x9604
    5058:	08000002 	stmdaeq	r0, {r1}
    505c:	0006da0c 	andeq	sp, r6, ip, lsl #20
    5060:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
    5064:	00000235 	andeq	r0, r0, r5, lsr r2
    5068:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
    506c:	0000028a 	andeq	r0, r0, sl, lsl #5
    5070:	0002e309 	andeq	lr, r2, r9, lsl #6
    5074:	0002e300 	andeq	lr, r2, r0, lsl #6
    5078:	00380a00 	eorseq	r0, r8, r0, lsl #20
    507c:	001f0000 	andseq	r0, pc, r0
    5080:	02e90411 	rsceq	r0, r9, #285212672	; 0x11000000
    5084:	0f140000 	svceq	0x00140000
    5088:	000008cf 	andeq	r0, r0, pc, asr #17
    508c:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    5090:	00000312 	andeq	r0, r0, r2, lsl r3
    5094:	0006c50c 	andeq	ip, r6, ip, lsl #10
    5098:	117b0400 	cmnne	fp, r0, lsl #8
    509c:	00000312 	andeq	r0, r0, r2, lsl r3
    50a0:	06210c00 	strteq	r0, [r1], -r0, lsl #24
    50a4:	7c040000 	stcvc	0, cr0, [r4], {-0}
    50a8:	00002506 	andeq	r2, r0, r6, lsl #10
    50ac:	11000400 	tstne	r0, r0, lsl #8
    50b0:	00006e04 	andeq	r6, r0, r4, lsl #28
    50b4:	08ee0f00 	stmiaeq	lr!, {r8, r9, sl, fp}^
    50b8:	04680000 	strbteq	r0, [r8], #-0
    50bc:	045b08ba 	ldrbeq	r0, [fp], #-2234	; 0xfffff746
    50c0:	5f100000 	svcpl	0x00100000
    50c4:	bb040070 	bllt	10528c <__bss_end+0xef73c>
    50c8:	00031212 	andeq	r1, r3, r2, lsl r2
    50cc:	5f100000 	svcpl	0x00100000
    50d0:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    50d4:	00002507 	andeq	r2, r0, r7, lsl #10
    50d8:	5f100400 	svcpl	0x00100400
    50dc:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    50e0:	00002507 	andeq	r2, r0, r7, lsl #10
    50e4:	fd0c0800 	stc2	8, cr0, [ip, #-0]
    50e8:	04000006 	streq	r0, [r0], #-6
    50ec:	007509be 	ldrhteq	r0, [r5], #-158	; 0xffffff62
    50f0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    50f4:	000007d6 	ldrdeq	r0, [r0], -r6
    50f8:	7509bf04 	strvc	fp, [r9, #-3844]	; 0xfffff0fc
    50fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5100:	66625f10 	uqadd16vs	r5, r2, r0
    5104:	11c00400 	bicne	r0, r0, r0, lsl #8
    5108:	000002ea 	andeq	r0, r0, sl, ror #5
    510c:	06770c10 			; <UNDEFINED> instruction: 0x06770c10
    5110:	c1040000 	mrsgt	r0, (UNDEF: 4)
    5114:	00002507 	andeq	r2, r0, r7, lsl #10
    5118:	e80c1800 	stmda	ip, {fp, ip}
    511c:	04000006 	streq	r0, [r0], #-6
    5120:	01170ac8 	tsteq	r7, r8, asr #21
    5124:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    5128:	000007aa 	andeq	r0, r0, sl, lsr #15
    512c:	df1dca04 	svcle	0x001dca04
    5130:	20000005 	andcs	r0, r0, r5
    5134:	0008340c 	andeq	r3, r8, ip, lsl #8
    5138:	1dcc0400 	cfstrdne	mvd0, [ip]
    513c:	00000609 	andeq	r0, r0, r9, lsl #12
    5140:	09970c24 	ldmibeq	r7, {r2, r5, sl, fp}
    5144:	cf040000 	svcgt	0x00040000
    5148:	00062d0d 	andeq	r2, r6, sp, lsl #26
    514c:	a50c2800 	strge	r2, [ip, #-2048]	; 0xfffff800
    5150:	0400000a 	streq	r0, [r0], #-10
    5154:	064709d0 			; <UNDEFINED> instruction: 0x064709d0
    5158:	102c0000 	eorne	r0, ip, r0
    515c:	0062755f 	rsbeq	r7, r2, pc, asr r5
    5160:	ea11d304 	b	479d78 <__bss_end+0x464228>
    5164:	30000002 	andcc	r0, r0, r2
    5168:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    516c:	12d40400 	sbcsne	r0, r4, #0, 8
    5170:	00000312 	andeq	r0, r0, r2, lsl r3
    5174:	755f1038 	ldrbvc	r1, [pc, #-56]	; 5144 <_start-0x2ebc>
    5178:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    517c:	00002507 	andeq	r2, r0, r7, lsl #10
    5180:	bf0c3c00 	svclt	0x000c3c00
    5184:	04000006 	streq	r0, [r0], #-6
    5188:	064d11d8 			; <UNDEFINED> instruction: 0x064d11d8
    518c:	0c400000 	mareq	acc0, r0, r0
    5190:	00000a7d 	andeq	r0, r0, sp, ror sl
    5194:	5d11d904 	vldrpl.16	s26, [r1, #-8]	; <UNPREDICTABLE>
    5198:	43000006 	movwmi	r0, #6
    519c:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    51a0:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    51a4:	000002ea 	andeq	r0, r0, sl, ror #5
    51a8:	07130c44 	ldreq	r0, [r3, -r4, asr #24]
    51ac:	df040000 	svcle	0x00040000
    51b0:	00002507 	andeq	r2, r0, r7, lsl #10
    51b4:	240c4c00 	strcs	r4, [ip], #-3072	; 0xfffff400
    51b8:	04000007 	streq	r0, [r0], #-7
    51bc:	009d0ae0 	addseq	r0, sp, r0, ror #21
    51c0:	0c500000 	mraeq	r0, r0, acc0
    51c4:	0000063a 	andeq	r0, r0, sl, lsr r6
    51c8:	7912e304 	ldmdbvc	r2, {r2, r8, r9, sp, lr, pc}
    51cc:	54000004 	strpl	r0, [r0], #-4
    51d0:	00081a0c 	andeq	r1, r8, ip, lsl #20
    51d4:	0ce70400 	cfstrdeq	mvd0, [r7]
    51d8:	00000136 	andeq	r0, r0, r6, lsr r1
    51dc:	08f60c58 	ldmeq	r6!, {r3, r4, r6, sl, fp}^
    51e0:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    51e4:	00010b0e 	andeq	r0, r1, lr, lsl #22
    51e8:	2c0c5c00 	stccs	12, cr5, [ip], {-0}
    51ec:	04000008 	streq	r0, [r0], #-8
    51f0:	002509ea 	eoreq	r0, r5, sl, ror #19
    51f4:	00640000 	rsbeq	r0, r4, r0
    51f8:	00002515 	andeq	r2, r0, r5, lsl r5
    51fc:	00047900 	andeq	r7, r4, r0, lsl #18
    5200:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
    5204:	17160000 	ldrne	r0, [r6, -r0]
    5208:	16000001 	strne	r0, [r0], -r1
    520c:	000005cd 	andeq	r0, r0, sp, asr #11
    5210:	00002516 	andeq	r2, r0, r6, lsl r5
    5214:	04110000 	ldreq	r0, [r1], #-0
    5218:	00000484 	andeq	r0, r0, r4, lsl #9
    521c:	00047906 	andeq	r7, r4, r6, lsl #18
    5220:	0a761700 	beq	1d8ae28 <__bss_end+0x1d752d8>
    5224:	04280000 	strteq	r0, [r8], #-0
    5228:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
    522c:	000005cd 	andeq	r0, r0, sp, asr #11
    5230:	0008b418 	andeq	fp, r8, r8, lsl r4
    5234:	02670400 	rsbeq	r0, r7, #0, 8
    5238:	00002507 	andeq	r2, r0, r7, lsl #10
    523c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    5240:	04000007 	streq	r0, [r0], #-7
    5244:	b90b026c 	stmdblt	fp, {r2, r3, r5, r6, r9}
    5248:	04000006 	streq	r0, [r0], #-6
    524c:	0007c618 	andeq	ip, r7, r8, lsl r6
    5250:	026c0400 	rsbeq	r0, ip, #0, 8
    5254:	0006b914 	andeq	fp, r6, r4, lsl r9
    5258:	8b180800 	blhi	607260 <__bss_end+0x5f1710>
    525c:	04000007 	streq	r0, [r0], #-7
    5260:	b91e026c 	ldmdblt	lr, {r2, r3, r5, r6, r9}
    5264:	0c000006 	stceq	0, cr0, [r0], {6}
    5268:	00091718 	andeq	r1, r9, r8, lsl r7
    526c:	026e0400 	rsbeq	r0, lr, #0, 8
    5270:	00002508 	andeq	r2, r0, r8, lsl #10
    5274:	2f181000 	svccs	0x00181000
    5278:	04000006 	streq	r0, [r0], #-6
    527c:	b908026f 	stmdblt	r8, {r0, r1, r2, r3, r5, r6, r9}
    5280:	14000008 	strne	r0, [r0], #-8
    5284:	00092b18 	andeq	r2, r9, r8, lsl fp
    5288:	02720400 	rsbseq	r0, r2, #0, 8
    528c:	00002507 	andeq	r2, r0, r7, lsl #10
    5290:	b6183000 	ldrlt	r3, [r8], -r0
    5294:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    5298:	50160273 	andspl	r0, r6, r3, ror r2
    529c:	34000009 	strcc	r0, [r0], #-9
    52a0:	00087618 	andeq	r7, r8, r8, lsl r6
    52a4:	02750400 	rsbseq	r0, r5, #0, 8
    52a8:	00002507 	andeq	r2, r0, r7, lsl #10
    52ac:	21183800 	tstcs	r8, r0, lsl #16
    52b0:	04000009 	streq	r0, [r0], #-9
    52b4:	610a0277 	tstvs	sl, r7, ror r2
    52b8:	3c000009 	stccc	0, cr0, [r0], {9}
    52bc:	00080518 	andeq	r0, r8, r8, lsl r5
    52c0:	027a0400 	rsbseq	r0, sl, #0, 8
    52c4:	00019c13 	andeq	r9, r1, r3, lsl ip
    52c8:	b0184000 	andslt	r4, r8, r0
    52cc:	04000007 	streq	r0, [r0], #-7
    52d0:	2507027b 	strcs	r0, [r7, #-635]	; 0xfffffd85
    52d4:	44000000 	strmi	r0, [r0], #-0
    52d8:	000abf18 	andeq	fp, sl, r8, lsl pc
    52dc:	027c0400 	rsbseq	r0, ip, #0, 8
    52e0:	00019c13 	andeq	r9, r1, r3, lsl ip
    52e4:	88184800 	ldmdahi	r8, {fp, lr}
    52e8:	04000008 	streq	r0, [r0], #-8
    52ec:	6714027d 			; <UNDEFINED> instruction: 0x6714027d
    52f0:	4c000009 	stcmi	0, cr0, [r0], {9}
    52f4:	0007ce18 	andeq	ip, r7, r8, lsl lr
    52f8:	02800400 	addeq	r0, r0, #0, 8
    52fc:	00002507 	andeq	r2, r0, r7, lsl #10
    5300:	1c185000 	ldcne	0, cr5, [r8], {-0}
    5304:	04000007 	streq	r0, [r0], #-7
    5308:	cd090281 	sfmgt	f0, 4, [r9, #-516]	; 0xfffffdfc
    530c:	54000005 	strpl	r0, [r0], #-5
    5310:	0006f818 	andeq	pc, r6, r8, lsl r8	; <UNPREDICTABLE>
    5314:	02a40400 	adceq	r0, r4, #0, 8
    5318:	00089407 	andeq	r9, r8, r7, lsl #8
    531c:	64195800 	ldrvs	r5, [r9], #-2048	; 0xfffff800
    5320:	04000008 	streq	r0, [r0], #-8
    5324:	cd1302a8 	lfmgt	f0, 4, [r3, #-672]	; 0xfffffd60
    5328:	48000002 	stmdami	r0, {r1}
    532c:	07e31901 	strbeq	r1, [r3, r1, lsl #18]!
    5330:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    5334:	028a1202 	addeq	r1, sl, #536870912	; 0x20000000
    5338:	014c0000 	mrseq	r0, (UNDEF: 76)
    533c:	000a5a19 	andeq	r5, sl, r9, lsl sl
    5340:	02ad0400 	adceq	r0, sp, #0, 8
    5344:	0009780c 	andeq	r7, r9, ip, lsl #16
    5348:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    534c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5350:	1002b204 	andne	fp, r2, r4, lsl #4
    5354:	0000067a 	andeq	r0, r0, sl, ror r6
    5358:	d51902e0 	ldrle	r0, [r9, #-736]	; 0xfffffd20
    535c:	04000006 	streq	r0, [r0], #-6
    5360:	840a02b4 	strhi	r0, [sl], #-692	; 0xfffffd4c
    5364:	ec000009 	stc	0, cr0, [r0], {9}
    5368:	04110002 	ldreq	r0, [r1], #-2
    536c:	000005d3 	ldrdeq	r0, [r0], -r3
    5370:	ad080104 	stfges	f0, [r8, #-16]
    5374:	06000008 	streq	r0, [r0], -r8
    5378:	000005d3 	ldrdeq	r0, [r0], -r3
    537c:	045b0411 	ldrbeq	r0, [fp], #-1041	; 0xfffffbef
    5380:	25150000 	ldrcs	r0, [r5, #-0]
    5384:	03000000 	movweq	r0, #0
    5388:	16000006 	strne	r0, [r0], -r6
    538c:	00000479 	andeq	r0, r0, r9, ror r4
    5390:	00011716 	andeq	r1, r1, r6, lsl r7
    5394:	06031600 	streq	r1, [r3], -r0, lsl #12
    5398:	25160000 	ldrcs	r0, [r6, #-0]
    539c:	00000000 	andeq	r0, r0, r0
    53a0:	05da0411 	ldrbeq	r0, [sl, #1041]	; 0x411
    53a4:	04110000 	ldreq	r0, [r1], #-0
    53a8:	000005e5 	andeq	r0, r0, r5, ror #11
    53ac:	0000a915 	andeq	sl, r0, r5, lsl r9
    53b0:	00062d00 	andeq	r2, r6, r0, lsl #26
    53b4:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
    53b8:	17160000 	ldrne	r0, [r6, -r0]
    53bc:	16000001 	strne	r0, [r0], -r1
    53c0:	000000a9 	andeq	r0, r0, r9, lsr #1
    53c4:	00002516 	andeq	r2, r0, r6, lsl r5
    53c8:	04110000 	ldreq	r0, [r1], #-0
    53cc:	0000060f 	andeq	r0, r0, pc, lsl #12
    53d0:	00002515 	andeq	r2, r0, r5, lsl r5
    53d4:	00064700 	andeq	r4, r6, r0, lsl #14
    53d8:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
    53dc:	17160000 	ldrne	r0, [r6, -r0]
    53e0:	00000001 	andeq	r0, r0, r1
    53e4:	06330411 			; <UNDEFINED> instruction: 0x06330411
    53e8:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    53ec:	5d000000 	stcpl	0, cr0, [r0, #-0]
    53f0:	0a000006 	beq	5410 <_start-0x2bf0>
    53f4:	00000038 	andeq	r0, r0, r8, lsr r0
    53f8:	6e090002 	cdpvs	0, 0, cr0, cr9, cr2, {0}
    53fc:	6d000000 	stcvs	0, cr0, [r0, #-0]
    5400:	0a000006 	beq	5420 <_start-0x2be0>
    5404:	00000038 	andeq	r0, r0, r8, lsr r0
    5408:	dc050000 	stcle	0, cr0, [r5], {-0}
    540c:	04000008 	streq	r0, [r0], #-8
    5410:	181a0124 	ldmdane	sl, {r2, r5, r8}
    5414:	1a000003 	bne	5428 <_start-0x2bd8>
    5418:	00000a41 	andeq	r0, r0, r1, asr #20
    541c:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    5420:	0006b308 	andeq	fp, r6, r8, lsl #6
    5424:	09041800 	stmdbeq	r4, {fp, ip}
    5428:	2a040000 	bcs	105430 <__bss_end+0xef8e0>
    542c:	06b31101 	ldrteq	r1, [r3], r1, lsl #2
    5430:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5434:	000007dc 	ldrdeq	r0, [r0], -ip
    5438:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    543c:	00000025 	andeq	r0, r0, r5, lsr #32
    5440:	08d61804 	ldmeq	r6, {r2, fp, ip}^
    5444:	2c040000 	stccs	0, cr0, [r4], {-0}
    5448:	06b90b01 	ldrteq	r0, [r9], r1, lsl #22
    544c:	00080000 	andeq	r0, r8, r0
    5450:	067a0411 			; <UNDEFINED> instruction: 0x067a0411
    5454:	04110000 	ldreq	r0, [r1], #-0
    5458:	0000066d 	andeq	r0, r0, sp, ror #12
    545c:	0006271a 	andeq	r2, r6, sl, lsl r7
    5460:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    5464:	06f80801 	ldrbteq	r0, [r8], r1, lsl #16
    5468:	81180000 	tsthi	r8, r0
    546c:	04000009 	streq	r0, [r0], #-9
    5470:	f8120145 			; <UNDEFINED> instruction: 0xf8120145
    5474:	00000006 	andeq	r0, r0, r6
    5478:	0009c118 	andeq	ip, r9, r8, lsl r1
    547c:	01460400 	cmpeq	r6, r0, lsl #8
    5480:	0006f812 	andeq	pc, r6, r2, lsl r8	; <UNPREDICTABLE>
    5484:	dd180600 	ldcle	6, cr0, [r8, #-0]
    5488:	04000009 	streq	r0, [r0], #-9
    548c:	7c120147 	ldfvcs	f0, [r2], {71}	; 0x47
    5490:	0c000000 	stceq	0, cr0, [r0], {-0}
    5494:	007c0900 	rsbseq	r0, ip, r0, lsl #18
    5498:	07080000 	streq	r0, [r8, -r0]
    549c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    54a0:	02000000 	andeq	r0, r0, #0
    54a4:	04d01b00 	ldrbeq	r1, [r0], #2816	; 0xb00
    54a8:	1d070285 	sfmne	f0, 4, [r7, #-532]	; 0xfffffdec
    54ac:	18000008 	stmdane	r0, {r3}
    54b0:	00000a15 	andeq	r0, r0, r5, lsl sl
    54b4:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    54b8:	00000038 	andeq	r0, r0, r8, lsr r0
    54bc:	09c71800 	stmibeq	r7, {fp, ip}^
    54c0:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    54c4:	05cd1202 	strbeq	r1, [sp, #514]	; 0x202
    54c8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    54cc:	000007f8 	strdeq	r0, [r0], -r8
    54d0:	10028904 	andne	r8, r2, r4, lsl #18
    54d4:	0000081d 	andeq	r0, r0, sp, lsl r8
    54d8:	0a961808 	beq	fe58b500 <_estack+0xf657b500>
    54dc:	8a040000 	bhi	1054e4 <__bss_end+0xef994>
    54e0:	01b21702 			; <UNDEFINED> instruction: 0x01b21702
    54e4:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    54e8:	0000079b 	muleq	r0, fp, r7
    54ec:	0f028b04 	svceq	0x00028b04
    54f0:	00000025 	andeq	r0, r0, r5, lsr #32
    54f4:	08ff1848 	ldmeq	pc!, {r3, r6, fp, ip}^	; <UNPREDICTABLE>
    54f8:	8c040000 	stchi	0, cr0, [r4], {-0}
    54fc:	00962c02 	addseq	r2, r6, r2, lsl #24
    5500:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    5504:	00000aac 	andeq	r0, r0, ip, lsr #21
    5508:	1a028d04 	bne	a8920 <__bss_end+0x92dd0>
    550c:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
    5510:	090a1858 	stmdbeq	sl, {r3, r4, r6, fp, ip}
    5514:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    5518:	010b1602 	tsteq	fp, r2, lsl #12
    551c:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    5520:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    5524:	16028f04 	strne	r8, [r2], -r4, lsl #30
    5528:	0000010b 	andeq	r0, r0, fp, lsl #2
    552c:	06a81870 	sxtabeq	r1, r8, r0, ror #16
    5530:	90040000 	andls	r0, r4, r0
    5534:	010b1602 	tsteq	fp, r2, lsl #12
    5538:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    553c:	00000a50 	andeq	r0, r0, r0, asr sl
    5540:	10029104 	andne	r9, r2, r4, lsl #2
    5544:	0000082d 	andeq	r0, r0, sp, lsr #16
    5548:	07ec1880 	strbeq	r1, [ip, r0, lsl #17]!
    554c:	92040000 	andls	r0, r4, #0
    5550:	083d1002 	ldmdaeq	sp!, {r1, ip}
    5554:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    5558:	000009f5 	strdeq	r0, [r0], -r5
    555c:	0f029304 	svceq	0x00029304
    5560:	00000025 	andeq	r0, r0, r5, lsr #32
    5564:	075318a0 	ldrbeq	r1, [r3, -r0, lsr #17]
    5568:	94040000 	strls	r0, [r4], #-0
    556c:	010b1602 	tsteq	fp, r2, lsl #12
    5570:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    5574:	00000699 	muleq	r0, r9, r6
    5578:	16029504 	strne	r9, [r2], -r4, lsl #10
    557c:	0000010b 	andeq	r0, r0, fp, lsl #2
    5580:	074218ac 	strbeq	r1, [r2, -ip, lsr #17]
    5584:	96040000 	strls	r0, [r4], -r0
    5588:	010b1602 	tsteq	fp, r2, lsl #12
    558c:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    5590:	00000640 	andeq	r0, r0, r0, asr #12
    5594:	16029704 	strne	r9, [r2], -r4, lsl #14
    5598:	0000010b 	andeq	r0, r0, fp, lsl #2
    559c:	064f18bc 			; <UNDEFINED> instruction: 0x064f18bc
    55a0:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    55a4:	010b1602 	tsteq	fp, r2, lsl #12
    55a8:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    55ac:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    55b0:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    55b4:	00000025 	andeq	r0, r0, r5, lsr #32
    55b8:	d30900cc 	movwle	r0, #37068	; 0x90cc
    55bc:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    55c0:	0a000008 	beq	55e8 <_start-0x2a18>
    55c4:	00000038 	andeq	r0, r0, r8, lsr r0
    55c8:	d3090019 	movwle	r0, #36889	; 0x9019
    55cc:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    55d0:	0a000008 	beq	55f8 <_start-0x2a08>
    55d4:	00000038 	andeq	r0, r0, r8, lsr r0
    55d8:	d3090007 	movwle	r0, #36871	; 0x9007
    55dc:	4d000005 	stcmi	0, cr0, [r0, #-20]	; 0xffffffec
    55e0:	0a000008 	beq	5608 <_start-0x29f8>
    55e4:	00000038 	andeq	r0, r0, r8, lsr r0
    55e8:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    55ec:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    55f0:	00000874 	andeq	r0, r0, r4, ror r8
    55f4:	00085418 	andeq	r5, r8, r8, lsl r4
    55f8:	02a10400 	adceq	r0, r1, #0, 8
    55fc:	0008741b 	andeq	r7, r8, fp, lsl r4
    5600:	47180000 	ldrmi	r0, [r8, -r0]
    5604:	0400000a 	streq	r0, [r0], #-10
    5608:	841802a2 	ldrhi	r0, [r8], #-674	; 0xfffffd5e
    560c:	78000008 	stmdavc	r0, {r3}
    5610:	03120900 	tsteq	r2, #0, 18
    5614:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
    5618:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    561c:	1d000000 	stcne	0, cr0, [r0, #-0]
    5620:	00380900 	eorseq	r0, r8, r0, lsl #18
    5624:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
    5628:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    562c:	1d000000 	stcne	0, cr0, [r0, #-0]
    5630:	04f01c00 	ldrbteq	r1, [r0], #3072	; 0xc00
    5634:	b9030283 	stmdblt	r3, {r0, r1, r7, r9}
    5638:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    563c:	00000a76 	andeq	r0, r0, r6, ror sl
    5640:	0b029a04 	bleq	abe58 <__bss_end+0x96308>
    5644:	00000708 	andeq	r0, r0, r8, lsl #14
    5648:	000a831d 	andeq	r8, sl, sp, lsl r3
    564c:	02a30400 	adceq	r0, r3, #0, 8
    5650:	00084d0b 	andeq	r4, r8, fp, lsl #26
    5654:	d3090000 	movwle	r0, #36864	; 0x9000
    5658:	c9000005 	stmdbgt	r0, {r0, r2}
    565c:	0a000008 	beq	5684 <_start-0x297c>
    5660:	00000038 	andeq	r0, r0, r8, lsr r0
    5664:	80120018 	andshi	r0, r2, r8, lsl r0
    5668:	6c000006 	stcvs	0, cr0, [r0], {6}
    566c:	08b20601 	ldmeq	r2!, {r0, r9, sl}
    5670:	00000950 	andeq	r0, r0, r0, asr r9
    5674:	001d080c 	andseq	r0, sp, ip, lsl #16
    5678:	0bb40600 	bleq	fed06e80 <_estack+0xf6cf6e80>
    567c:	00000df8 	strdeq	r0, [r0], -r8
    5680:	1be70c00 	blne	ff9c8688 <_estack+0xf79b8688>
    5684:	b5060000 	strlt	r0, [r6, #-0]
    5688:	000e320b 	andeq	r3, lr, fp, lsl #4
    568c:	d10ce000 	mrsle	lr, (UNDEF: 12)
    5690:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    5694:	0e610bb7 	vmoveq.8	d17[5], r0
    5698:	0ce40000 	stcleq	0, cr0, [r4]
    569c:	00001a09 	andeq	r1, r0, r9, lsl #20
    56a0:	250ab906 	strcs	fp, [sl, #-2310]	; 0xfffff6fa
    56a4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    56a8:	0019ce0c 	andseq	ip, r9, ip, lsl #28
    56ac:	0bba0600 	bleq	fee86eb4 <_estack+0xf6e76eb4>
    56b0:	000005cd 	andeq	r0, r0, sp, asr #11
    56b4:	1a030cec 	bne	c8a6c <__bss_end+0xb2f1c>
    56b8:	bb060000 	bllt	1856c0 <__bss_end+0x16fb70>
    56bc:	0009d212 	andeq	sp, r9, r2, lsl r2
    56c0:	4f13f000 	svcmi	0x0013f000
    56c4:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    56c8:	0e670bbd 	vmoveq.8	d23[5], r0
    56cc:	01280000 			; <UNDEFINED> instruction: 0x01280000
    56d0:	001b7013 	andseq	r7, fp, r3, lsl r0
    56d4:	0bbe0600 	bleq	fef86edc <_estack+0xf6f76edc>
    56d8:	00000e77 	andeq	r0, r0, r7, ror lr
    56dc:	c113012a 	tstgt	r3, sl, lsr #2
    56e0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    56e4:	0e770bbf 	vmoveq.s8	r0, d23[5]
    56e8:	014a0000 	mrseq	r0, (UNDEF: 74)
    56ec:	c9041100 	stmdbgt	r4, {r8, ip}
    56f0:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    56f4:	00000961 	andeq	r0, r0, r1, ror #18
    56f8:	00047916 	andeq	r7, r4, r6, lsl r9
    56fc:	04110000 	ldreq	r0, [r1], #-0
    5700:	00000956 	andeq	r0, r0, r6, asr r9
    5704:	019c0411 	orrseq	r0, ip, r1, lsl r4
    5708:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    570c:	16000009 	strne	r0, [r0], -r9
    5710:	00000025 	andeq	r0, r0, r5, lsr #32
    5714:	7e041100 	adfvcs	f1, f4, f0
    5718:	11000009 	tstne	r0, r9
    571c:	00096d04 	andeq	r6, r9, r4, lsl #26
    5720:	066d0900 	strbteq	r0, [sp], -r0, lsl #18
    5724:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    5728:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    572c:	02000000 	andeq	r0, r0, #0
    5730:	0a091f00 	beq	24d338 <__bss_end+0x2377e8>
    5734:	33040000 	movwcc	r0, #16384	; 0x4000
    5738:	04791703 	ldrbteq	r1, [r9], #-1795	; 0xfffff8fd
    573c:	021f0000 	andseq	r0, pc, #0
    5740:	0400000a 	streq	r0, [r0], #-10
    5744:	7f1d0334 	svcvc	0x001d0334
    5748:	11000004 	tstne	r0, r4
    574c:	0009b904 	andeq	fp, r9, r4, lsl #18
    5750:	09ae0e00 	stmibeq	lr!, {r9, sl, fp}
    5754:	21200000 			; <UNDEFINED> instruction: 0x21200000
    5758:	0000086c 	andeq	r0, r0, ip, ror #16
    575c:	cd0e6707 	stcgt	7, cr6, [lr, #-28]	; 0xffffffe4
    5760:	03000005 	movweq	r0, #5
    5764:	000008e4 	andeq	r0, r0, r4, ror #17
    5768:	0b145608 	bleq	51af90 <__bss_end+0x505440>
    576c:	0f000001 	svceq	0x00000001
    5770:	00001a03 	andeq	r1, r0, r3, lsl #20
    5774:	082a0938 	stmdaeq	sl!, {r3, r4, r5, r8, fp}
    5778:	00000b18 	andeq	r0, r0, r8, lsl fp
    577c:	001b240c 	andseq	r2, fp, ip, lsl #8
    5780:	092c0900 	stmdbeq	ip!, {r8, fp}
    5784:	000005cd 	andeq	r0, r0, sp, asr #11
    5788:	1c400c00 	mcrrne	12, 0, r0, r0, cr0
    578c:	2d090000 	stccs	0, cr0, [r9, #-0]
    5790:	0005cd09 	andeq	ip, r5, r9, lsl #26
    5794:	ff0c0400 			; <UNDEFINED> instruction: 0xff0c0400
    5798:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    579c:	05cd092e 	strbeq	r0, [sp, #2350]	; 0x92e
    57a0:	0c080000 	stceq	0, cr0, [r8], {-0}
    57a4:	00001a2e 	andeq	r1, r0, lr, lsr #20
    57a8:	cd092f09 	stcgt	15, cr2, [r9, #-36]	; 0xffffffdc
    57ac:	0c000005 	stceq	0, cr0, [r0], {5}
    57b0:	0019be0c 	andseq	fp, r9, ip, lsl #28
    57b4:	09300900 	ldmdbeq	r0!, {r8, fp}
    57b8:	000005cd 	andeq	r0, r0, sp, asr #11
    57bc:	1b200c10 	blne	808804 <__bss_end+0x7f2cb4>
    57c0:	31090000 	mrscc	r0, (UNDEF: 9)
    57c4:	0005cd09 	andeq	ip, r5, r9, lsl #26
    57c8:	3c0c1400 	cfstrscc	mvf1, [ip], {-0}
    57cc:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    57d0:	05cd0932 	strbeq	r0, [sp, #2354]	; 0x932
    57d4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    57d8:	00001afb 	strdeq	r1, [r0], -fp
    57dc:	cd093309 	stcgt	3, cr3, [r9, #-36]	; 0xffffffdc
    57e0:	1c000005 	stcne	0, cr0, [r0], {5}
    57e4:	001b620c 	andseq	r6, fp, ip, lsl #4
    57e8:	09340900 	ldmdbeq	r4!, {r8, fp}
    57ec:	000005cd 	andeq	r0, r0, sp, asr #11
    57f0:	1b410c20 	blne	1048878 <__bss_end+0x1032d28>
    57f4:	35090000 	strcc	r0, [r9, #-0]
    57f8:	0005cd09 	andeq	ip, r5, r9, lsl #26
    57fc:	340c2400 	strcc	r2, [ip], #-1024	; 0xfffffc00
    5800:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    5804:	05d30836 	ldrbeq	r0, [r3, #2102]	; 0x836
    5808:	0c280000 	stceq	0, cr0, [r8], #-0
    580c:	00001d38 	andeq	r1, r0, r8, lsr sp
    5810:	d3083709 	movwle	r3, #34569	; 0x8709
    5814:	29000005 	stmdbcs	r0, {r0, r2}
    5818:	001b120c 	andseq	r1, fp, ip, lsl #4
    581c:	08380900 	ldmdaeq	r8!, {r8, fp}
    5820:	000005d3 	ldrdeq	r0, [r0], -r3
    5824:	1b8f0c2a 	blne	fe3c88d4 <_estack+0xf63b88d4>
    5828:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
    582c:	0005d308 	andeq	sp, r5, r8, lsl #6
    5830:	a20c2b00 	andge	r2, ip, #0, 22
    5834:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    5838:	05d3083a 	ldrbeq	r0, [r3, #2106]	; 0x83a
    583c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    5840:	000019f4 	strdeq	r1, [r0], -r4
    5844:	d3083b09 	movwle	r3, #35593	; 0x8b09
    5848:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    584c:	001aef0c 	andseq	lr, sl, ip, lsl #30
    5850:	083c0900 	ldmdaeq	ip!, {r8, fp}
    5854:	000005d3 	ldrdeq	r0, [r0], -r3
    5858:	1d170c2e 	ldcne	12, cr0, [r7, #-184]	; 0xffffff48
    585c:	3d090000 	stccc	0, cr0, [r9, #-0]
    5860:	0005d308 	andeq	sp, r5, r8, lsl #6
    5864:	9e0c2f00 	cdpls	15, 0, cr2, cr12, cr0, {0}
    5868:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    586c:	05d3083e 	ldrbeq	r0, [r3, #2110]	; 0x83e
    5870:	0c300000 	ldceq	0, cr0, [r0], #-0
    5874:	000019f0 	strdeq	r1, [r0], -r0
    5878:	d3083f09 	movwle	r3, #36617	; 0x8f09
    587c:	31000005 	tstcc	r0, r5
    5880:	001d130c 	andseq	r1, sp, ip, lsl #6
    5884:	08400900 	stmdaeq	r0, {r8, fp}^
    5888:	000005d3 	ldrdeq	r0, [r0], -r3
    588c:	1b0e0c32 	blne	38895c <__bss_end+0x372e0c>
    5890:	41090000 	mrsmi	r0, (UNDEF: 9)
    5894:	0005d308 	andeq	sp, r5, r8, lsl #6
    5898:	8b0c3300 	blhi	3124a0 <__bss_end+0x2fc950>
    589c:	0900001b 	stmdbeq	r0, {r0, r1, r3, r4}
    58a0:	05d30842 	ldrbeq	r0, [r3, #2114]	; 0x842
    58a4:	0c340000 	ldceq	0, cr0, [r4], #-0
    58a8:	00001aeb 	andeq	r1, r0, fp, ror #21
    58ac:	d3084309 	movwle	r4, #33545	; 0x8309
    58b0:	35000005 	strcc	r0, [r0, #-5]
    58b4:	1bd20f00 	blne	ff4894bc <_estack+0xf74794bc>
    58b8:	06080000 	streq	r0, [r8], -r0
    58bc:	0b400839 	bleq	10079a8 <__bss_end+0xff1e58>
    58c0:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
    58c4:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    58c8:	06030f3b 			; <UNDEFINED> instruction: 0x06030f3b
    58cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    58d0:	00001b4f 	andeq	r1, r0, pc, asr #22
    58d4:	030f3c06 	movweq	r3, #64518	; 0xfc06
    58d8:	04000006 	streq	r0, [r0], #-6
    58dc:	0b180600 	bleq	6070e4 <__bss_end+0x5f1594>
    58e0:	53210000 			; <UNDEFINED> instruction: 0x53210000
    58e4:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    58e8:	0b402042 	bleq	100d9f8 <__bss_end+0xff7ea8>
    58ec:	b30f0000 	movwlt	r0, #61440	; 0xf000
    58f0:	3c00001a 	stccc	0, cr0, [r0], {26}
    58f4:	22084406 	andcs	r4, r8, #100663296	; 0x6000000
    58f8:	0c00000c 	stceq	0, cr0, [r0], {12}
    58fc:	00001a2e 	andeq	r1, r0, lr, lsr #20
    5900:	030f4606 	movweq	r4, #62982	; 0xf606
    5904:	00000006 	andeq	r0, r0, r6
    5908:	0019be0c 	andseq	fp, r9, ip, lsl #28
    590c:	0f470600 	svceq	0x00470600
    5910:	00000603 	andeq	r0, r0, r3, lsl #12
    5914:	1b200c04 	blne	80892c <__bss_end+0x7f2ddc>
    5918:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    591c:	0006030f 	andeq	r0, r6, pc, lsl #6
    5920:	3c0c0800 	stccc	8, cr0, [ip], {-0}
    5924:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    5928:	06030f49 	streq	r0, [r3], -r9, asr #30
    592c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    5930:	00001afb 	strdeq	r1, [r0], -fp
    5934:	030f4a06 	movweq	r4, #64006	; 0xfa06
    5938:	10000006 	andne	r0, r0, r6
    593c:	001b620c 	andseq	r6, fp, ip, lsl #4
    5940:	0f4b0600 	svceq	0x004b0600
    5944:	00000603 	andeq	r0, r0, r3, lsl #12
    5948:	1b410c14 	blne	10489a0 <__bss_end+0x1032e50>
    594c:	4c060000 	stcmi	0, cr0, [r6], {-0}
    5950:	0006030f 	andeq	r0, r6, pc, lsl #6
    5954:	340c1800 	strcc	r1, [ip], #-2048	; 0xfffff800
    5958:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    595c:	06030f4d 	streq	r0, [r3], -sp, asr #30
    5960:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    5964:	00001d38 	andeq	r1, r0, r8, lsr sp
    5968:	030f4e06 	movweq	r4, #65030	; 0xfe06
    596c:	20000006 	andcs	r0, r0, r6
    5970:	001b120c 	andseq	r1, fp, ip, lsl #4
    5974:	0f4f0600 	svceq	0x004f0600
    5978:	00000603 	andeq	r0, r0, r3, lsl #12
    597c:	1b8f0c24 	blne	fe3c8a14 <_estack+0xf63b8a14>
    5980:	50060000 	andpl	r0, r6, r0
    5984:	0006030f 	andeq	r0, r6, pc, lsl #6
    5988:	a20c2800 	andge	r2, ip, #0, 16
    598c:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    5990:	06030f51 			; <UNDEFINED> instruction: 0x06030f51
    5994:	0c2c0000 	stceq	0, cr0, [ip], #-0
    5998:	000019f4 	strdeq	r1, [r0], -r4
    599c:	030f5206 	movweq	r5, #61958	; 0xf206
    59a0:	30000006 	andcc	r0, r0, r6
    59a4:	001aef0c 	andseq	lr, sl, ip, lsl #30
    59a8:	0f530600 	svceq	0x00530600
    59ac:	00000603 	andeq	r0, r0, r3, lsl #12
    59b0:	1d170c34 	ldcne	12, cr0, [r7, #-208]	; 0xffffff30
    59b4:	54060000 	strpl	r0, [r6], #-0
    59b8:	0006030f 	andeq	r0, r6, pc, lsl #6
    59bc:	06003800 	streq	r3, [r0], -r0, lsl #16
    59c0:	00000b51 	andeq	r0, r0, r1, asr fp
    59c4:	001cf521 	andseq	pc, ip, r1, lsr #10
    59c8:	23650600 	cmncs	r5, #0, 12
    59cc:	00000c22 	andeq	r0, r0, r2, lsr #24
    59d0:	001a120f 	andseq	r1, sl, pc, lsl #4
    59d4:	67060c00 	strvs	r0, [r6, -r0, lsl #24]
    59d8:	000c6808 	andeq	r6, ip, r8, lsl #16
    59dc:	1b240c00 	blne	9089e4 <__bss_end+0x8f2e94>
    59e0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    59e4:	0006030f 	andeq	r0, r6, pc, lsl #6
    59e8:	400c0000 	andmi	r0, ip, r0
    59ec:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    59f0:	06030f6a 	streq	r0, [r3], -sl, ror #30
    59f4:	0c040000 	stceq	0, cr0, [r4], {-0}
    59f8:	00001aff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    59fc:	030f6b06 	movweq	r6, #64262	; 0xfb06
    5a00:	08000006 	stmdaeq	r0, {r1, r2}
    5a04:	0c330600 	ldceq	6, cr0, [r3], #-0
    5a08:	ac210000 	stcge	0, cr0, [r1], #-0
    5a0c:	06000019 			; <UNDEFINED> instruction: 0x06000019
    5a10:	0c682272 	sfmeq	f2, 2, [r8], #-456	; 0xfffffe38
    5a14:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
    5a18:	fc00001a 	stc2	0, cr0, [r0], {26}
    5a1c:	64087406 	strvs	r7, [r8], #-1030	; 0xfffffbfa
    5a20:	1000000d 	andne	r0, r0, sp
    5a24:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    5a28:	690f7606 	stmdbvs	pc, {r1, r2, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
    5a2c:	0000000d 	andeq	r0, r0, sp
    5a30:	001d4d0c 	andseq	r4, sp, ip, lsl #26
    5a34:	0f770600 	svceq	0x00770600
    5a38:	00000d69 	andeq	r0, r0, r9, ror #26
    5a3c:	0a3c0c30 	beq	f08b04 <__bss_end+0xef2fb4>
    5a40:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    5a44:	000d790f 	andeq	r7, sp, pc, lsl #18
    5a48:	ed0c6000 	stc	0, cr6, [ip, #-0]
    5a4c:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    5a50:	0d790f79 	ldcleq	15, cr0, [r9, #-484]!	; 0xfffffe1c
    5a54:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
    5a58:	00001b08 	andeq	r1, r0, r8, lsl #22
    5a5c:	030f7a06 	movweq	r7, #64006	; 0xfa06
    5a60:	98000006 	stmdals	r0, {r1, r2}
    5a64:	001b850c 	andseq	r8, fp, ip, lsl #10
    5a68:	0f7b0600 	svceq	0x007b0600
    5a6c:	00000603 	andeq	r0, r0, r3, lsl #12
    5a70:	1b320c9c 	blne	c88ce8 <__bss_end+0xc73198>
    5a74:	7c060000 	stcvc	0, cr0, [r6], {-0}
    5a78:	0006030f 	andeq	r0, r6, pc, lsl #6
    5a7c:	630ca000 	movwvs	sl, #49152	; 0xc000
    5a80:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    5a84:	0d890f7d 	stceq	15, cr0, [r9, #500]	; 0x1f4
    5a88:	0ca40000 	stceq	0, cr0, [r4]
    5a8c:	00001b38 	andeq	r1, r0, r8, lsr fp
    5a90:	030f7e06 	movweq	r7, #65030	; 0xfe06
    5a94:	ac000006 	stcge	0, cr0, [r0], {6}
    5a98:	001d490c 	andseq	r4, sp, ip, lsl #18
    5a9c:	0f7f0600 	svceq	0x007f0600
    5aa0:	00000d69 	andeq	r0, r0, r9, ror #26
    5aa4:	1bb00cb0 	blne	fec08d6c <_estack+0xf6bf8d6c>
    5aa8:	80060000 	andhi	r0, r6, r0
    5aac:	0006030f 	andeq	r0, r6, pc, lsl #6
    5ab0:	4e0ce000 	cdpmi	0, 0, cr14, cr12, cr0, {0}
    5ab4:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    5ab8:	06030f81 	streq	r0, [r3], -r1, lsl #31
    5abc:	10e40000 	rscne	r0, r4, r0
    5ac0:	00617265 	rsbeq	r7, r1, r5, ror #4
    5ac4:	030f8206 	movweq	r8, #61958	; 0xf206
    5ac8:	e8000006 	stmda	r0, {r1, r2}
    5acc:	001bc80c 	andseq	ip, fp, ip, lsl #16
    5ad0:	0f830600 	svceq	0x00830600
    5ad4:	00000603 	andeq	r0, r0, r3, lsl #12
    5ad8:	1a690cec 	bne	1a48e90 <__bss_end+0x1a33340>
    5adc:	84060000 	strhi	r0, [r6], #-0
    5ae0:	0006030f 	andeq	r0, r6, pc, lsl #6
    5ae4:	dd0cf000 	stcle	0, cr15, [ip, #-0]
    5ae8:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    5aec:	06030f85 	streq	r0, [r3], -r5, lsl #31
    5af0:	0cf40000 	ldcleq	0, cr0, [r4]
    5af4:	00001a48 	andeq	r1, r0, r8, asr #20
    5af8:	030f8606 	movweq	r8, #62982	; 0xf606
    5afc:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
    5b00:	0c790600 	ldcleq	6, cr0, [r9], #-0
    5b04:	03090000 	movweq	r0, #36864	; 0x9000
    5b08:	79000006 	stmdbvc	r0, {r1, r2}
    5b0c:	0a00000d 	beq	5b48 <_start-0x24b8>
    5b10:	00000038 	andeq	r0, r0, r8, lsr r0
    5b14:	0309000b 	movweq	r0, #36875	; 0x900b
    5b18:	89000006 	stmdbhi	r0, {r1, r2}
    5b1c:	0a00000d 	beq	5b58 <_start-0x24a8>
    5b20:	00000038 	andeq	r0, r0, r8, lsr r0
    5b24:	03090006 	movweq	r0, #36870	; 0x9006
    5b28:	99000006 	stmdbls	r0, {r1, r2}
    5b2c:	0a00000d 	beq	5b68 <_start-0x2498>
    5b30:	00000038 	andeq	r0, r0, r8, lsr r0
    5b34:	1f210001 	svcne	0x00210001
    5b38:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    5b3c:	0d641f9a 	stcleq	15, cr1, [r4, #-616]!	; 0xfffffd98
    5b40:	570f0000 	strpl	r0, [pc, -r0]
    5b44:	1000001c 	andne	r0, r0, ip, lsl r0
    5b48:	e7089c06 	str	r9, [r8, -r6, lsl #24]
    5b4c:	0c00000d 	stceq	0, cr0, [r0], {13}
    5b50:	00001bc0 	andeq	r1, r0, r0, asr #23
    5b54:	030f9e06 	movweq	r9, #65030	; 0xfe06
    5b58:	00000006 	andeq	r0, r0, r6
    5b5c:	001b7e0c 	andseq	r7, fp, ip, lsl #28
    5b60:	0f9f0600 	svceq	0x009f0600
    5b64:	00000603 	andeq	r0, r0, r3, lsl #12
    5b68:	1bb90c04 	blne	fee48b80 <_estack+0xf6e38b80>
    5b6c:	a0060000 	andge	r0, r6, r0
    5b70:	0006030f 	andeq	r0, r6, pc, lsl #6
    5b74:	ad0c0800 	stcge	8, cr0, [ip, #-0]
    5b78:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    5b7c:	06030fa1 	streq	r0, [r3], -r1, lsr #31
    5b80:	000c0000 	andeq	r0, ip, r0
    5b84:	000da506 	andeq	sl, sp, r6, lsl #10
    5b88:	1ad82100 	bne	ff60df90 <_estack+0xf75fdf90>
    5b8c:	aa060000 	bge	185b94 <__bss_end+0x170044>
    5b90:	000de723 	andeq	lr, sp, r3, lsr #14
    5b94:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
    5b98:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    5b9c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    5ba0:	06000000 	streq	r0, [r0], -r0
    5ba4:	0000380a 	andeq	r3, r0, sl, lsl #16
    5ba8:	15001f00 	strne	r1, [r0, #-3840]	; 0xfffff100
    5bac:	00000025 	andeq	r0, r0, r5, lsr #32
    5bb0:	00000e2c 	andeq	r0, r0, ip, lsr #28
    5bb4:	00047916 	andeq	r7, r4, r6, lsl r9
    5bb8:	05cd1600 	strbeq	r1, [sp, #1536]	; 0x600
    5bbc:	3f160000 	svccc	0x00160000
    5bc0:	16000000 	strne	r0, [r0], -r0
    5bc4:	00000e2c 	andeq	r0, r0, ip, lsr #28
    5bc8:	c6041100 	strgt	r1, [r4], -r0, lsl #2
    5bcc:	11000009 	tstne	r0, r9
    5bd0:	000e0e04 	andeq	r0, lr, r4, lsl #28
    5bd4:	00251500 	eoreq	r1, r5, r0, lsl #10
    5bd8:	0e5b0000 	cdpeq	0, 5, cr0, cr11, cr0, {0}
    5bdc:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
    5be0:	16000004 	strne	r0, [r0], -r4
    5be4:	00000e5b 	andeq	r0, r0, fp, asr lr
    5be8:	00060316 	andeq	r0, r6, r6, lsl r3
    5bec:	002c1600 	eoreq	r1, ip, r0, lsl #12
    5bf0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    5bf4:	0000000e 	andeq	r0, r0, lr
    5bf8:	003f0411 	eorseq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
    5bfc:	04110000 	ldreq	r0, [r1], #-0
    5c00:	00000e38 	andeq	r0, r0, r8, lsr lr
    5c04:	0005d309 	andeq	sp, r5, r9, lsl #6
    5c08:	000e7700 	andeq	r7, lr, r0, lsl #14
    5c0c:	00380a00 	eorseq	r0, r8, r0, lsl #20
    5c10:	00010000 	andeq	r0, r1, r0
    5c14:	0005d309 	andeq	sp, r5, r9, lsl #6
    5c18:	000e8700 	andeq	r8, lr, r0, lsl #14
    5c1c:	00380a00 	eorseq	r0, r8, r0, lsl #20
    5c20:	001f0000 	andseq	r0, pc, r0
    5c24:	0019d822 	andseq	sp, r9, r2, lsr #16
    5c28:	091f0a00 	ldmdbeq	pc, {r9, fp}	; <UNPREDICTABLE>
    5c2c:	00000117 	andeq	r0, r0, r7, lsl r1
    5c30:	00014418 	andeq	r4, r1, r8, lsl r4
    5c34:	0000011c 	andeq	r0, r0, ip, lsl r1
    5c38:	0f289c01 	svceq	0x00289c01
    5c3c:	df230000 	svcle	0x00230000
    5c40:	01000019 	tsteq	r0, r9, lsl r0
    5c44:	01191a31 	tsteq	r9, r1, lsr sl
    5c48:	50010000 	andpl	r0, r1, r0
    5c4c:	001d4424 	andseq	r4, sp, r4, lsr #8
    5c50:	19320100 	ldmdbne	r2!, {r8}
    5c54:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    5c58:	0000000a 	andeq	r0, r0, sl
    5c5c:	00000000 	andeq	r0, r0, r0
    5c60:	001d2f24 	andseq	r2, sp, r4, lsr #30
    5c64:	09330100 	ldmdbeq	r3!, {r8}
    5c68:	0000002c 	andeq	r0, r0, ip, lsr #32
    5c6c:	00000059 	andeq	r0, r0, r9, asr r0
    5c70:	0000004f 	andeq	r0, r0, pc, asr #32
    5c74:	74736425 	ldrbtvc	r6, [r3], #-1061	; 0xfffffbdb
    5c78:	09420100 	stmdbeq	r2, {r8}^
    5c7c:	000005cd 	andeq	r0, r0, sp, asr #11
    5c80:	000000a4 	andeq	r0, r0, r4, lsr #1
    5c84:	0000009a 	muleq	r0, sl, r0
    5c88:	63727325 	cmnvs	r2, #-1811939328	; 0x94000000
    5c8c:	0f430100 	svceq	0x00430100
    5c90:	00000603 	andeq	r0, r0, r3, lsl #12
    5c94:	000000f1 	strdeq	r0, [r0], -r1
    5c98:	000000e3 	andeq	r0, r0, r3, ror #1
    5c9c:	0019e426 	andseq	lr, r9, r6, lsr #8
    5ca0:	09440100 	stmdbeq	r4, {r8}^
    5ca4:	00000f28 	andeq	r0, r0, r8, lsr #30
    5ca8:	0000014f 	andeq	r0, r0, pc, asr #2
    5cac:	0000014d 	andeq	r0, r0, sp, asr #2
    5cb0:	001d2326 	andseq	r2, sp, r6, lsr #6
    5cb4:	0f450100 	svceq	0x00450100
    5cb8:	00000f2e 	andeq	r0, r0, lr, lsr #30
    5cbc:	00000174 	andeq	r0, r0, r4, ror r1
    5cc0:	00000162 	andeq	r0, r0, r2, ror #2
    5cc4:	83041100 	movwhi	r1, #16640	; 0x4100
    5cc8:	11000000 	mrsne	r0, (UNDEF: 0)
    5ccc:	00008a04 	andeq	r8, r0, r4, lsl #20
    5cd0:	0f1d0000 	svceq	0x001d0000
    5cd4:	00040000 	andeq	r0, r4, r0
    5cd8:	000013d5 	ldrdeq	r1, [r0], -r5
    5cdc:	1c650104 	stfnee	f0, [r5], #-16
    5ce0:	530c0000 	movwpl	r0, #49152	; 0xc000
    5ce4:	8b00001d 	blhi	5d60 <_start-0x22a0>
    5ce8:	3400001d 	strcc	r0, [r0], #-29	; 0xffffffe3
    5cec:	18000145 	stmdane	r0, {r0, r2, r6, r8}
    5cf0:	11000001 	tstne	r0, r1
    5cf4:	0200001e 	andeq	r0, r0, #30
    5cf8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5cfc:	2b030074 	blcs	c5ed4 <__bss_end+0xb0384>
    5d00:	0200000b 	andeq	r0, r0, #11
    5d04:	003817d8 	ldrsbteq	r1, [r8], -r8
    5d08:	04040000 	streq	r0, [r4], #-0
    5d0c:	00066a07 	andeq	r6, r6, r7, lsl #20
    5d10:	1b5a0500 	blne	1687118 <__bss_end+0x16715c8>
    5d14:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
    5d18:	00381801 	eorseq	r1, r8, r1, lsl #16
    5d1c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5d20:	00011f05 	andeq	r1, r1, r5, lsl #30
    5d24:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    5d28:	0000019b 	muleq	r0, fp, r1
    5d2c:	00081305 	andeq	r1, r8, r5, lsl #6
    5d30:	01650200 	cmneq	r5, r0, lsl #4
    5d34:	00003817 	andeq	r3, r0, r7, lsl r8
    5d38:	06010400 	streq	r0, [r1], -r0, lsl #8
    5d3c:	000008a6 	andeq	r0, r0, r6, lsr #17
    5d40:	a4080104 	strge	r0, [r8], #-260	; 0xfffffefc
    5d44:	04000008 	streq	r0, [r0], #-8
    5d48:	08bb0502 	ldmeq	fp!, {r1, r8, sl}
    5d4c:	02040000 	andeq	r0, r4, #0
    5d50:	00005907 	andeq	r5, r0, r7, lsl #18
    5d54:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5d58:	00000124 	andeq	r0, r0, r4, lsr #2
    5d5c:	65070404 	strvs	r0, [r7, #-1028]	; 0xfffffbfc
    5d60:	04000006 	streq	r0, [r0], #-6
    5d64:	06600708 	strbteq	r0, [r0], -r8, lsl #14
    5d68:	81030000 	mrshi	r0, (UNDEF: 3)
    5d6c:	03000008 	movweq	r0, #8
    5d70:	00830e2e 	addeq	r0, r3, lr, lsr #28
    5d74:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    5d78:	03000009 	movweq	r0, #9
    5d7c:	00830e74 	addeq	r0, r3, r4, ror lr
    5d80:	04060000 	streq	r0, [r6], #-0
    5d84:	d203a503 	andle	sl, r3, #12582912	; 0xc00000
    5d88:	07000000 	streq	r0, [r0, -r0]
    5d8c:	0000080d 	andeq	r0, r0, sp, lsl #16
    5d90:	5a0ca703 	bpl	32f9a4 <__bss_end+0x319e54>
    5d94:	07000000 	streq	r0, [r0, -r0]
    5d98:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    5d9c:	d213a803 	andsle	sl, r3, #196608	; 0x30000
    5da0:	00000000 	andeq	r0, r0, r0
    5da4:	00006e08 	andeq	r6, r0, r8, lsl #28
    5da8:	0000e200 	andeq	lr, r0, r0, lsl #4
    5dac:	00380900 	eorseq	r0, r8, r0, lsl #18
    5db0:	00030000 	andeq	r0, r3, r0
    5db4:	a203080a 	andge	r0, r3, #655360	; 0xa0000
    5db8:	00010609 	andeq	r0, r1, r9, lsl #12
    5dbc:	09870b00 	stmibeq	r7, {r8, r9, fp}
    5dc0:	a4030000 	strge	r0, [r3], #-0
    5dc4:	00002507 	andeq	r2, r0, r7, lsl #10
    5dc8:	8f0b0000 	svchi	0x000b0000
    5dcc:	03000009 	movweq	r0, #9
    5dd0:	00b005a9 	adcseq	r0, r0, r9, lsr #11
    5dd4:	00040000 	andeq	r0, r4, r0
    5dd8:	0008e303 	andeq	lr, r8, r3, lsl #6
    5ddc:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    5de0:	000000e2 	andeq	r0, r0, r2, ror #1
    5de4:	ed03040c 	cfstrs	mvf0, [r3, #-48]	; 0xffffffd0
    5de8:	04000009 	streq	r0, [r0], #-9
    5dec:	008a1916 	addeq	r1, sl, r6, lsl r9
    5df0:	92030000 	andls	r0, r3, #0
    5df4:	05000008 	streq	r0, [r0, #-8]
    5df8:	00250d0c 	eoreq	r0, r5, ip, lsl #26
    5dfc:	82030000 	andhi	r0, r3, #0
    5e00:	04000007 	streq	r0, [r0], #-7
    5e04:	01201b23 			; <UNDEFINED> instruction: 0x01201b23
    5e08:	930d0000 	movwls	r0, #53248	; 0xd000
    5e0c:	18000007 	stmdane	r0, {r0, r1, r2}
    5e10:	92083404 	andls	r3, r8, #4, 8	; 0x4000000
    5e14:	0b000001 	bleq	5e20 <_start-0x21e0>
    5e18:	00000904 	andeq	r0, r0, r4, lsl #18
    5e1c:	92133604 	andsls	r3, r3, #4, 12	; 0x400000
    5e20:	00000001 	andeq	r0, r0, r1
    5e24:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
    5e28:	25073704 	strcs	r3, [r7, #-1796]	; 0xfffff8fc
    5e2c:	04000000 	streq	r0, [r0], #-0
    5e30:	0009440b 	andeq	r4, r9, fp, lsl #8
    5e34:	0b370400 	bleq	dc6e3c <__bss_end+0xdb12ec>
    5e38:	00000025 	andeq	r0, r0, r5, lsr #32
    5e3c:	1b490b08 	blne	1248a64 <__bss_end+0x1232f14>
    5e40:	37040000 	strcc	r0, [r4, -r0]
    5e44:	00002514 	andeq	r2, r0, r4, lsl r5
    5e48:	320b0c00 	andcc	r0, fp, #0, 24
    5e4c:	0400000a 	streq	r0, [r0], #-10
    5e50:	00251b37 	eoreq	r1, r5, r7, lsr fp
    5e54:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    5e58:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    5e5c:	01980b38 	orrseq	r0, r8, r8, lsr fp
    5e60:	00140000 	andseq	r0, r4, r0
    5e64:	0138040f 	teqeq	r8, pc, lsl #8
    5e68:	14080000 	strne	r0, [r8], #-0
    5e6c:	a8000001 	stmdage	r0, {r0}
    5e70:	09000001 	stmdbeq	r0, {r0}
    5e74:	00000038 	andeq	r0, r0, r8, lsr r0
    5e78:	ba0d0000 	blt	345e80 <__bss_end+0x330330>
    5e7c:	24000007 	strcs	r0, [r0], #-7
    5e80:	2b083c04 	blcs	214e98 <__bss_end+0x1ff348>
    5e84:	0b000002 	bleq	5e94 <_start-0x216c>
    5e88:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    5e8c:	25093e04 	strcs	r3, [r9, #-3588]	; 0xfffff1fc
    5e90:	00000000 	andeq	r0, r0, r0
    5e94:	0009b80b 	andeq	fp, r9, fp, lsl #16
    5e98:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    5e9c:	00000025 	andeq	r0, r0, r5, lsr #32
    5ea0:	06cb0b04 	strbeq	r0, [fp], r4, lsl #22
    5ea4:	40040000 	andmi	r0, r4, r0
    5ea8:	00002509 	andeq	r2, r0, r9, lsl #10
    5eac:	c40b0800 	strgt	r0, [fp], #-2048	; 0xfffff800
    5eb0:	0400000a 	streq	r0, [r0], #-10
    5eb4:	00250941 	eoreq	r0, r5, r1, asr #18
    5eb8:	0b0c0000 	bleq	305ec0 <__bss_end+0x2f0370>
    5ebc:	0000085b 	andeq	r0, r0, fp, asr r8
    5ec0:	25094204 	strcs	r4, [r9, #-516]	; 0xfffffdfc
    5ec4:	10000000 	andne	r0, r0, r0
    5ec8:	00083b0b 	andeq	r3, r8, fp, lsl #22
    5ecc:	09430400 	stmdbeq	r3, {sl}^
    5ed0:	00000025 	andeq	r0, r0, r5, lsr #32
    5ed4:	0a370b14 	beq	dc8b2c <__bss_end+0xdb2fdc>
    5ed8:	44040000 	strmi	r0, [r4], #-0
    5edc:	00002509 	andeq	r2, r0, r9, lsl #10
    5ee0:	c50b1800 	strgt	r1, [fp, #-2048]	; 0xfffff800
    5ee4:	04000008 	streq	r0, [r0], #-8
    5ee8:	00250945 	eoreq	r0, r5, r5, asr #18
    5eec:	0b1c0000 	bleq	705ef4 <__bss_end+0x6f03a4>
    5ef0:	00000a8b 	andeq	r0, r0, fp, lsl #21
    5ef4:	25094604 	strcs	r4, [r9, #-1540]	; 0xfffff9fc
    5ef8:	20000000 	andcs	r0, r0, r0
    5efc:	06da1000 	ldrbeq	r1, [sl], r0
    5f00:	01080000 	mrseq	r0, (UNDEF: 8)
    5f04:	70084f04 	andvc	r4, r8, r4, lsl #30
    5f08:	0b000002 	bleq	5f18 <_start-0x20e8>
    5f0c:	00000761 	andeq	r0, r0, r1, ror #14
    5f10:	700a5004 	andvc	r5, sl, r4
    5f14:	00000002 	andeq	r0, r0, r2
    5f18:	0006150b 	andeq	r1, r6, fp, lsl #10
    5f1c:	09510400 	ldmdbeq	r1, {sl}^
    5f20:	00000270 	andeq	r0, r0, r0, ror r2
    5f24:	09d41180 	ldmibeq	r4, {r7, r8, ip}^
    5f28:	53040000 	movwpl	r0, #16384	; 0x4000
    5f2c:	0001140a 	andeq	r1, r1, sl, lsl #8
    5f30:	11010000 	mrsne	r0, (UNDEF: 1)
    5f34:	00000704 	andeq	r0, r0, r4, lsl #14
    5f38:	140a5604 	strne	r5, [sl], #-1540	; 0xfffff9fc
    5f3c:	04000001 	streq	r0, [r0], #-1
    5f40:	12080001 	andne	r0, r8, #1
    5f44:	80000001 	andhi	r0, r0, r1
    5f48:	09000002 	stmdbeq	r0, {r1}
    5f4c:	00000038 	andeq	r0, r0, r8, lsr r0
    5f50:	6410001f 	ldrvs	r0, [r0], #-31	; 0xffffffe1
    5f54:	90000008 	andls	r0, r0, r8
    5f58:	08620401 	stmdaeq	r2!, {r0, sl}^
    5f5c:	000002c3 	andeq	r0, r0, r3, asr #5
    5f60:	0009040b 	andeq	r0, r9, fp, lsl #8
    5f64:	12630400 	rsbne	r0, r3, #0, 8
    5f68:	000002c3 	andeq	r0, r0, r3, asr #5
    5f6c:	091c0b00 	ldmdbeq	ip, {r8, r9, fp}
    5f70:	64040000 	strvs	r0, [r4], #-0
    5f74:	00002506 	andeq	r2, r0, r6, lsl #10
    5f78:	690b0400 	stmdbvs	fp, {sl}
    5f7c:	04000007 	streq	r0, [r0], #-7
    5f80:	02c90966 	sbceq	r0, r9, #1671168	; 0x198000
    5f84:	0b080000 	bleq	205f8c <__bss_end+0x1f043c>
    5f88:	000006da 	ldrdeq	r0, [r0], -sl
    5f8c:	2b1e6704 	blcs	79fba4 <__bss_end+0x78a054>
    5f90:	88000002 	stmdahi	r0, {r1}
    5f94:	80040f00 	andhi	r0, r4, r0, lsl #30
    5f98:	08000002 	stmdaeq	r0, {r1}
    5f9c:	000002d9 	ldrdeq	r0, [r0], -r9
    5fa0:	000002d9 	ldrdeq	r0, [r0], -r9
    5fa4:	00003809 	andeq	r3, r0, r9, lsl #16
    5fa8:	0f001f00 	svceq	0x00001f00
    5fac:	0002df04 	andeq	sp, r2, r4, lsl #30
    5fb0:	cf0d1200 	svcgt	0x000d1200
    5fb4:	08000008 	stmdaeq	r0, {r3}
    5fb8:	08087a04 	stmdaeq	r8, {r2, r9, fp, ip, sp, lr}
    5fbc:	0b000003 	bleq	5fd0 <_start-0x2030>
    5fc0:	000006c5 	andeq	r0, r0, r5, asr #13
    5fc4:	08117b04 	ldmdaeq	r1, {r2, r8, r9, fp, ip, sp, lr}
    5fc8:	00000003 	andeq	r0, r0, r3
    5fcc:	0006210b 	andeq	r2, r6, fp, lsl #2
    5fd0:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    5fd4:	00000025 	andeq	r0, r0, r5, lsr #32
    5fd8:	040f0004 	streq	r0, [pc], #-4	; 5fe0 <_start-0x2020>
    5fdc:	0000006e 	andeq	r0, r0, lr, rrx
    5fe0:	0008ee0d 	andeq	lr, r8, sp, lsl #28
    5fe4:	ba046800 	blt	11ffec <__bss_end+0x10a49c>
    5fe8:	00045108 	andeq	r5, r4, r8, lsl #2
    5fec:	705f0e00 	subsvc	r0, pc, r0, lsl #28
    5ff0:	12bb0400 	adcsne	r0, fp, #0, 8
    5ff4:	00000308 	andeq	r0, r0, r8, lsl #6
    5ff8:	725f0e00 	subsvc	r0, pc, #0, 28
    5ffc:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    6000:	00000025 	andeq	r0, r0, r5, lsr #32
    6004:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
    6008:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    600c:	00000025 	andeq	r0, r0, r5, lsr #32
    6010:	06fd0b08 	ldrbteq	r0, [sp], r8, lsl #22
    6014:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    6018:	00007509 	andeq	r7, r0, r9, lsl #10
    601c:	d60b0c00 	strle	r0, [fp], -r0, lsl #24
    6020:	04000007 	streq	r0, [r0], #-7
    6024:	007509bf 	ldrhteq	r0, [r5], #-159	; 0xffffff61
    6028:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    602c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    6030:	e011c004 	ands	ip, r1, r4
    6034:	10000002 	andne	r0, r0, r2
    6038:	0006770b 	andeq	r7, r6, fp, lsl #14
    603c:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    6040:	00000025 	andeq	r0, r0, r5, lsr #32
    6044:	06e80b18 	usateq	r0, #8, r8, lsl #22
    6048:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    604c:	0001120a 	andeq	r1, r1, sl, lsl #4
    6050:	aa0b1c00 	bge	2cd058 <__bss_end+0x2b7508>
    6054:	04000007 	streq	r0, [r0], #-7
    6058:	05d51dca 	ldrbeq	r1, [r5, #3530]	; 0xdca
    605c:	0b200000 	bleq	806064 <__bss_end+0x7f0514>
    6060:	00000834 	andeq	r0, r0, r4, lsr r8
    6064:	ff1dcc04 			; <UNDEFINED> instruction: 0xff1dcc04
    6068:	24000005 	strcs	r0, [r0], #-5
    606c:	0009970b 	andeq	r9, r9, fp, lsl #14
    6070:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 6078 <_start-0x1f88>
    6074:	00000623 	andeq	r0, r0, r3, lsr #12
    6078:	0aa50b28 	beq	fe948d20 <_estack+0xf6938d20>
    607c:	d0040000 	andle	r0, r4, r0
    6080:	00063d09 	andeq	r3, r6, r9, lsl #26
    6084:	5f0e2c00 	svcpl	0x000e2c00
    6088:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    608c:	02e011d3 	rsceq	r1, r0, #-1073741772	; 0xc0000034
    6090:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    6094:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6098:	0812d404 	ldmdaeq	r2, {r2, sl, ip, lr, pc}
    609c:	38000003 	stmdacc	r0, {r0, r1}
    60a0:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
    60a4:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    60a8:	00000025 	andeq	r0, r0, r5, lsr #32
    60ac:	06bf0b3c 			; <UNDEFINED> instruction: 0x06bf0b3c
    60b0:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    60b4:	00064311 	andeq	r4, r6, r1, lsl r3
    60b8:	7d0b4000 	stcvc	0, cr4, [fp, #-0]
    60bc:	0400000a 	streq	r0, [r0], #-10
    60c0:	065311d9 			; <UNDEFINED> instruction: 0x065311d9
    60c4:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
    60c8:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    60cc:	e011dc04 	ands	sp, r1, r4, lsl #24
    60d0:	44000002 	strmi	r0, [r0], #-2
    60d4:	0007130b 	andeq	r1, r7, fp, lsl #6
    60d8:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    60dc:	00000025 	andeq	r0, r0, r5, lsr #32
    60e0:	07240b4c 	streq	r0, [r4, -ip, asr #22]!
    60e4:	e0040000 	and	r0, r4, r0
    60e8:	0000980a 	andeq	r9, r0, sl, lsl #16
    60ec:	3a0b5000 	bcc	2da0f4 <__bss_end+0x2c45a4>
    60f0:	04000006 	streq	r0, [r0], #-6
    60f4:	046f12e3 	strbteq	r1, [pc], #-739	; 60fc <_start-0x1f04>
    60f8:	0b540000 	bleq	1506100 <__bss_end+0x14f05b0>
    60fc:	0000081a 	andeq	r0, r0, sl, lsl r8
    6100:	2c0ce704 	stccs	7, cr14, [ip], {4}
    6104:	58000001 	stmdapl	r0, {r0}
    6108:	0008f60b 	andeq	pc, r8, fp, lsl #12
    610c:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    6110:	00000106 	andeq	r0, r0, r6, lsl #2
    6114:	082c0b5c 	stmdaeq	ip!, {r2, r3, r4, r6, r8, r9, fp}
    6118:	ea040000 	b	106120 <__bss_end+0xf05d0>
    611c:	00002509 	andeq	r2, r0, r9, lsl #10
    6120:	13006400 	movwne	r6, #1024	; 0x400
    6124:	00000025 	andeq	r0, r0, r5, lsr #32
    6128:	0000046f 	andeq	r0, r0, pc, ror #8
    612c:	00046f14 	andeq	r6, r4, r4, lsl pc
    6130:	01121400 	tsteq	r2, r0, lsl #8
    6134:	c3140000 	tstgt	r4, #0
    6138:	14000005 	strne	r0, [r0], #-5
    613c:	00000025 	andeq	r0, r0, r5, lsr #32
    6140:	7a040f00 	bvc	109d48 <__bss_end+0xf41f8>
    6144:	15000004 	strne	r0, [r0, #-4]
    6148:	0000046f 	andeq	r0, r0, pc, ror #8
    614c:	000a7616 	andeq	r7, sl, r6, lsl r6
    6150:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    6154:	c3080265 	movwgt	r0, #33381	; 0x8265
    6158:	17000005 	strne	r0, [r0, -r5]
    615c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    6160:	07026704 	streq	r6, [r2, -r4, lsl #14]
    6164:	00000025 	andeq	r0, r0, r5, lsr #32
    6168:	070c1700 	streq	r1, [ip, -r0, lsl #14]
    616c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    6170:	06af0b02 	strteq	r0, [pc], r2, lsl #22
    6174:	17040000 	strne	r0, [r4, -r0]
    6178:	000007c6 	andeq	r0, r0, r6, asr #15
    617c:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    6180:	000006af 	andeq	r0, r0, pc, lsr #13
    6184:	078b1708 	streq	r1, [fp, r8, lsl #14]
    6188:	6c040000 	stcvs	0, cr0, [r4], {-0}
    618c:	06af1e02 	strteq	r1, [pc], r2, lsl #28
    6190:	170c0000 	strne	r0, [ip, -r0]
    6194:	00000917 	andeq	r0, r0, r7, lsl r9
    6198:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    619c:	00000025 	andeq	r0, r0, r5, lsr #32
    61a0:	062f1710 			; <UNDEFINED> instruction: 0x062f1710
    61a4:	6f040000 	svcvs	0x00040000
    61a8:	08af0802 	stmiaeq	pc!, {r1, fp}	; <UNPREDICTABLE>
    61ac:	17140000 	ldrne	r0, [r4, -r0]
    61b0:	0000092b 	andeq	r0, r0, fp, lsr #18
    61b4:	07027204 	streq	r7, [r2, -r4, lsl #4]
    61b8:	00000025 	andeq	r0, r0, r5, lsr #32
    61bc:	19b61730 	ldmibne	r6!, {r4, r5, r8, r9, sl, ip}
    61c0:	73040000 	movwvc	r0, #16384	; 0x4000
    61c4:	09461602 	stmdbeq	r6, {r1, r9, sl, ip}^
    61c8:	17340000 	ldrne	r0, [r4, -r0]!
    61cc:	00000876 	andeq	r0, r0, r6, ror r8
    61d0:	07027504 	streq	r7, [r2, -r4, lsl #10]
    61d4:	00000025 	andeq	r0, r0, r5, lsr #32
    61d8:	09211738 	stmdbeq	r1!, {r3, r4, r5, r8, r9, sl, ip}
    61dc:	77040000 	strvc	r0, [r4, -r0]
    61e0:	09570a02 	ldmdbeq	r7, {r1, r9, fp}^
    61e4:	173c0000 	ldrne	r0, [ip, -r0]!
    61e8:	00000805 	andeq	r0, r0, r5, lsl #16
    61ec:	13027a04 	movwne	r7, #10756	; 0x2a04
    61f0:	00000192 	muleq	r0, r2, r1
    61f4:	07b01740 	ldreq	r1, [r0, r0, asr #14]!
    61f8:	7b040000 	blvc	106200 <__bss_end+0xf06b0>
    61fc:	00250702 	eoreq	r0, r5, r2, lsl #14
    6200:	17440000 	strbne	r0, [r4, -r0]
    6204:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    6208:	13027c04 	movwne	r7, #11268	; 0x2c04
    620c:	00000192 	muleq	r0, r2, r1
    6210:	08881748 	stmeq	r8, {r3, r6, r8, r9, sl, ip}
    6214:	7d040000 	stcvc	0, cr0, [r4, #-0]
    6218:	095d1402 	ldmdbeq	sp, {r1, sl, ip}^
    621c:	174c0000 	strbne	r0, [ip, -r0]
    6220:	000007ce 	andeq	r0, r0, lr, asr #15
    6224:	07028004 	streq	r8, [r2, -r4]
    6228:	00000025 	andeq	r0, r0, r5, lsr #32
    622c:	071c1750 			; <UNDEFINED> instruction: 0x071c1750
    6230:	81040000 	mrshi	r0, (UNDEF: 4)
    6234:	05c30902 	strbeq	r0, [r3, #2306]	; 0x902
    6238:	17540000 	ldrbne	r0, [r4, -r0]
    623c:	000006f8 	strdeq	r0, [r0], -r8
    6240:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    6244:	0000088a 	andeq	r0, r0, sl, lsl #17
    6248:	08641858 	stmdaeq	r4!, {r3, r4, r6, fp, ip}^
    624c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    6250:	02c31302 	sbceq	r1, r3, #134217728	; 0x8000000
    6254:	01480000 	mrseq	r0, (UNDEF: 72)
    6258:	0007e318 	andeq	lr, r7, r8, lsl r3
    625c:	02a90400 	adceq	r0, r9, #0, 8
    6260:	00028012 	andeq	r8, r2, r2, lsl r0
    6264:	18014c00 	stmdane	r1, {sl, fp, lr}
    6268:	00000a5a 	andeq	r0, r0, sl, asr sl
    626c:	0c02ad04 	stceq	13, cr10, [r2], {4}
    6270:	0000096e 	andeq	r0, r0, lr, ror #18
    6274:	f01802dc 			; <UNDEFINED> instruction: 0xf01802dc
    6278:	04000006 	streq	r0, [r0], #-6
    627c:	701002b2 			; <UNDEFINED> instruction: 0x701002b2
    6280:	e0000006 	and	r0, r0, r6
    6284:	06d51802 	ldrbeq	r1, [r5], r2, lsl #16
    6288:	b4040000 	strlt	r0, [r4], #-0
    628c:	097a0a02 	ldmdbeq	sl!, {r1, r9, fp}^
    6290:	02ec0000 	rsceq	r0, ip, #0
    6294:	c9040f00 	stmdbgt	r4, {r8, r9, sl, fp}
    6298:	04000005 	streq	r0, [r0], #-5
    629c:	08ad0801 	stmiaeq	sp!, {r0, fp}
    62a0:	c9150000 	ldmdbgt	r5, {}	; <UNPREDICTABLE>
    62a4:	0f000005 	svceq	0x00000005
    62a8:	00045104 	andeq	r5, r4, r4, lsl #2
    62ac:	00251300 	eoreq	r1, r5, r0, lsl #6
    62b0:	05f90000 	ldrbeq	r0, [r9, #0]!
    62b4:	6f140000 	svcvs	0x00140000
    62b8:	14000004 	strne	r0, [r0], #-4
    62bc:	00000112 	andeq	r0, r0, r2, lsl r1
    62c0:	0005f914 	andeq	pc, r5, r4, lsl r9	; <UNPREDICTABLE>
    62c4:	00251400 	eoreq	r1, r5, r0, lsl #8
    62c8:	0f000000 	svceq	0x00000000
    62cc:	0005d004 	andeq	sp, r5, r4
    62d0:	db040f00 	blle	109ed8 <__bss_end+0xf4388>
    62d4:	13000005 	movwne	r0, #5
    62d8:	000000a4 	andeq	r0, r0, r4, lsr #1
    62dc:	00000623 	andeq	r0, r0, r3, lsr #12
    62e0:	00046f14 	andeq	r6, r4, r4, lsl pc
    62e4:	01121400 	tsteq	r2, r0, lsl #8
    62e8:	a4140000 	ldrge	r0, [r4], #-0
    62ec:	14000000 	strne	r0, [r0], #-0
    62f0:	00000025 	andeq	r0, r0, r5, lsr #32
    62f4:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
    62f8:	13000006 	movwne	r0, #6
    62fc:	00000025 	andeq	r0, r0, r5, lsr #32
    6300:	0000063d 	andeq	r0, r0, sp, lsr r6
    6304:	00046f14 	andeq	r6, r4, r4, lsl pc
    6308:	01121400 	tsteq	r2, r0, lsl #8
    630c:	0f000000 	svceq	0x00000000
    6310:	00062904 	andeq	r2, r6, r4, lsl #18
    6314:	006e0800 	rsbeq	r0, lr, r0, lsl #16
    6318:	06530000 	ldrbeq	r0, [r3], -r0
    631c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6320:	02000000 	andeq	r0, r0, #0
    6324:	006e0800 	rsbeq	r0, lr, r0, lsl #16
    6328:	06630000 	strbteq	r0, [r3], -r0
    632c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6330:	00000000 	andeq	r0, r0, r0
    6334:	08dc0500 	ldmeq	ip, {r8, sl}^
    6338:	24040000 	strcs	r0, [r4], #-0
    633c:	030e1a01 	movweq	r1, #59905	; 0xea01
    6340:	41190000 	tstmi	r9, r0
    6344:	0c00000a 	stceq	0, cr0, [r0], {10}
    6348:	08012804 	stmdaeq	r1, {r2, fp, sp}
    634c:	000006a9 	andeq	r0, r0, r9, lsr #13
    6350:	00090417 	andeq	r0, r9, r7, lsl r4
    6354:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    6358:	0006a911 	andeq	sl, r6, r1, lsl r9
    635c:	dc170000 	ldcle	0, cr0, [r7], {-0}
    6360:	04000007 	streq	r0, [r0], #-7
    6364:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
    6368:	04000000 	streq	r0, [r0], #-0
    636c:	0008d617 	andeq	sp, r8, r7, lsl r6
    6370:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    6374:	0006af0b 	andeq	sl, r6, fp, lsl #30
    6378:	0f000800 	svceq	0x00000800
    637c:	00067004 	andeq	r7, r6, r4
    6380:	63040f00 	movwvs	r0, #20224	; 0x4f00
    6384:	19000006 	stmdbne	r0, {r1, r2}
    6388:	00000627 	andeq	r0, r0, r7, lsr #12
    638c:	0144040e 	cmpeq	r4, lr, lsl #8
    6390:	0006ee08 	andeq	lr, r6, r8, lsl #28
    6394:	09811700 	stmibeq	r1, {r8, r9, sl, ip}
    6398:	45040000 	strmi	r0, [r4, #-0]
    639c:	06ee1201 	strbteq	r1, [lr], r1, lsl #4
    63a0:	17000000 	strne	r0, [r0, -r0]
    63a4:	000009c1 	andeq	r0, r0, r1, asr #19
    63a8:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    63ac:	000006ee 	andeq	r0, r0, lr, ror #13
    63b0:	09dd1706 	ldmibeq	sp, {r1, r2, r8, r9, sl, ip}^
    63b4:	47040000 	strmi	r0, [r4, -r0]
    63b8:	007c1201 	rsbseq	r1, ip, r1, lsl #4
    63bc:	000c0000 	andeq	r0, ip, r0
    63c0:	00007c08 	andeq	r7, r0, r8, lsl #24
    63c4:	0006fe00 	andeq	pc, r6, r0, lsl #28
    63c8:	00380900 	eorseq	r0, r8, r0, lsl #18
    63cc:	00020000 	andeq	r0, r2, r0
    63d0:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    63d4:	08130702 	ldmdaeq	r3, {r1, r8, r9, sl}
    63d8:	15170000 	ldrne	r0, [r7, #-0]
    63dc:	0400000a 	streq	r0, [r0], #-10
    63e0:	38180287 	ldmdacc	r8, {r0, r1, r2, r7, r9}
    63e4:	00000000 	andeq	r0, r0, r0
    63e8:	0009c717 	andeq	ip, r9, r7, lsl r7
    63ec:	02880400 	addeq	r0, r8, #0, 8
    63f0:	0005c312 	andeq	ip, r5, r2, lsl r3
    63f4:	f8170400 			; <UNDEFINED> instruction: 0xf8170400
    63f8:	04000007 	streq	r0, [r0], #-7
    63fc:	13100289 	tstne	r0, #-1879048184	; 0x90000008
    6400:	08000008 	stmdaeq	r0, {r3}
    6404:	000a9617 	andeq	r9, sl, r7, lsl r6
    6408:	028a0400 	addeq	r0, sl, #0, 8
    640c:	0001a817 	andeq	sl, r1, r7, lsl r8
    6410:	9b172400 	blls	5cf418 <__bss_end+0x5b98c8>
    6414:	04000007 	streq	r0, [r0], #-7
    6418:	250f028b 	strcs	r0, [pc, #-651]	; 6195 <_start-0x1e6b>
    641c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6420:	0008ff17 	andeq	pc, r8, r7, lsl pc	; <UNPREDICTABLE>
    6424:	028c0400 	addeq	r0, ip, #0, 8
    6428:	0000912c 	andeq	r9, r0, ip, lsr #2
    642c:	ac175000 	ldcge	0, cr5, [r7], {-0}
    6430:	0400000a 	streq	r0, [r0], #-10
    6434:	b51a028d 	ldrlt	r0, [sl, #-653]	; 0xfffffd73
    6438:	58000006 	stmdapl	r0, {r1, r2}
    643c:	00090a17 	andeq	r0, r9, r7, lsl sl
    6440:	028e0400 	addeq	r0, lr, #0, 8
    6444:	00010616 	andeq	r0, r1, r6, lsl r6
    6448:	b1176800 	tstlt	r7, r0, lsl #16
    644c:	0400000a 	streq	r0, [r0], #-10
    6450:	0616028f 	ldreq	r0, [r6], -pc, lsl #5
    6454:	70000001 	andvc	r0, r0, r1
    6458:	0006a817 	andeq	sl, r6, r7, lsl r8
    645c:	02900400 	addseq	r0, r0, #0, 8
    6460:	00010616 	andeq	r0, r1, r6, lsl r6
    6464:	50177800 	andspl	r7, r7, r0, lsl #16
    6468:	0400000a 	streq	r0, [r0], #-10
    646c:	23100291 	tstcs	r0, #268435465	; 0x10000009
    6470:	80000008 	andhi	r0, r0, r8
    6474:	0007ec17 	andeq	lr, r7, r7, lsl ip
    6478:	02920400 	addseq	r0, r2, #0, 8
    647c:	00083310 	andeq	r3, r8, r0, lsl r3
    6480:	f5178800 			; <UNDEFINED> instruction: 0xf5178800
    6484:	04000009 	streq	r0, [r0], #-9
    6488:	250f0293 	strcs	r0, [pc, #-659]	; 61fd <_start-0x1e03>
    648c:	a0000000 	andge	r0, r0, r0
    6490:	00075317 	andeq	r5, r7, r7, lsl r3
    6494:	02940400 	addseq	r0, r4, #0, 8
    6498:	00010616 	andeq	r0, r1, r6, lsl r6
    649c:	9917a400 	ldmdbls	r7, {sl, sp, pc}
    64a0:	04000006 	streq	r0, [r0], #-6
    64a4:	06160295 			; <UNDEFINED> instruction: 0x06160295
    64a8:	ac000001 	stcge	0, cr0, [r0], {1}
    64ac:	00074217 	andeq	r4, r7, r7, lsl r2
    64b0:	02960400 	addseq	r0, r6, #0, 8
    64b4:	00010616 	andeq	r0, r1, r6, lsl r6
    64b8:	4017b400 	andsmi	fp, r7, r0, lsl #8
    64bc:	04000006 	streq	r0, [r0], #-6
    64c0:	06160297 			; <UNDEFINED> instruction: 0x06160297
    64c4:	bc000001 	stclt	0, cr0, [r0], {1}
    64c8:	00064f17 	andeq	r4, r6, r7, lsl pc
    64cc:	02980400 	addseq	r0, r8, #0, 8
    64d0:	00010616 	andeq	r0, r1, r6, lsl r6
    64d4:	b217c400 	andslt	ip, r7, #0, 8
    64d8:	04000008 	streq	r0, [r0], #-8
    64dc:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
    64e0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    64e4:	05c90800 	strbeq	r0, [r9, #2048]	; 0x800
    64e8:	08230000 	stmdaeq	r3!, {}	; <UNPREDICTABLE>
    64ec:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    64f0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    64f4:	05c90800 	strbeq	r0, [r9, #2048]	; 0x800
    64f8:	08330000 	ldmdaeq	r3!, {}	; <UNPREDICTABLE>
    64fc:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6500:	07000000 	streq	r0, [r0, -r0]
    6504:	05c90800 	strbeq	r0, [r9, #2048]	; 0x800
    6508:	08430000 	stmdaeq	r3, {}^	; <UNPREDICTABLE>
    650c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6510:	17000000 	strne	r0, [r0, -r0]
    6514:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    6518:	6a07029e 	bvs	1c6f98 <__bss_end+0x1b1448>
    651c:	17000008 	strne	r0, [r0, -r8]
    6520:	00000854 	andeq	r0, r0, r4, asr r8
    6524:	1b02a104 	blne	ae93c <__bss_end+0x98dec>
    6528:	0000086a 	andeq	r0, r0, sl, ror #16
    652c:	0a471700 	beq	11cc134 <__bss_end+0x11b65e4>
    6530:	a2040000 	andge	r0, r4, #0
    6534:	087a1802 	ldmdaeq	sl!, {r1, fp, ip}^
    6538:	00780000 	rsbseq	r0, r8, r0
    653c:	00030808 	andeq	r0, r3, r8, lsl #16
    6540:	00087a00 	andeq	r7, r8, r0, lsl #20
    6544:	00380900 	eorseq	r0, r8, r0, lsl #18
    6548:	001d0000 	andseq	r0, sp, r0
    654c:	00003808 	andeq	r3, r0, r8, lsl #16
    6550:	00088a00 	andeq	r8, r8, r0, lsl #20
    6554:	00380900 	eorseq	r0, r8, r0, lsl #18
    6558:	001d0000 	andseq	r0, sp, r0
    655c:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    6560:	08af0302 	stmiaeq	pc!, {r1, r8, r9}	; <UNPREDICTABLE>
    6564:	761c0000 	ldrvc	r0, [ip], -r0
    6568:	0400000a 	streq	r0, [r0], #-10
    656c:	fe0b029a 	mcr2	2, 0, r0, cr11, cr10, {4}
    6570:	1c000006 	stcne	0, cr0, [r0], {6}
    6574:	00000a83 	andeq	r0, r0, r3, lsl #21
    6578:	0b02a304 	bleq	af190 <__bss_end+0x99640>
    657c:	00000843 	andeq	r0, r0, r3, asr #16
    6580:	05c90800 	strbeq	r0, [r9, #2048]	; 0x800
    6584:	08bf0000 	ldmeq	pc!, {}	; <UNPREDICTABLE>
    6588:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    658c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6590:	06801000 	streq	r1, [r0], r0
    6594:	016c0000 	cmneq	ip, r0
    6598:	4608b206 	strmi	fp, [r8], -r6, lsl #4
    659c:	0b000009 	bleq	65c8 <_start-0x1a38>
    65a0:	00001d08 	andeq	r1, r0, r8, lsl #26
    65a4:	e20bb406 	and	fp, fp, #100663296	; 0x6000000
    65a8:	0000000d 	andeq	r0, r0, sp
    65ac:	001be70b 	andseq	lr, fp, fp, lsl #14
    65b0:	0bb50600 	bleq	fed47db8 <_estack+0xf6d37db8>
    65b4:	00000e1c 	andeq	r0, r0, ip, lsl lr
    65b8:	1ad10be0 	bne	ff449540 <_estack+0xf7439540>
    65bc:	b7060000 	strlt	r0, [r6, -r0]
    65c0:	000e4b0b 	andeq	r4, lr, fp, lsl #22
    65c4:	090be400 	stmdbeq	fp, {sl, sp, lr, pc}
    65c8:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    65cc:	00250ab9 	strhteq	r0, [r5], -r9
    65d0:	0be80000 	bleq	ffa065d8 <_estack+0xf79f65d8>
    65d4:	000019ce 	andeq	r1, r0, lr, asr #19
    65d8:	c30bba06 	movwgt	fp, #47622	; 0xba06
    65dc:	ec000005 	stc	0, cr0, [r0], {5}
    65e0:	001a030b 	andseq	r0, sl, fp, lsl #6
    65e4:	12bb0600 	adcsne	r0, fp, #0, 12
    65e8:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    65ec:	1b4f11f0 	blne	13cadb4 <__bss_end+0x13b5264>
    65f0:	bd060000 	stclt	0, cr0, [r6, #-0]
    65f4:	000e510b 	andeq	r5, lr, fp, lsl #2
    65f8:	11012800 	tstne	r1, r0, lsl #16
    65fc:	00001b70 	andeq	r1, r0, r0, ror fp
    6600:	610bbe06 	tstvs	fp, r6, lsl #28
    6604:	2a00000e 	bcs	6644 <_start-0x19bc>
    6608:	1ac11101 	bne	ff04aa14 <_estack+0xf703aa14>
    660c:	bf060000 	svclt	0x00060000
    6610:	000e610b 	andeq	r6, lr, fp, lsl #2
    6614:	00014a00 	andeq	r4, r1, r0, lsl #20
    6618:	08bf040f 	ldmeq	pc!, {r0, r1, r2, r3, sl}	; <UNPREDICTABLE>
    661c:	571d0000 	ldrpl	r0, [sp, -r0]
    6620:	14000009 	strne	r0, [r0], #-9
    6624:	0000046f 	andeq	r0, r0, pc, ror #8
    6628:	4c040f00 	stcmi	15, cr0, [r4], {-0}
    662c:	0f000009 	svceq	0x00000009
    6630:	00019204 	andeq	r9, r1, r4, lsl #4
    6634:	096e1d00 	stmdbeq	lr!, {r8, sl, fp, ip}^
    6638:	25140000 	ldrcs	r0, [r4, #-0]
    663c:	00000000 	andeq	r0, r0, r0
    6640:	0974040f 	ldmdbeq	r4!, {r0, r1, r2, r3, sl}^
    6644:	040f0000 	streq	r0, [pc], #-0	; 664c <_start-0x19b4>
    6648:	00000963 	andeq	r0, r0, r3, ror #18
    664c:	00066308 	andeq	r6, r6, r8, lsl #6
    6650:	00098a00 	andeq	r8, r9, r0, lsl #20
    6654:	00380900 	eorseq	r0, r8, r0, lsl #18
    6658:	00020000 	andeq	r0, r2, r0
    665c:	000a091e 	andeq	r0, sl, lr, lsl r9
    6660:	03330400 	teqeq	r3, #0, 8
    6664:	00046f17 	andeq	r6, r4, r7, lsl pc
    6668:	0a021e00 	beq	8de70 <__bss_end+0x78320>
    666c:	34040000 	strcc	r0, [r4], #-0
    6670:	04751d03 	ldrbteq	r1, [r5], #-3331	; 0xfffff2fd
    6674:	6c1f0000 	ldcvs	0, cr0, [pc], {-0}
    6678:	07000008 	streq	r0, [r0, -r8]
    667c:	05c30e67 	strbeq	r0, [r3, #3687]	; 0xe67
    6680:	e4030000 	str	r0, [r3], #-0
    6684:	08000008 	stmdaeq	r0, {r3}
    6688:	01061456 	tsteq	r6, r6, asr r4
    668c:	030d0000 	movweq	r0, #53248	; 0xd000
    6690:	3800001a 	stmdacc	r0, {r1, r3, r4}
    6694:	02082a09 	andeq	r2, r8, #36864	; 0x9000
    6698:	0b00000b 	bleq	66cc <_start-0x1934>
    669c:	00001b24 	andeq	r1, r0, r4, lsr #22
    66a0:	c3092c09 	movwgt	r2, #39945	; 0x9c09
    66a4:	00000005 	andeq	r0, r0, r5
    66a8:	001c400b 	andseq	r4, ip, fp
    66ac:	092d0900 	pusheq	{r8, fp}
    66b0:	000005c3 	andeq	r0, r0, r3, asr #11
    66b4:	1aff0b04 	bne	fffc92cc <_estack+0xf7fb92cc>
    66b8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    66bc:	0005c309 	andeq	ip, r5, r9, lsl #6
    66c0:	2e0b0800 	cdpcs	8, 0, cr0, cr11, cr0, {0}
    66c4:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    66c8:	05c3092f 	strbeq	r0, [r3, #2351]	; 0x92f
    66cc:	0b0c0000 	bleq	3066d4 <__bss_end+0x2f0b84>
    66d0:	000019be 			; <UNDEFINED> instruction: 0x000019be
    66d4:	c3093009 	movwgt	r3, #36873	; 0x9009
    66d8:	10000005 	andne	r0, r0, r5
    66dc:	001b200b 	andseq	r2, fp, fp
    66e0:	09310900 	ldmdbeq	r1!, {r8, fp}
    66e4:	000005c3 	andeq	r0, r0, r3, asr #11
    66e8:	1c3c0b14 			; <UNDEFINED> instruction: 0x1c3c0b14
    66ec:	32090000 	andcc	r0, r9, #0
    66f0:	0005c309 	andeq	ip, r5, r9, lsl #6
    66f4:	fb0b1800 	blx	2cc6fe <__bss_end+0x2b6bae>
    66f8:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    66fc:	05c30933 	strbeq	r0, [r3, #2355]	; 0x933
    6700:	0b1c0000 	bleq	706708 <__bss_end+0x6f0bb8>
    6704:	00001b62 	andeq	r1, r0, r2, ror #22
    6708:	c3093409 	movwgt	r3, #37897	; 0x9409
    670c:	20000005 	andcs	r0, r0, r5
    6710:	001b410b 	andseq	r4, fp, fp, lsl #2
    6714:	09350900 	ldmdbeq	r5!, {r8, fp}
    6718:	000005c3 	andeq	r0, r0, r3, asr #11
    671c:	1d340b24 	vldmdbne	r4!, {d0-d17}
    6720:	36090000 	strcc	r0, [r9], -r0
    6724:	0005c908 	andeq	ip, r5, r8, lsl #18
    6728:	380b2800 	stmdacc	fp, {fp, sp}
    672c:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    6730:	05c90837 	strbeq	r0, [r9, #2103]	; 0x837
    6734:	0b290000 	bleq	a4673c <__bss_end+0xa30bec>
    6738:	00001b12 	andeq	r1, r0, r2, lsl fp
    673c:	c9083809 	stmdbgt	r8, {r0, r3, fp, ip, sp}
    6740:	2a000005 	bcs	675c <_start-0x18a4>
    6744:	001b8f0b 	andseq	r8, fp, fp, lsl #30
    6748:	08390900 	ldmdaeq	r9!, {r8, fp}
    674c:	000005c9 	andeq	r0, r0, r9, asr #11
    6750:	1ba20b2b 	blne	fe889404 <_estack+0xf6879404>
    6754:	3a090000 	bcc	24675c <__bss_end+0x230c0c>
    6758:	0005c908 	andeq	ip, r5, r8, lsl #18
    675c:	f40b2c00 			; <UNDEFINED> instruction: 0xf40b2c00
    6760:	09000019 	stmdbeq	r0, {r0, r3, r4}
    6764:	05c9083b 	strbeq	r0, [r9, #2107]	; 0x83b
    6768:	0b2d0000 	bleq	b46770 <__bss_end+0xb30c20>
    676c:	00001aef 	andeq	r1, r0, pc, ror #21
    6770:	c9083c09 	stmdbgt	r8, {r0, r3, sl, fp, ip, sp}
    6774:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
    6778:	001d170b 	andseq	r1, sp, fp, lsl #14
    677c:	083d0900 	ldmdaeq	sp!, {r8, fp}
    6780:	000005c9 	andeq	r0, r0, r9, asr #11
    6784:	1b9e0b2f 	blne	fe789448 <_estack+0xf6779448>
    6788:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    678c:	0005c908 	andeq	ip, r5, r8, lsl #18
    6790:	f00b3000 			; <UNDEFINED> instruction: 0xf00b3000
    6794:	09000019 	stmdbeq	r0, {r0, r3, r4}
    6798:	05c9083f 	strbeq	r0, [r9, #2111]	; 0x83f
    679c:	0b310000 	bleq	c467a4 <__bss_end+0xc30c54>
    67a0:	00001d13 	andeq	r1, r0, r3, lsl sp
    67a4:	c9084009 	stmdbgt	r8, {r0, r3, lr}
    67a8:	32000005 	andcc	r0, r0, #5
    67ac:	001b0e0b 	andseq	r0, fp, fp, lsl #28
    67b0:	08410900 	stmdaeq	r1, {r8, fp}^
    67b4:	000005c9 	andeq	r0, r0, r9, asr #11
    67b8:	1b8b0b33 	blne	fe2c948c <_estack+0xf62b948c>
    67bc:	42090000 	andmi	r0, r9, #0
    67c0:	0005c908 	andeq	ip, r5, r8, lsl #18
    67c4:	eb0b3400 	bl	2d37cc <__bss_end+0x2bdc7c>
    67c8:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    67cc:	05c90843 	strbeq	r0, [r9, #2115]	; 0x843
    67d0:	00350000 	eorseq	r0, r5, r0
    67d4:	001bd20d 	andseq	sp, fp, sp, lsl #4
    67d8:	39060800 	stmdbcc	r6, {fp}
    67dc:	000b2a08 	andeq	r2, fp, r8, lsl #20
    67e0:	1ac90b00 	bne	ff2493e8 <_estack+0xf72393e8>
    67e4:	3b060000 	blcc	1867ec <__bss_end+0x170c9c>
    67e8:	0005f90f 	andeq	pc, r5, pc, lsl #18
    67ec:	4f0b0000 	svcmi	0x000b0000
    67f0:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    67f4:	05f90f3c 	ldrbeq	r0, [r9, #3900]!	; 0xf3c
    67f8:	00040000 	andeq	r0, r4, r0
    67fc:	000b0215 	andeq	r0, fp, r5, lsl r2
    6800:	1a531f00 	bne	14ce408 <__bss_end+0x14b88b8>
    6804:	42060000 	andmi	r0, r6, #0
    6808:	000b2a20 	andeq	r2, fp, r0, lsr #20
    680c:	1ab30d00 	bne	fecc9c14 <_estack+0xf6cb9c14>
    6810:	063c0000 	ldrteq	r0, [ip], -r0
    6814:	0c0c0844 	stceq	8, cr0, [ip], {68}	; 0x44
    6818:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    681c:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    6820:	05f90f46 	ldrbeq	r0, [r9, #3910]!	; 0xf46
    6824:	0b000000 	bleq	682c <_start-0x17d4>
    6828:	000019be 			; <UNDEFINED> instruction: 0x000019be
    682c:	f90f4706 			; <UNDEFINED> instruction: 0xf90f4706
    6830:	04000005 	streq	r0, [r0], #-5
    6834:	001b200b 	andseq	r2, fp, fp
    6838:	0f480600 	svceq	0x00480600
    683c:	000005f9 	strdeq	r0, [r0], -r9
    6840:	1c3c0b08 			; <UNDEFINED> instruction: 0x1c3c0b08
    6844:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    6848:	0005f90f 	andeq	pc, r5, pc, lsl #18
    684c:	fb0b0c00 	blx	2c9856 <__bss_end+0x2b3d06>
    6850:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    6854:	05f90f4a 	ldrbeq	r0, [r9, #3914]!	; 0xf4a
    6858:	0b100000 	bleq	406860 <__bss_end+0x3f0d10>
    685c:	00001b62 	andeq	r1, r0, r2, ror #22
    6860:	f90f4b06 			; <UNDEFINED> instruction: 0xf90f4b06
    6864:	14000005 	strne	r0, [r0], #-5
    6868:	001b410b 	andseq	r4, fp, fp, lsl #2
    686c:	0f4c0600 	svceq	0x004c0600
    6870:	000005f9 	strdeq	r0, [r0], -r9
    6874:	1d340b18 	vldmdbne	r4!, {d0-d11}
    6878:	4d060000 	stcmi	0, cr0, [r6, #-0]
    687c:	0005f90f 	andeq	pc, r5, pc, lsl #18
    6880:	380b1c00 	stmdacc	fp, {sl, fp, ip}
    6884:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    6888:	05f90f4e 	ldrbeq	r0, [r9, #3918]!	; 0xf4e
    688c:	0b200000 	bleq	806894 <__bss_end+0x7f0d44>
    6890:	00001b12 	andeq	r1, r0, r2, lsl fp
    6894:	f90f4f06 			; <UNDEFINED> instruction: 0xf90f4f06
    6898:	24000005 	strcs	r0, [r0], #-5
    689c:	001b8f0b 	andseq	r8, fp, fp, lsl #30
    68a0:	0f500600 	svceq	0x00500600
    68a4:	000005f9 	strdeq	r0, [r0], -r9
    68a8:	1ba20b28 	blne	fe889550 <_estack+0xf6879550>
    68ac:	51060000 	mrspl	r0, (UNDEF: 6)
    68b0:	0005f90f 	andeq	pc, r5, pc, lsl #18
    68b4:	f40b2c00 			; <UNDEFINED> instruction: 0xf40b2c00
    68b8:	06000019 			; <UNDEFINED> instruction: 0x06000019
    68bc:	05f90f52 	ldrbeq	r0, [r9, #3922]!	; 0xf52
    68c0:	0b300000 	bleq	c068c8 <__bss_end+0xbf0d78>
    68c4:	00001aef 	andeq	r1, r0, pc, ror #21
    68c8:	f90f5306 			; <UNDEFINED> instruction: 0xf90f5306
    68cc:	34000005 	strcc	r0, [r0], #-5
    68d0:	001d170b 	andseq	r1, sp, fp, lsl #14
    68d4:	0f540600 	svceq	0x00540600
    68d8:	000005f9 	strdeq	r0, [r0], -r9
    68dc:	3b150038 	blcc	5469c4 <__bss_end+0x530e74>
    68e0:	1f00000b 	svcne	0x0000000b
    68e4:	00001cf5 	strdeq	r1, [r0], -r5
    68e8:	0c236506 	cfstr32eq	mvfx6, [r3], #-24	; 0xffffffe8
    68ec:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    68f0:	00001a12 	andeq	r1, r0, r2, lsl sl
    68f4:	0867060c 	stmdaeq	r7!, {r2, r3, r9, sl}^
    68f8:	00000c52 	andeq	r0, r0, r2, asr ip
    68fc:	001b240b 	andseq	r2, fp, fp, lsl #8
    6900:	0f690600 	svceq	0x00690600
    6904:	000005f9 	strdeq	r0, [r0], -r9
    6908:	1c400b00 	mcrrne	11, 0, r0, r0, cr0
    690c:	6a060000 	bvs	186914 <__bss_end+0x170dc4>
    6910:	0005f90f 	andeq	pc, r5, pc, lsl #18
    6914:	ff0b0400 			; <UNDEFINED> instruction: 0xff0b0400
    6918:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    691c:	05f90f6b 	ldrbeq	r0, [r9, #3947]!	; 0xf6b
    6920:	00080000 	andeq	r0, r8, r0
    6924:	000c1d15 	andeq	r1, ip, r5, lsl sp
    6928:	19ac1f00 	stmibne	ip!, {r8, r9, sl, fp, ip}
    692c:	72060000 	andvc	r0, r6, #0
    6930:	000c5222 	andeq	r5, ip, r2, lsr #4
    6934:	1a3e0d00 	bne	f89d3c <__bss_end+0xf741ec>
    6938:	06fc0000 	ldrbteq	r0, [ip], r0
    693c:	0d4e0874 	stcleq	8, cr0, [lr, #-464]	; 0xfffffe30
    6940:	6d0e0000 	stcvs	0, cr0, [lr, #-0]
    6944:	06006e6f 	streq	r6, [r0], -pc, ror #28
    6948:	0d530f76 	ldcleq	15, cr0, [r3, #-472]	; 0xfffffe28
    694c:	0b000000 	bleq	6954 <_start-0x16ac>
    6950:	00001d4d 	andeq	r1, r0, sp, asr #26
    6954:	530f7706 	movwpl	r7, #63238	; 0xf706
    6958:	3000000d 	andcc	r0, r0, sp
    695c:	000a3c0b 	andeq	r3, sl, fp, lsl #24
    6960:	0f780600 	svceq	0x00780600
    6964:	00000d63 	andeq	r0, r0, r3, ror #26
    6968:	1ced0b60 	vstmiane	sp!, {d16-<overflow reg d63>}
    696c:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
    6970:	000d630f 	andeq	r6, sp, pc, lsl #6
    6974:	080b7c00 	stmdaeq	fp, {sl, fp, ip, sp, lr}
    6978:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    697c:	05f90f7a 	ldrbeq	r0, [r9, #3962]!	; 0xf7a
    6980:	0b980000 	bleq	fe606988 <_estack+0xf65f6988>
    6984:	00001b85 	andeq	r1, r0, r5, lsl #23
    6988:	f90f7b06 			; <UNDEFINED> instruction: 0xf90f7b06
    698c:	9c000005 	stcls	0, cr0, [r0], {5}
    6990:	001b320b 	andseq	r3, fp, fp, lsl #4
    6994:	0f7c0600 	svceq	0x007c0600
    6998:	000005f9 	strdeq	r0, [r0], -r9
    699c:	1a630ba0 	bne	18c9824 <__bss_end+0x18b3cd4>
    69a0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    69a4:	000d730f 	andeq	r7, sp, pc, lsl #6
    69a8:	380ba400 	stmdacc	fp, {sl, sp, pc}
    69ac:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    69b0:	05f90f7e 	ldrbeq	r0, [r9, #3966]!	; 0xf7e
    69b4:	0bac0000 	bleq	feb069bc <_estack+0xf6af69bc>
    69b8:	00001d49 	andeq	r1, r0, r9, asr #26
    69bc:	530f7f06 	movwpl	r7, #65286	; 0xff06
    69c0:	b000000d 	andlt	r0, r0, sp
    69c4:	001bb00b 	andseq	fp, fp, fp
    69c8:	0f800600 	svceq	0x00800600
    69cc:	000005f9 	strdeq	r0, [r0], -r9
    69d0:	1c4e0be0 	mcrrne	11, 14, r0, lr, cr0
    69d4:	81060000 	mrshi	r0, (UNDEF: 6)
    69d8:	0005f90f 	andeq	pc, r5, pc, lsl #18
    69dc:	650ee400 	strvs	lr, [lr, #-1024]	; 0xfffffc00
    69e0:	06006172 			; <UNDEFINED> instruction: 0x06006172
    69e4:	05f90f82 	ldrbeq	r0, [r9, #3970]!	; 0xf82
    69e8:	0be80000 	bleq	ffa069f0 <_estack+0xf79f69f0>
    69ec:	00001bc8 	andeq	r1, r0, r8, asr #23
    69f0:	f90f8306 			; <UNDEFINED> instruction: 0xf90f8306
    69f4:	ec000005 	stc	0, cr0, [r0], {5}
    69f8:	001a690b 	andseq	r6, sl, fp, lsl #18
    69fc:	0f840600 	svceq	0x00840600
    6a00:	000005f9 	strdeq	r0, [r0], -r9
    6a04:	1bdd0bf0 	blne	ff7499cc <_estack+0xf77399cc>
    6a08:	85060000 	strhi	r0, [r6, #-0]
    6a0c:	0005f90f 	andeq	pc, r5, pc, lsl #18
    6a10:	480bf400 	stmdami	fp, {sl, ip, sp, lr, pc}
    6a14:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    6a18:	05f90f86 	ldrbeq	r0, [r9, #3974]!	; 0xf86
    6a1c:	00f80000 	rscseq	r0, r8, r0
    6a20:	000c6315 	andeq	r6, ip, r5, lsl r3
    6a24:	05f90800 	ldrbeq	r0, [r9, #2048]!	; 0x800
    6a28:	0d630000 	stcleq	0, cr0, [r3, #-0]
    6a2c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6a30:	0b000000 	bleq	6a38 <_start-0x15c8>
    6a34:	05f90800 	ldrbeq	r0, [r9, #2048]!	; 0x800
    6a38:	0d730000 	ldcleq	0, cr0, [r3, #-0]
    6a3c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6a40:	06000000 	streq	r0, [r0], -r0
    6a44:	05f90800 	ldrbeq	r0, [r9, #2048]!	; 0x800
    6a48:	0d830000 	stceq	0, cr0, [r3]
    6a4c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    6a50:	01000000 	mrseq	r0, (UNDEF: 0)
    6a54:	1a1f1f00 	bne	7ce65c <__bss_end+0x7b8b0c>
    6a58:	9a060000 	bls	186a60 <__bss_end+0x170f10>
    6a5c:	000d4e1f 	andeq	r4, sp, pc, lsl lr
    6a60:	1c570d00 	mrrcne	13, 0, r0, r7, cr0
    6a64:	06100000 	ldreq	r0, [r0], -r0
    6a68:	0dd1089c 	ldcleq	8, cr0, [r1, #624]	; 0x270
    6a6c:	c00b0000 	andgt	r0, fp, r0
    6a70:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    6a74:	05f90f9e 	ldrbeq	r0, [r9, #3998]!	; 0xf9e
    6a78:	0b000000 	bleq	6a80 <_start-0x1580>
    6a7c:	00001b7e 	andeq	r1, r0, lr, ror fp
    6a80:	f90f9f06 			; <UNDEFINED> instruction: 0xf90f9f06
    6a84:	04000005 	streq	r0, [r0], #-5
    6a88:	001bb90b 	andseq	fp, fp, fp, lsl #18
    6a8c:	0fa00600 	svceq	0x00a00600
    6a90:	000005f9 	strdeq	r0, [r0], -r9
    6a94:	1aad0b08 	bne	feb496bc <_estack+0xf6b396bc>
    6a98:	a1060000 	mrsge	r0, (UNDEF: 6)
    6a9c:	0005f90f 	andeq	pc, r5, pc, lsl #18
    6aa0:	15000c00 	strne	r0, [r0, #-3072]	; 0xfffff400
    6aa4:	00000d8f 	andeq	r0, r0, pc, lsl #27
    6aa8:	001ad81f 	andseq	sp, sl, pc, lsl r8
    6aac:	23aa0600 			; <UNDEFINED> instruction: 0x23aa0600
    6ab0:	00000dd1 	ldrdeq	r0, [r0], -r1
    6ab4:	0005c908 	andeq	ip, r5, r8, lsl #18
    6ab8:	000df800 	andeq	pc, sp, r0, lsl #16
    6abc:	00380900 	eorseq	r0, r8, r0, lsl #18
    6ac0:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    6ac4:	00000038 	andeq	r0, r0, r8, lsr r0
    6ac8:	2513001f 	ldrcs	r0, [r3, #-31]	; 0xffffffe1
    6acc:	16000000 	strne	r0, [r0], -r0
    6ad0:	1400000e 	strne	r0, [r0], #-14
    6ad4:	0000046f 	andeq	r0, r0, pc, ror #8
    6ad8:	0005c314 	andeq	ip, r5, r4, lsl r3
    6adc:	003f1400 	eorseq	r1, pc, r0, lsl #8
    6ae0:	16140000 	ldrne	r0, [r4], -r0
    6ae4:	0000000e 	andeq	r0, r0, lr
    6ae8:	09b0040f 	ldmibeq	r0!, {r0, r1, r2, r3, sl}
    6aec:	040f0000 	streq	r0, [pc], #-0	; 6af4 <_start-0x150c>
    6af0:	00000df8 	strdeq	r0, [r0], -r8
    6af4:	00002513 	andeq	r2, r0, r3, lsl r5
    6af8:	000e4500 	andeq	r4, lr, r0, lsl #10
    6afc:	046f1400 	strbteq	r1, [pc], #-1024	; 6b04 <_start-0x14fc>
    6b00:	45140000 	ldrmi	r0, [r4, #-0]
    6b04:	1400000e 	strne	r0, [r0], #-14
    6b08:	000005f9 	strdeq	r0, [r0], -r9
    6b0c:	00002c14 	andeq	r2, r0, r4, lsl ip
    6b10:	0e161400 	cfmulseq	mvf1, mvf6, mvf0
    6b14:	0f000000 	svceq	0x00000000
    6b18:	00003f04 	andeq	r3, r0, r4, lsl #30
    6b1c:	22040f00 	andcs	r0, r4, #0, 30
    6b20:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    6b24:	000005c9 	andeq	r0, r0, r9, asr #11
    6b28:	00000e61 	andeq	r0, r0, r1, ror #28
    6b2c:	00003809 	andeq	r3, r0, r9, lsl #16
    6b30:	08000100 	stmdaeq	r0, {r8}
    6b34:	000005c9 	andeq	r0, r0, r9, asr #11
    6b38:	00000e71 	andeq	r0, r0, r1, ror lr
    6b3c:	00003809 	andeq	r3, r0, r9, lsl #16
    6b40:	20001f00 	andcs	r1, r0, r0, lsl #30
    6b44:	00001ddb 	ldrdeq	r1, [r0], -fp
    6b48:	1209210a 	andne	r2, r9, #-2147483646	; 0x80000002
    6b4c:	34000001 	strcc	r0, [r0], #-1
    6b50:	18000145 	stmdane	r0, {r0, r2, r6, r8}
    6b54:	01000001 	tsteq	r0, r1
    6b58:	000f1a9c 	muleq	pc, ip, sl	; <UNPREDICTABLE>
    6b5c:	006d2100 	rsbeq	r2, sp, r0, lsl #2
    6b60:	120f2601 	andne	r2, pc, #1048576	; 0x100000
    6b64:	01000001 	tsteq	r0, r1
    6b68:	00632250 	rsbeq	r2, r3, r0, asr r2
    6b6c:	25062701 	strcs	r2, [r6, #-1793]	; 0xfffff8ff
    6b70:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    6b74:	eb000001 	bl	6b80 <_start-0x1480>
    6b78:	22000001 	andcs	r0, r0, #1
    6b7c:	2801006e 	stmdacs	r1, {r1, r2, r3, r5, r6}
    6b80:	00002c09 	andeq	r2, r0, r9, lsl #24
    6b84:	00024a00 	andeq	r4, r2, r0, lsl #20
    6b88:	00023a00 	andeq	r3, r2, r0, lsl #20
    6b8c:	00732300 	rsbseq	r2, r3, r0, lsl #6
    6b90:	c3092a01 	movwgt	r2, #39425	; 0x9a01
    6b94:	ba000005 	blt	6bb0 <_start-0x1450>
    6b98:	b0000002 	andlt	r0, r0, r2
    6b9c:	23000002 	movwcs	r0, #2
    6ba0:	2d010069 	stccs	0, cr0, [r1, #-420]	; 0xfffffe5c
    6ba4:	00003810 	andeq	r3, r0, r0, lsl r8
    6ba8:	0002ff00 	andeq	pc, r2, r0, lsl #30
    6bac:	0002f900 	andeq	pc, r2, r0, lsl #18
    6bb0:	1dd42400 	cfldrdne	mvd2, [r4]
    6bb4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6bb8:	00008a11 	andeq	r8, r0, r1, lsl sl
    6bbc:	00033600 	andeq	r3, r3, r0, lsl #12
    6bc0:	00032e00 	andeq	r2, r3, r0, lsl #28
    6bc4:	1d7e2400 	cfldrdne	mvd2, [lr, #-0]
    6bc8:	2f010000 	svccs	0x00010000
    6bcc:	000f1a12 	andeq	r1, pc, r2, lsl sl	; <UNPREDICTABLE>
    6bd0:	0003a100 	andeq	sl, r3, r0, lsl #2
    6bd4:	00038b00 	andeq	r8, r3, r0, lsl #22
    6bd8:	00642300 	rsbeq	r2, r4, r0, lsl #6
    6bdc:	38103001 	ldmdacc	r0, {r0, ip, sp}
    6be0:	36000000 	strcc	r0, [r0], -r0
    6be4:	2c000004 	stccs	0, cr0, [r0], {4}
    6be8:	00000004 	andeq	r0, r0, r4
    6bec:	008a040f 	addeq	r0, sl, pc, lsl #8
    6bf0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    6bf4:	04000009 	streq	r0, [r0], #-9
    6bf8:	0015ec00 	andseq	lr, r5, r0, lsl #24
    6bfc:	65010400 	strvs	r0, [r1, #-1024]	; 0xfffffc00
    6c00:	0c00001c 	stceq	0, cr0, [r0], {28}
    6c04:	00001dea 	andeq	r1, r0, sl, ror #27
    6c08:	00001d8b 	andeq	r1, r0, fp, lsl #27
    6c0c:	0001464c 	andeq	r4, r1, ip, asr #12
    6c10:	000000e8 	andeq	r0, r0, r8, ror #1
    6c14:	0000208a 	andeq	r2, r0, sl, lsl #1
    6c18:	69050402 	stmdbvs	r5, {r1, sl}
    6c1c:	0300746e 	movweq	r7, #1134	; 0x46e
    6c20:	00000b2b 	andeq	r0, r0, fp, lsr #22
    6c24:	3817d802 	ldmdacc	r7, {r1, fp, ip, lr, pc}
    6c28:	04000000 	streq	r0, [r0], #-0
    6c2c:	066a0704 	strbteq	r0, [sl], -r4, lsl #14
    6c30:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    6c34:	00011f05 	andeq	r1, r1, r5, lsl #30
    6c38:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    6c3c:	0000019b 	muleq	r0, fp, r1
    6c40:	00081305 	andeq	r1, r8, r5, lsl #6
    6c44:	01650200 	cmneq	r5, r0, lsl #4
    6c48:	00003817 	andeq	r3, r0, r7, lsl r8
    6c4c:	06010400 	streq	r0, [r1], -r0, lsl #8
    6c50:	000008a6 	andeq	r0, r0, r6, lsr #17
    6c54:	a4080104 	strge	r0, [r8], #-260	; 0xfffffefc
    6c58:	04000008 	streq	r0, [r0], #-8
    6c5c:	08bb0502 	ldmeq	fp!, {r1, r8, sl}
    6c60:	02040000 	andeq	r0, r4, #0
    6c64:	00005907 	andeq	r5, r0, r7, lsl #18
    6c68:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6c6c:	00000124 	andeq	r0, r0, r4, lsr #2
    6c70:	00007606 	andeq	r7, r0, r6, lsl #12
    6c74:	07040400 	streq	r0, [r4, -r0, lsl #8]
    6c78:	00000665 	andeq	r0, r0, r5, ror #12
    6c7c:	60070804 	andvs	r0, r7, r4, lsl #16
    6c80:	03000006 	movweq	r0, #6
    6c84:	00000881 	andeq	r0, r0, r1, lsl #17
    6c88:	760e2e03 	strvc	r2, [lr], -r3, lsl #28
    6c8c:	03000000 	movweq	r0, #0
    6c90:	000009a9 	andeq	r0, r0, r9, lsr #19
    6c94:	760e7403 	strvc	r7, [lr], -r3, lsl #8
    6c98:	07000000 	streq	r0, [r0, -r0]
    6c9c:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
    6ca0:	000000ca 	andeq	r0, r0, sl, asr #1
    6ca4:	00080d08 	andeq	r0, r8, r8, lsl #26
    6ca8:	0ca70300 	stceq	3, cr0, [r7]
    6cac:	0000004d 	andeq	r0, r0, sp, asr #32
    6cb0:	0007bf08 	andeq	fp, r7, r8, lsl #30
    6cb4:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
    6cb8:	000000ca 	andeq	r0, r0, sl, asr #1
    6cbc:	00610900 	rsbeq	r0, r1, r0, lsl #18
    6cc0:	00da0000 	sbcseq	r0, sl, r0
    6cc4:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    6cc8:	03000000 	movweq	r0, #0
    6ccc:	03080b00 	movweq	r0, #35584	; 0x8b00
    6cd0:	00fe09a2 	rscseq	r0, lr, r2, lsr #19
    6cd4:	870c0000 	strhi	r0, [ip, -r0]
    6cd8:	03000009 	movweq	r0, #9
    6cdc:	002507a4 	eoreq	r0, r5, r4, lsr #15
    6ce0:	0c000000 	stceq	0, cr0, [r0], {-0}
    6ce4:	0000098f 	andeq	r0, r0, pc, lsl #19
    6ce8:	a805a903 	stmdage	r5, {r0, r1, r8, fp, sp, pc}
    6cec:	04000000 	streq	r0, [r0], #-0
    6cf0:	08e30300 	stmiaeq	r3!, {r8, r9}^
    6cf4:	aa030000 	bge	c6cfc <__bss_end+0xb11ac>
    6cf8:	0000da03 	andeq	sp, r0, r3, lsl #20
    6cfc:	03040d00 	movweq	r0, #19712	; 0x4d00
    6d00:	000009ed 	andeq	r0, r0, sp, ror #19
    6d04:	82191604 	andshi	r1, r9, #4, 12	; 0x400000
    6d08:	03000000 	movweq	r0, #0
    6d0c:	00000892 	muleq	r0, r2, r8
    6d10:	250d0c05 	strcs	r0, [sp, #-3077]	; 0xfffff3fb
    6d14:	03000000 	movweq	r0, #0
    6d18:	00000782 	andeq	r0, r0, r2, lsl #15
    6d1c:	181b2304 	ldmdane	fp, {r2, r8, r9, sp}
    6d20:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    6d24:	00000793 	muleq	r0, r3, r7
    6d28:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
    6d2c:	0000018a 	andeq	r0, r0, sl, lsl #3
    6d30:	0009040c 	andeq	r0, r9, ip, lsl #8
    6d34:	13360400 	teqne	r6, #0, 8
    6d38:	0000018a 	andeq	r0, r0, sl, lsl #3
    6d3c:	6b5f0f00 	blvs	17ca944 <__bss_end+0x17b4df4>
    6d40:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
    6d44:	00000025 	andeq	r0, r0, r5, lsr #32
    6d48:	09440c04 	stmdbeq	r4, {r2, sl, fp}^
    6d4c:	37040000 	strcc	r0, [r4, -r0]
    6d50:	0000250b 	andeq	r2, r0, fp, lsl #10
    6d54:	490c0800 	stmdbmi	ip, {fp}
    6d58:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    6d5c:	00251437 	eoreq	r1, r5, r7, lsr r4
    6d60:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    6d64:	00000a32 	andeq	r0, r0, r2, lsr sl
    6d68:	251b3704 	ldrcs	r3, [fp, #-1796]	; 0xfffff8fc
    6d6c:	10000000 	andne	r0, r0, r0
    6d70:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
    6d74:	900b3804 	andls	r3, fp, r4, lsl #16
    6d78:	14000001 	strne	r0, [r0], #-1
    6d7c:	30041000 	andcc	r1, r4, r0
    6d80:	09000001 	stmdbeq	r0, {r0}
    6d84:	0000010c 	andeq	r0, r0, ip, lsl #2
    6d88:	000001a0 	andeq	r0, r0, r0, lsr #3
    6d8c:	0000380a 	andeq	r3, r0, sl, lsl #16
    6d90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6d94:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    6d98:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
    6d9c:	00000223 	andeq	r0, r0, r3, lsr #4
    6da0:	0006b60c 	andeq	fp, r6, ip, lsl #12
    6da4:	093e0400 	ldmdbeq	lr!, {sl}
    6da8:	00000025 	andeq	r0, r0, r5, lsr #32
    6dac:	09b80c00 	ldmibeq	r8!, {sl, fp}
    6db0:	3f040000 	svccc	0x00040000
    6db4:	00002509 	andeq	r2, r0, r9, lsl #10
    6db8:	cb0c0400 	blgt	307dc0 <__bss_end+0x2f2270>
    6dbc:	04000006 	streq	r0, [r0], #-6
    6dc0:	00250940 	eoreq	r0, r5, r0, asr #18
    6dc4:	0c080000 	stceq	0, cr0, [r8], {-0}
    6dc8:	00000ac4 	andeq	r0, r0, r4, asr #21
    6dcc:	25094104 	strcs	r4, [r9, #-260]	; 0xfffffefc
    6dd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    6dd4:	00085b0c 	andeq	r5, r8, ip, lsl #22
    6dd8:	09420400 	stmdbeq	r2, {sl}^
    6ddc:	00000025 	andeq	r0, r0, r5, lsr #32
    6de0:	083b0c10 	ldmdaeq	fp!, {r4, sl, fp}
    6de4:	43040000 	movwmi	r0, #16384	; 0x4000
    6de8:	00002509 	andeq	r2, r0, r9, lsl #10
    6dec:	370c1400 	strcc	r1, [ip, -r0, lsl #8]
    6df0:	0400000a 	streq	r0, [r0], #-10
    6df4:	00250944 	eoreq	r0, r5, r4, asr #18
    6df8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    6dfc:	000008c5 	andeq	r0, r0, r5, asr #17
    6e00:	25094504 	strcs	r4, [r9, #-1284]	; 0xfffffafc
    6e04:	1c000000 	stcne	0, cr0, [r0], {-0}
    6e08:	000a8b0c 	andeq	r8, sl, ip, lsl #22
    6e0c:	09460400 	stmdbeq	r6, {sl}^
    6e10:	00000025 	andeq	r0, r0, r5, lsr #32
    6e14:	da110020 	ble	446e9c <__bss_end+0x43134c>
    6e18:	08000006 	stmdaeq	r0, {r1, r2}
    6e1c:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
    6e20:	00000268 	andeq	r0, r0, r8, ror #4
    6e24:	0007610c 	andeq	r6, r7, ip, lsl #2
    6e28:	0a500400 	beq	1407e30 <__bss_end+0x13f22e0>
    6e2c:	00000268 	andeq	r0, r0, r8, ror #4
    6e30:	06150c00 	ldreq	r0, [r5], -r0, lsl #24
    6e34:	51040000 	mrspl	r0, (UNDEF: 4)
    6e38:	00026809 	andeq	r6, r2, r9, lsl #16
    6e3c:	d4128000 	ldrle	r8, [r2], #-0
    6e40:	04000009 	streq	r0, [r0], #-9
    6e44:	010c0a53 	tsteq	ip, r3, asr sl
    6e48:	01000000 	mrseq	r0, (UNDEF: 0)
    6e4c:	00070412 	andeq	r0, r7, r2, lsl r4
    6e50:	0a560400 	beq	1587e58 <__bss_end+0x1572308>
    6e54:	0000010c 	andeq	r0, r0, ip, lsl #2
    6e58:	09000104 	stmdbeq	r0, {r2, r8}
    6e5c:	0000010a 	andeq	r0, r0, sl, lsl #2
    6e60:	00000278 	andeq	r0, r0, r8, ror r2
    6e64:	0000380a 	andeq	r3, r0, sl, lsl #16
    6e68:	11001f00 	tstne	r0, r0, lsl #30
    6e6c:	00000864 	andeq	r0, r0, r4, ror #16
    6e70:	62040190 	andvs	r0, r4, #144, 2	; 0x24
    6e74:	0002bb08 	andeq	fp, r2, r8, lsl #22
    6e78:	09040c00 	stmdbeq	r4, {sl, fp}
    6e7c:	63040000 	movwvs	r0, #16384	; 0x4000
    6e80:	0002bb12 	andeq	fp, r2, r2, lsl fp
    6e84:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    6e88:	04000009 	streq	r0, [r0], #-9
    6e8c:	00250664 	eoreq	r0, r5, r4, ror #12
    6e90:	0c040000 	stceq	0, cr0, [r4], {-0}
    6e94:	00000769 	andeq	r0, r0, r9, ror #14
    6e98:	c1096604 	tstgt	r9, r4, lsl #12
    6e9c:	08000002 	stmdaeq	r0, {r1}
    6ea0:	0006da0c 	andeq	sp, r6, ip, lsl #20
    6ea4:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
    6ea8:	00000223 	andeq	r0, r0, r3, lsr #4
    6eac:	04100088 	ldreq	r0, [r0], #-136	; 0xffffff78
    6eb0:	00000278 	andeq	r0, r0, r8, ror r2
    6eb4:	0002d109 	andeq	sp, r2, r9, lsl #2
    6eb8:	0002d100 	andeq	sp, r2, r0, lsl #2
    6ebc:	00380a00 	eorseq	r0, r8, r0, lsl #20
    6ec0:	001f0000 	andseq	r0, pc, r0
    6ec4:	02d70410 	sbcseq	r0, r7, #16, 8	; 0x10000000
    6ec8:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    6ecc:	000008cf 	andeq	r0, r0, pc, asr #17
    6ed0:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    6ed4:	00000300 	andeq	r0, r0, r0, lsl #6
    6ed8:	0006c50c 	andeq	ip, r6, ip, lsl #10
    6edc:	117b0400 	cmnne	fp, r0, lsl #8
    6ee0:	00000300 	andeq	r0, r0, r0, lsl #6
    6ee4:	06210c00 	strteq	r0, [r1], -r0, lsl #24
    6ee8:	7c040000 	stcvc	0, cr0, [r4], {-0}
    6eec:	00002506 	andeq	r2, r0, r6, lsl #10
    6ef0:	10000400 	andne	r0, r0, r0, lsl #8
    6ef4:	00006104 	andeq	r6, r0, r4, lsl #2
    6ef8:	08ee0e00 	stmiaeq	lr!, {r9, sl, fp}^
    6efc:	04680000 	strbteq	r0, [r8], #-0
    6f00:	044908ba 	strbeq	r0, [r9], #-2234	; 0xfffff746
    6f04:	5f0f0000 	svcpl	0x000f0000
    6f08:	bb040070 	bllt	1070d0 <__bss_end+0xf1580>
    6f0c:	00030012 	andeq	r0, r3, r2, lsl r0
    6f10:	5f0f0000 	svcpl	0x000f0000
    6f14:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    6f18:	00002507 	andeq	r2, r0, r7, lsl #10
    6f1c:	5f0f0400 	svcpl	0x000f0400
    6f20:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    6f24:	00002507 	andeq	r2, r0, r7, lsl #10
    6f28:	fd0c0800 	stc2	8, cr0, [ip, #-0]
    6f2c:	04000006 	streq	r0, [r0], #-6
    6f30:	006809be 	strhteq	r0, [r8], #-158	; 0xffffff62
    6f34:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    6f38:	000007d6 	ldrdeq	r0, [r0], -r6
    6f3c:	6809bf04 	stmdavs	r9, {r2, r8, r9, sl, fp, ip, sp, pc}
    6f40:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6f44:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    6f48:	11c00400 	bicne	r0, r0, r0, lsl #8
    6f4c:	000002d8 	ldrdeq	r0, [r0], -r8
    6f50:	06770c10 			; <UNDEFINED> instruction: 0x06770c10
    6f54:	c1040000 	mrsgt	r0, (UNDEF: 4)
    6f58:	00002507 	andeq	r2, r0, r7, lsl #10
    6f5c:	e80c1800 	stmda	ip, {fp, ip}
    6f60:	04000006 	streq	r0, [r0], #-6
    6f64:	010a0ac8 	smlabteq	sl, r8, sl, r0
    6f68:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    6f6c:	000007aa 	andeq	r0, r0, sl, lsr #15
    6f70:	d21dca04 	andsle	ip, sp, #4, 20	; 0x4000
    6f74:	20000005 	andcs	r0, r0, r5
    6f78:	0008340c 	andeq	r3, r8, ip, lsl #8
    6f7c:	1dcc0400 	cfstrdne	mvd0, [ip]
    6f80:	00000601 	andeq	r0, r0, r1, lsl #12
    6f84:	09970c24 	ldmibeq	r7, {r2, r5, sl, fp}
    6f88:	cf040000 	svcgt	0x00040000
    6f8c:	0006250d 	andeq	r2, r6, sp, lsl #10
    6f90:	a50c2800 	strge	r2, [ip, #-2048]	; 0xfffff800
    6f94:	0400000a 	streq	r0, [r0], #-10
    6f98:	063f09d0 			; <UNDEFINED> instruction: 0x063f09d0
    6f9c:	0f2c0000 	svceq	0x002c0000
    6fa0:	0062755f 	rsbeq	r7, r2, pc, asr r5
    6fa4:	d811d304 	ldmdale	r1, {r2, r8, r9, ip, lr, pc}
    6fa8:	30000002 	andcc	r0, r0, r2
    6fac:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    6fb0:	12d40400 	sbcsne	r0, r4, #0, 8
    6fb4:	00000300 	andeq	r0, r0, r0, lsl #6
    6fb8:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; 6088 <_start-0x1f78>
    6fbc:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    6fc0:	00002507 	andeq	r2, r0, r7, lsl #10
    6fc4:	bf0c3c00 	svclt	0x000c3c00
    6fc8:	04000006 	streq	r0, [r0], #-6
    6fcc:	064511d8 			; <UNDEFINED> instruction: 0x064511d8
    6fd0:	0c400000 	mareq	acc0, r0, r0
    6fd4:	00000a7d 	andeq	r0, r0, sp, ror sl
    6fd8:	5511d904 	ldrpl	sp, [r1, #-2308]	; 0xfffff6fc
    6fdc:	43000006 	movwmi	r0, #6
    6fe0:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    6fe4:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    6fe8:	000002d8 	ldrdeq	r0, [r0], -r8
    6fec:	07130c44 	ldreq	r0, [r3, -r4, asr #24]
    6ff0:	df040000 	svcle	0x00040000
    6ff4:	00002507 	andeq	r2, r0, r7, lsl #10
    6ff8:	240c4c00 	strcs	r4, [ip], #-3072	; 0xfffff400
    6ffc:	04000007 	streq	r0, [r0], #-7
    7000:	00900ae0 	addseq	r0, r0, r0, ror #21
    7004:	0c500000 	mraeq	r0, r0, acc0
    7008:	0000063a 	andeq	r0, r0, sl, lsr r6
    700c:	6712e304 	ldrvs	lr, [r2, -r4, lsl #6]
    7010:	54000004 	strpl	r0, [r0], #-4
    7014:	00081a0c 	andeq	r1, r8, ip, lsl #20
    7018:	0ce70400 	cfstrdeq	mvd0, [r7]
    701c:	00000124 	andeq	r0, r0, r4, lsr #2
    7020:	08f60c58 	ldmeq	r6!, {r3, r4, r6, sl, fp}^
    7024:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    7028:	0000fe0e 	andeq	pc, r0, lr, lsl #28
    702c:	2c0c5c00 	stccs	12, cr5, [ip], {-0}
    7030:	04000008 	streq	r0, [r0], #-8
    7034:	002509ea 	eoreq	r0, r5, sl, ror #19
    7038:	00640000 	rsbeq	r0, r4, r0
    703c:	00002514 	andeq	r2, r0, r4, lsl r5
    7040:	00046700 	andeq	r6, r4, r0, lsl #14
    7044:	04671500 	strbteq	r1, [r7], #-1280	; 0xfffffb00
    7048:	0a150000 	beq	547050 <__bss_end+0x531500>
    704c:	15000001 	strne	r0, [r0, #-1]
    7050:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    7054:	00002515 	andeq	r2, r0, r5, lsl r5
    7058:	04100000 	ldreq	r0, [r0], #-0
    705c:	00000472 	andeq	r0, r0, r2, ror r4
    7060:	00046706 	andeq	r6, r4, r6, lsl #14
    7064:	0a761600 	beq	1d8c86c <__bss_end+0x1d76d1c>
    7068:	04280000 	strteq	r0, [r8], #-0
    706c:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
    7070:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    7074:	0008b417 	andeq	fp, r8, r7, lsl r4
    7078:	02670400 	rsbeq	r0, r7, #0, 8
    707c:	00002507 	andeq	r2, r0, r7, lsl #10
    7080:	0c170000 	ldceq	0, cr0, [r7], {-0}
    7084:	04000007 	streq	r0, [r0], #-7
    7088:	b10b026c 	tstlt	fp, ip, ror #4
    708c:	04000006 	streq	r0, [r0], #-6
    7090:	0007c617 	andeq	ip, r7, r7, lsl r6
    7094:	026c0400 	rsbeq	r0, ip, #0, 8
    7098:	0006b114 	andeq	fp, r6, r4, lsl r1
    709c:	8b170800 	blhi	5c90a4 <__bss_end+0x5b3554>
    70a0:	04000007 	streq	r0, [r0], #-7
    70a4:	b11e026c 	tstlt	lr, ip, ror #4
    70a8:	0c000006 	stceq	0, cr0, [r0], {6}
    70ac:	00091717 	andeq	r1, r9, r7, lsl r7
    70b0:	026e0400 	rsbeq	r0, lr, #0, 8
    70b4:	00002508 	andeq	r2, r0, r8, lsl #10
    70b8:	2f171000 	svccs	0x00171000
    70bc:	04000006 	streq	r0, [r0], #-6
    70c0:	b108026f 	tstlt	r8, pc, ror #4
    70c4:	14000008 	strne	r0, [r0], #-8
    70c8:	00092b17 	andeq	r2, r9, r7, lsl fp
    70cc:	02720400 	rsbseq	r0, r2, #0, 8
    70d0:	00002507 	andeq	r2, r0, r7, lsl #10
    70d4:	b6173000 	ldrlt	r3, [r7], -r0
    70d8:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    70dc:	c6160273 			; <UNDEFINED> instruction: 0xc6160273
    70e0:	34000008 	strcc	r0, [r0], #-8
    70e4:	00087617 	andeq	r7, r8, r7, lsl r6
    70e8:	02750400 	rsbseq	r0, r5, #0, 8
    70ec:	00002507 	andeq	r2, r0, r7, lsl #10
    70f0:	21173800 	tstcs	r7, r0, lsl #16
    70f4:	04000009 	streq	r0, [r0], #-9
    70f8:	d70a0277 	smlsdxle	sl, r7, r2, r0
    70fc:	3c000008 	stccc	0, cr0, [r0], {8}
    7100:	00080517 	andeq	r0, r8, r7, lsl r5
    7104:	027a0400 	rsbseq	r0, sl, #0, 8
    7108:	00018a13 	andeq	r8, r1, r3, lsl sl
    710c:	b0174000 	andslt	r4, r7, r0
    7110:	04000007 	streq	r0, [r0], #-7
    7114:	2507027b 	strcs	r0, [r7, #-635]	; 0xfffffd85
    7118:	44000000 	strmi	r0, [r0], #-0
    711c:	000abf17 	andeq	fp, sl, r7, lsl pc
    7120:	027c0400 	rsbseq	r0, ip, #0, 8
    7124:	00018a13 	andeq	r8, r1, r3, lsl sl
    7128:	88174800 	ldmdahi	r7, {fp, lr}
    712c:	04000008 	streq	r0, [r0], #-8
    7130:	dd14027d 	lfmle	f0, 4, [r4, #-500]	; 0xfffffe0c
    7134:	4c000008 	stcmi	0, cr0, [r0], {8}
    7138:	0007ce17 	andeq	ip, r7, r7, lsl lr
    713c:	02800400 	addeq	r0, r0, #0, 8
    7140:	00002507 	andeq	r2, r0, r7, lsl #10
    7144:	1c175000 	ldcne	0, cr5, [r7], {-0}
    7148:	04000007 	streq	r0, [r0], #-7
    714c:	bb090281 	bllt	247b58 <__bss_end+0x232008>
    7150:	54000005 	strpl	r0, [r0], #-5
    7154:	0006f817 	andeq	pc, r6, r7, lsl r8	; <UNPREDICTABLE>
    7158:	02a40400 	adceq	r0, r4, #0, 8
    715c:	00088c07 	andeq	r8, r8, r7, lsl #24
    7160:	64185800 	ldrvs	r5, [r8], #-2048	; 0xfffff800
    7164:	04000008 	streq	r0, [r0], #-8
    7168:	bb1302a8 	bllt	4c7c10 <__bss_end+0x4b20c0>
    716c:	48000002 	stmdami	r0, {r1}
    7170:	07e31801 	strbeq	r1, [r3, r1, lsl #16]!
    7174:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    7178:	02781202 	rsbseq	r1, r8, #536870912	; 0x20000000
    717c:	014c0000 	mrseq	r0, (UNDEF: 76)
    7180:	000a5a18 	andeq	r5, sl, r8, lsl sl
    7184:	02ad0400 	adceq	r0, sp, #0, 8
    7188:	0008ee0c 	andeq	lr, r8, ip, lsl #28
    718c:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
    7190:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7194:	1002b204 	andne	fp, r2, r4, lsl #4
    7198:	00000672 	andeq	r0, r0, r2, ror r6
    719c:	d51802e0 	ldrle	r0, [r8, #-736]	; 0xfffffd20
    71a0:	04000006 	streq	r0, [r0], #-6
    71a4:	fa0a02b4 	blx	287c7c <__bss_end+0x27212c>
    71a8:	ec000008 	stc	0, cr0, [r0], {8}
    71ac:	04100002 	ldreq	r0, [r0], #-2
    71b0:	000005c6 	andeq	r0, r0, r6, asr #11
    71b4:	0005bb19 	andeq	fp, r5, r9, lsl fp
    71b8:	08010400 	stmdaeq	r1, {sl}
    71bc:	000008ad 	andeq	r0, r0, sp, lsr #17
    71c0:	0005c606 	andeq	ip, r5, r6, lsl #12
    71c4:	49041000 	stmdbmi	r4, {ip}
    71c8:	14000004 	strne	r0, [r0], #-4
    71cc:	00000025 	andeq	r0, r0, r5, lsr #32
    71d0:	000005f6 	strdeq	r0, [r0], -r6
    71d4:	00046715 	andeq	r6, r4, r5, lsl r7
    71d8:	010a1500 	tsteq	sl, r0, lsl #10
    71dc:	f6150000 			; <UNDEFINED> instruction: 0xf6150000
    71e0:	15000005 	strne	r0, [r0, #-5]
    71e4:	00000025 	andeq	r0, r0, r5, lsr #32
    71e8:	cd041000 	stcgt	0, cr1, [r4, #-0]
    71ec:	19000005 	stmdbne	r0, {r0, r2}
    71f0:	000005f6 	strdeq	r0, [r0], -r6
    71f4:	05d80410 	ldrbeq	r0, [r8, #1040]	; 0x410
    71f8:	9c140000 	ldcls	0, cr0, [r4], {-0}
    71fc:	25000000 	strcs	r0, [r0, #-0]
    7200:	15000006 	strne	r0, [r0, #-6]
    7204:	00000467 	andeq	r0, r0, r7, ror #8
    7208:	00010a15 	andeq	r0, r1, r5, lsl sl
    720c:	009c1500 	addseq	r1, ip, r0, lsl #10
    7210:	25150000 	ldrcs	r0, [r5, #-0]
    7214:	00000000 	andeq	r0, r0, r0
    7218:	06070410 			; <UNDEFINED> instruction: 0x06070410
    721c:	25140000 	ldrcs	r0, [r4, #-0]
    7220:	3f000000 	svccc	0x00000000
    7224:	15000006 	strne	r0, [r0, #-6]
    7228:	00000467 	andeq	r0, r0, r7, ror #8
    722c:	00010a15 	andeq	r0, r1, r5, lsl sl
    7230:	04100000 	ldreq	r0, [r0], #-0
    7234:	0000062b 	andeq	r0, r0, fp, lsr #12
    7238:	00006109 	andeq	r6, r0, r9, lsl #2
    723c:	00065500 	andeq	r5, r6, r0, lsl #10
    7240:	00380a00 	eorseq	r0, r8, r0, lsl #20
    7244:	00020000 	andeq	r0, r2, r0
    7248:	00006109 	andeq	r6, r0, r9, lsl #2
    724c:	00066500 	andeq	r6, r6, r0, lsl #10
    7250:	00380a00 	eorseq	r0, r8, r0, lsl #20
    7254:	00000000 	andeq	r0, r0, r0
    7258:	0008dc05 	andeq	sp, r8, r5, lsl #24
    725c:	01240400 			; <UNDEFINED> instruction: 0x01240400
    7260:	0003061a 	andeq	r0, r3, sl, lsl r6
    7264:	0a411a00 	beq	104da6c <__bss_end+0x1037f1c>
    7268:	040c0000 	streq	r0, [ip], #-0
    726c:	ab080128 	blge	207714 <__bss_end+0x1f1bc4>
    7270:	17000006 	strne	r0, [r0, -r6]
    7274:	00000904 	andeq	r0, r0, r4, lsl #18
    7278:	11012a04 	tstne	r1, r4, lsl #20
    727c:	000006ab 	andeq	r0, r0, fp, lsr #13
    7280:	07dc1700 	ldrbeq	r1, [ip, r0, lsl #14]
    7284:	2b040000 	blcs	10728c <__bss_end+0xf173c>
    7288:	00250701 	eoreq	r0, r5, r1, lsl #14
    728c:	17040000 	strne	r0, [r4, -r0]
    7290:	000008d6 	ldrdeq	r0, [r0], -r6
    7294:	0b012c04 	bleq	522ac <__bss_end+0x3c75c>
    7298:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    729c:	04100008 	ldreq	r0, [r0], #-8
    72a0:	00000672 	andeq	r0, r0, r2, ror r6
    72a4:	06650410 			; <UNDEFINED> instruction: 0x06650410
    72a8:	271a0000 	ldrcs	r0, [sl, -r0]
    72ac:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    72b0:	08014404 	stmdaeq	r1, {r2, sl, lr}
    72b4:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    72b8:	00098117 	andeq	r8, r9, r7, lsl r1
    72bc:	01450400 	cmpeq	r5, r0, lsl #8
    72c0:	0006f012 	andeq	pc, r6, r2, lsl r0	; <UNPREDICTABLE>
    72c4:	c1170000 	tstgt	r7, r0
    72c8:	04000009 	streq	r0, [r0], #-9
    72cc:	f0120146 			; <UNDEFINED> instruction: 0xf0120146
    72d0:	06000006 	streq	r0, [r0], -r6
    72d4:	0009dd17 	andeq	sp, r9, r7, lsl sp
    72d8:	01470400 	cmpeq	r7, r0, lsl #8
    72dc:	00006f12 	andeq	r6, r0, r2, lsl pc
    72e0:	09000c00 	stmdbeq	r0, {sl, fp}
    72e4:	0000006f 	andeq	r0, r0, pc, rrx
    72e8:	00000700 	andeq	r0, r0, r0, lsl #14
    72ec:	0000380a 	andeq	r3, r0, sl, lsl #16
    72f0:	1b000200 	blne	7af8 <_start-0x508>
    72f4:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
    72f8:	00081507 	andeq	r1, r8, r7, lsl #10
    72fc:	0a151700 	beq	54cf04 <__bss_end+0x5373b4>
    7300:	87040000 	strhi	r0, [r4, -r0]
    7304:	00381802 	eorseq	r1, r8, r2, lsl #16
    7308:	17000000 	strne	r0, [r0, -r0]
    730c:	000009c7 	andeq	r0, r0, r7, asr #19
    7310:	12028804 	andne	r8, r2, #4, 16	; 0x40000
    7314:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    7318:	07f81704 	ldrbeq	r1, [r8, r4, lsl #14]!
    731c:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    7320:	08151002 	ldmdaeq	r5, {r1, ip}
    7324:	17080000 	strne	r0, [r8, -r0]
    7328:	00000a96 	muleq	r0, r6, sl
    732c:	17028a04 	strne	r8, [r2, -r4, lsl #20]
    7330:	000001a0 	andeq	r0, r0, r0, lsr #3
    7334:	079b1724 	ldreq	r1, [fp, r4, lsr #14]
    7338:	8b040000 	blhi	107340 <__bss_end+0xf17f0>
    733c:	00250f02 	eoreq	r0, r5, r2, lsl #30
    7340:	17480000 	strbne	r0, [r8, -r0]
    7344:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7348:	2c028c04 	stccs	12, cr8, [r2], {4}
    734c:	00000089 	andeq	r0, r0, r9, lsl #1
    7350:	0aac1750 	beq	feb0d098 <_estack+0xf6afd098>
    7354:	8d040000 	stchi	0, cr0, [r4, #-0]
    7358:	06b71a02 	ldrteq	r1, [r7], r2, lsl #20
    735c:	17580000 	ldrbne	r0, [r8, -r0]
    7360:	0000090a 	andeq	r0, r0, sl, lsl #18
    7364:	16028e04 	strne	r8, [r2], -r4, lsl #28
    7368:	000000fe 	strdeq	r0, [r0], -lr
    736c:	0ab11768 	beq	fec4d114 <_estack+0xf6c3d114>
    7370:	8f040000 	svchi	0x00040000
    7374:	00fe1602 	rscseq	r1, lr, r2, lsl #12
    7378:	17700000 	ldrbne	r0, [r0, -r0]!
    737c:	000006a8 	andeq	r0, r0, r8, lsr #13
    7380:	16029004 	strne	r9, [r2], -r4
    7384:	000000fe 	strdeq	r0, [r0], -lr
    7388:	0a501778 	beq	140d170 <__bss_end+0x13f7620>
    738c:	91040000 	mrsls	r0, (UNDEF: 4)
    7390:	08251002 	stmdaeq	r5!, {r1, ip}
    7394:	17800000 	strne	r0, [r0, r0]
    7398:	000007ec 	andeq	r0, r0, ip, ror #15
    739c:	10029204 	andne	r9, r2, r4, lsl #4
    73a0:	00000835 	andeq	r0, r0, r5, lsr r8
    73a4:	09f51788 	ldmibeq	r5!, {r3, r7, r8, r9, sl, ip}^
    73a8:	93040000 	movwls	r0, #16384	; 0x4000
    73ac:	00250f02 	eoreq	r0, r5, r2, lsl #30
    73b0:	17a00000 	strne	r0, [r0, r0]!
    73b4:	00000753 	andeq	r0, r0, r3, asr r7
    73b8:	16029404 	strne	r9, [r2], -r4, lsl #8
    73bc:	000000fe 	strdeq	r0, [r0], -lr
    73c0:	069917a4 	ldreq	r1, [r9], r4, lsr #15
    73c4:	95040000 	strls	r0, [r4, #-0]
    73c8:	00fe1602 	rscseq	r1, lr, r2, lsl #12
    73cc:	17ac0000 	strne	r0, [ip, r0]!
    73d0:	00000742 	andeq	r0, r0, r2, asr #14
    73d4:	16029604 	strne	r9, [r2], -r4, lsl #12
    73d8:	000000fe 	strdeq	r0, [r0], -lr
    73dc:	064017b4 			; <UNDEFINED> instruction: 0x064017b4
    73e0:	97040000 	strls	r0, [r4, -r0]
    73e4:	00fe1602 	rscseq	r1, lr, r2, lsl #12
    73e8:	17bc0000 	ldrne	r0, [ip, r0]!
    73ec:	0000064f 	andeq	r0, r0, pc, asr #12
    73f0:	16029804 	strne	r9, [r2], -r4, lsl #16
    73f4:	000000fe 	strdeq	r0, [r0], -lr
    73f8:	08b217c4 	ldmeq	r2!, {r2, r6, r7, r8, r9, sl, ip}
    73fc:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    7400:	00250802 	eoreq	r0, r5, r2, lsl #16
    7404:	00cc0000 	sbceq	r0, ip, r0
    7408:	0005c609 	andeq	ip, r5, r9, lsl #12
    740c:	00082500 	andeq	r2, r8, r0, lsl #10
    7410:	00380a00 	eorseq	r0, r8, r0, lsl #20
    7414:	00190000 	andseq	r0, r9, r0
    7418:	0005c609 	andeq	ip, r5, r9, lsl #12
    741c:	00083500 	andeq	r3, r8, r0, lsl #10
    7420:	00380a00 	eorseq	r0, r8, r0, lsl #20
    7424:	00070000 	andeq	r0, r7, r0
    7428:	0005c609 	andeq	ip, r5, r9, lsl #12
    742c:	00084500 	andeq	r4, r8, r0, lsl #10
    7430:	00380a00 	eorseq	r0, r8, r0, lsl #20
    7434:	00170000 	andseq	r0, r7, r0
    7438:	9e04f01b 	mcrls	0, 0, pc, cr4, cr11, {0}	; <UNPREDICTABLE>
    743c:	086c0702 	stmdaeq	ip!, {r1, r8, r9, sl}^
    7440:	54170000 	ldrpl	r0, [r7], #-0
    7444:	04000008 	streq	r0, [r0], #-8
    7448:	6c1b02a1 	lfmvs	f0, 4, [fp], {161}	; 0xa1
    744c:	00000008 	andeq	r0, r0, r8
    7450:	000a4717 	andeq	r4, sl, r7, lsl r7
    7454:	02a20400 	adceq	r0, r2, #0, 8
    7458:	00087c18 	andeq	r7, r8, r8, lsl ip
    745c:	09007800 	stmdbeq	r0, {fp, ip, sp, lr}
    7460:	00000300 	andeq	r0, r0, r0, lsl #6
    7464:	0000087c 	andeq	r0, r0, ip, ror r8
    7468:	0000380a 	andeq	r3, r0, sl, lsl #16
    746c:	09001d00 	stmdbeq	r0, {r8, sl, fp, ip}
    7470:	00000038 	andeq	r0, r0, r8, lsr r0
    7474:	0000088c 	andeq	r0, r0, ip, lsl #17
    7478:	0000380a 	andeq	r3, r0, sl, lsl #16
    747c:	1c001d00 	stcne	13, cr1, [r0], {-0}
    7480:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
    7484:	0008b103 	andeq	fp, r8, r3, lsl #2
    7488:	0a761d00 	beq	1d8e890 <__bss_end+0x1d78d40>
    748c:	9a040000 	bls	107494 <__bss_end+0xf1944>
    7490:	07000b02 	streq	r0, [r0, -r2, lsl #22]
    7494:	831d0000 	tsthi	sp, #0
    7498:	0400000a 	streq	r0, [r0], #-10
    749c:	450b02a3 	strmi	r0, [fp, #-675]	; 0xfffffd5d
    74a0:	00000008 	andeq	r0, r0, r8
    74a4:	0005c609 	andeq	ip, r5, r9, lsl #12
    74a8:	0008c100 	andeq	ip, r8, r0, lsl #2
    74ac:	00380a00 	eorseq	r0, r8, r0, lsl #20
    74b0:	00180000 	andseq	r0, r8, r0
    74b4:	0006801e 	andeq	r8, r6, lr, lsl r0
    74b8:	c1041000 	mrsgt	r1, (UNDEF: 4)
    74bc:	1f000008 	svcne	0x00000008
    74c0:	000008d7 	ldrdeq	r0, [r0], -r7
    74c4:	00046715 	andeq	r6, r4, r5, lsl r7
    74c8:	04100000 	ldreq	r0, [r0], #-0
    74cc:	000008cc 	andeq	r0, r0, ip, asr #17
    74d0:	018a0410 	orreq	r0, sl, r0, lsl r4
    74d4:	ee1f0000 	cdp	0, 1, cr0, cr15, cr0, {0}
    74d8:	15000008 	strne	r0, [r0, #-8]
    74dc:	00000025 	andeq	r0, r0, r5, lsr #32
    74e0:	f4041000 	vst4.8	{d1-d4}, [r4], r0
    74e4:	10000008 	andne	r0, r0, r8
    74e8:	0008e304 	andeq	lr, r8, r4, lsl #6
    74ec:	06650900 	strbteq	r0, [r5], -r0, lsl #18
    74f0:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    74f4:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    74f8:	02000000 	andeq	r0, r0, #0
    74fc:	0a092000 	beq	24f504 <__bss_end+0x2399b4>
    7500:	33040000 	movwcc	r0, #16384	; 0x4000
    7504:	04671703 	strbteq	r1, [r7], #-1795	; 0xfffff8fd
    7508:	02200000 	eoreq	r0, r0, #0
    750c:	0400000a 	streq	r0, [r0], #-10
    7510:	6d1d0334 	ldcvs	3, cr0, [sp, #-208]	; 0xffffff30
    7514:	21000004 	tstcs	r0, r4
    7518:	00001de2 	andeq	r1, r0, r2, ror #27
    751c:	bb082c06 	bllt	21253c <__bss_end+0x1fc9ec>
    7520:	4c000005 	stcmi	0, cr0, [r0], {5}
    7524:	e8000146 	stmda	r0, {r1, r2, r6, r8}
    7528:	01000000 	mrseq	r0, (UNDEF: 0)
    752c:	0009c59c 	muleq	r9, ip, r5
    7530:	19df2200 	ldmibne	pc, {r9, sp}^	; <UNPREDICTABLE>
    7534:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    7538:	0005c11b 	andeq	ip, r5, fp, lsl r1
    753c:	23500100 	cmpcs	r0, #0, 2
    7540:	00001d44 	andeq	r1, r0, r4, asr #26
    7544:	fc193f01 	ldc2	15, cr3, [r9], {1}
    7548:	98000005 	stmdals	r0, {r0, r2}
    754c:	90000004 	andls	r0, r0, r4
    7550:	23000004 	movwcs	r0, #4
    7554:	00000989 	andeq	r0, r0, r9, lsl #19
    7558:	2c094001 	stccs	0, cr4, [r9], {1}
    755c:	e2000000 	and	r0, r0, #0
    7560:	d2000004 	andle	r0, r0, #4
    7564:	24000004 	strcs	r0, [r0], #-4
    7568:	00747364 	rsbseq	r7, r4, r4, ror #6
    756c:	bb095301 	bllt	25c178 <__bss_end+0x246628>
    7570:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    7574:	50000005 	andpl	r0, r0, r5
    7578:	24000005 	strcs	r0, [r0], #-5
    757c:	00637273 	rsbeq	r7, r3, r3, ror r2
    7580:	f60f5401 			; <UNDEFINED> instruction: 0xf60f5401
    7584:	bd000005 	stclt	0, cr0, [r0, #-20]	; 0xffffffec
    7588:	b5000005 	strlt	r0, [r0, #-5]
    758c:	25000005 	strcs	r0, [r0, #-5]
    7590:	000019e4 	andeq	r1, r0, r4, ror #19
    7594:	c5095501 	strgt	r5, [r9, #-1281]	; 0xfffffaff
    7598:	f9000009 			; <UNDEFINED> instruction: 0xf9000009
    759c:	f3000005 	vhadd.u8	d0, d0, d5
    75a0:	25000005 	strcs	r0, [r0, #-5]
    75a4:	00001d23 	andeq	r1, r0, r3, lsr #26
    75a8:	cb0f5601 	blgt	3dcdb4 <__bss_end+0x3c7264>
    75ac:	28000009 	stmdacs	r0, {r0, r3}
    75b0:	24000006 	strcs	r0, [r0], #-6
    75b4:	00000006 	andeq	r0, r0, r6
    75b8:	00760410 	rsbseq	r0, r6, r0, lsl r4
    75bc:	04100000 	ldreq	r0, [r0], #-0
    75c0:	0000007d 	andeq	r0, r0, sp, ror r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end+0x2aa55c>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end+0xe6dcf0>
      30:	0b390b3b 	bleq	e42d24 <__bss_end+0xe2d1d4>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	0b000f05 	bleq	3c54 <_start-0x43ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	01150600 	tsteq	r5, r0, lsl #12
      44:	13011927 	movwne	r1, #6439	; 0x1927
      48:	05070000 	streq	r0, [r7, #-0]
      4c:	00134900 	andseq	r4, r3, r0, lsl #18
      50:	000f0800 	andeq	r0, pc, r0, lsl #16
      54:	00000b0b 	andeq	r0, r0, fp, lsl #22
      58:	03011309 	movweq	r1, #4873	; 0x1309
      5c:	3a0b0b0e 	bcc	2c2c9c <__bss_end+0x2ad14c>
      60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      64:	0013010b 	andseq	r0, r3, fp, lsl #2
      68:	000d0a00 	andeq	r0, sp, r0, lsl #20
      6c:	0b3a0803 	bleq	e82080 <__bss_end+0xe6c530>
      70:	0b390b3b 	bleq	e42d64 <__bss_end+0xe2d214>
      74:	0b381349 	bleq	e04da0 <__bss_end+0xdef250>
      78:	350b0000 	strcc	r0, [fp, #-0]
      7c:	00134900 	andseq	r4, r3, r0, lsl #18
      80:	00340c00 	eorseq	r0, r4, r0, lsl #24
      84:	0b3a0e03 	bleq	e83898 <__bss_end+0xe6dd48>
      88:	0b390b3b 	bleq	e42d7c <__bss_end+0xe2d22c>
      8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      90:	260d0000 	strcs	r0, [sp], -r0
      94:	00134900 	andseq	r4, r3, r0, lsl #18
      98:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
      9c:	0b3a0e03 	bleq	e838b0 <__bss_end+0xe6dd60>
      a0:	0b390b3b 	bleq	e42d94 <__bss_end+0xe2d244>
      a4:	01111927 	tsteq	r1, r7, lsr #18
      a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
      b0:	0f000013 	svceq	0x00000013
      b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      b8:	0b3a0e03 	bleq	e838cc <__bss_end+0xe6dd7c>
      bc:	0b390b3b 	bleq	e42db0 <__bss_end+0xe2d260>
      c0:	01111927 	tsteq	r1, r7, lsr #18
      c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
      cc:	10000013 	andne	r0, r0, r3, lsl r0
      d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
      d4:	0b3b0b3a 	bleq	ec2dc4 <__bss_end+0xead274>
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	00001802 	andeq	r1, r0, r2, lsl #16
      e0:	3f002e11 	svccc	0x00002e11
      e4:	3a0e0319 	bcc	380d50 <__bss_end+0x36b200>
      e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	1119270b 	tstne	r9, fp, lsl #14
      f0:	40061201 	andmi	r1, r6, r1, lsl #4
      f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
      fc:	03193f00 	tsteq	r9, #0, 30
     100:	3b0b3a0e 	blcc	2ce940 <__bss_end+0x2b8df0>
     104:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     108:	11134919 	tstne	r3, r9, lsl r9
     10c:	40061201 	andmi	r1, r6, r1, lsl #4
     110:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     114:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     118:	03193f01 	tsteq	r9, #1, 30
     11c:	3b0b3a0e 	blcc	2ce95c <__bss_end+0x2b8e0c>
     120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     124:	11134919 	tstne	r3, r9, lsl r9
     128:	40061201 	andmi	r1, r6, r1, lsl #4
     12c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     130:	01000000 	mrseq	r0, (UNDEF: 0)
     134:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     138:	0e030b13 	vmoveq.32	d3[0], r0
     13c:	01110e1b 	tsteq	r1, fp, lsl lr
     140:	17100612 			; <UNDEFINED> instruction: 0x17100612
     144:	24020000 	strcs	r0, [r2], #-0
     148:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     14c:	0008030b 	andeq	r0, r8, fp, lsl #6
     150:	00240300 	eoreq	r0, r4, r0, lsl #6
     154:	0b3e0b0b 	bleq	f82d88 <__bss_end+0xf6d238>
     158:	00000e03 	andeq	r0, r0, r3, lsl #28
     15c:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     160:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     164:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     168:	0b3b0b3a 	bleq	ec2e58 <__bss_end+0xead308>
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
     170:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     174:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     178:	03193f00 	tsteq	r9, #0, 30
     17c:	3b0b3a0e 	blcc	2ce9bc <__bss_end+0x2b8e6c>
     180:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     188:	97184006 	ldrls	r4, [r8, -r6]
     18c:	00001942 	andeq	r1, r0, r2, asr #18
     190:	3f012e07 	svccc	0x00012e07
     194:	3a0e0319 	bcc	380e00 <__bss_end+0x36b2b0>
     198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     19c:	1119270b 	tstne	r9, fp, lsl #14
     1a0:	40061201 	andmi	r1, r6, r1, lsl #4
     1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     1a8:	00001301 	andeq	r1, r0, r1, lsl #6
     1ac:	11010b08 	tstne	r1, r8, lsl #22
     1b0:	01061201 	tsteq	r6, r1, lsl #4
     1b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     1b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1bc:	0b3b0b3a 	bleq	ec2eac <__bss_end+0xead35c>
     1c0:	13490b39 	movtne	r0, #39737	; 0x9b39
     1c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1c8:	0b0a0000 	bleq	2801d0 <__bss_end+0x26a680>
     1cc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1d0:	0b000006 	bleq	1f0 <_start-0x7e10>
     1d4:	0b0b000f 	bleq	2c0218 <__bss_end+0x2aa6c8>
     1d8:	00001349 	andeq	r1, r0, r9, asr #6
     1dc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1e0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1e8:	0b3b0b3a 	bleq	ec2ed8 <__bss_end+0xead388>
     1ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f8:	00130119 	andseq	r0, r3, r9, lsl r1
     1fc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end+0xead3a4>
     208:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     214:	00000019 	andeq	r0, r0, r9, lsl r0
     218:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     21c:	030b130e 	movweq	r1, #45838	; 0xb30e
     220:	110e1b0e 	tstne	lr, lr, lsl #22
     224:	10061201 	andne	r1, r6, r1, lsl #4
     228:	02000017 	andeq	r0, r0, #23
     22c:	0b0b0024 	bleq	2c02c4 <__bss_end+0x2aa774>
     230:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     234:	24030000 	strcs	r0, [r3], #-0
     238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     23c:	000e030b 	andeq	r0, lr, fp, lsl #6
     240:	000f0400 	andeq	r0, pc, r0, lsl #8
     244:	00000b0b 	andeq	r0, r0, fp, lsl #22
     248:	03001605 	movweq	r1, #1541	; 0x605
     24c:	3b0b3a0e 	blcc	2cea8c <__bss_end+0x2b8f3c>
     250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     254:	06000013 			; <UNDEFINED> instruction: 0x06000013
     258:	13490035 	movtne	r0, #36917	; 0x9035
     25c:	13070000 	movwne	r0, #28672	; 0x7000
     260:	0b0e0301 	bleq	380e6c <__bss_end+0x36b31c>
     264:	3b0b3a0b 	blcc	2cea98 <__bss_end+0x2b8f48>
     268:	010b390b 	tsteq	fp, fp, lsl #18
     26c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     274:	0b3b0b3a 	bleq	ec2f64 <__bss_end+0xead414>
     278:	13490b39 	movtne	r0, #39737	; 0x9b39
     27c:	00000b38 	andeq	r0, r0, r8, lsr fp
     280:	0b000f09 	bleq	3eac <_start-0x4154>
     284:	0013490b 	andseq	r4, r3, fp, lsl #18
     288:	00260a00 	eoreq	r0, r6, r0, lsl #20
     28c:	00001349 	andeq	r1, r0, r9, asr #6
     290:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     294:	00130119 	andseq	r0, r3, r9, lsl r1
     298:	00050c00 	andeq	r0, r5, r0, lsl #24
     29c:	00001349 	andeq	r1, r0, r9, asr #6
     2a0:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     2a4:	00130113 	andseq	r0, r3, r3, lsl r1
     2a8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     2ac:	0b2f1349 	bleq	bc4fd8 <__bss_end+0xbaf488>
     2b0:	340f0000 	strcc	r0, [pc], #-0	; 2b8 <_start-0x7d48>
     2b4:	3a0e0300 	bcc	380ebc <__bss_end+0x36b36c>
     2b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2c0:	10000018 	andne	r0, r0, r8, lsl r0
     2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__bss_end+0xead468>
     2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     2d0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2d4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2d8:	03193f01 	tsteq	r9, #1, 30
     2dc:	3b0b3a0e 	blcc	2ceb1c <__bss_end+0x2b8fcc>
     2e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     2e4:	11134919 	tstne	r3, r9, lsl r9
     2e8:	40061201 	andmi	r1, r6, r1, lsl #4
     2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f0:	00001301 	andeq	r1, r0, r1, lsl #6
     2f4:	03000512 	movweq	r0, #1298	; 0x512
     2f8:	3b0b3a0e 	blcc	2ceb38 <__bss_end+0x2b8fe8>
     2fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     300:	00180213 	andseq	r0, r8, r3, lsl r2
     304:	00341300 	eorseq	r1, r4, r0, lsl #6
     308:	0b3a0e03 	bleq	e83b1c <__bss_end+0xe6dfcc>
     30c:	0b39053b 	bleq	e41800 <__bss_end+0xe2bcb0>
     310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     314:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     318:	3a0e0301 	bcc	380f24 <__bss_end+0x36b3d4>
     31c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     320:	1119270b 	tstne	r9, fp, lsl #14
     324:	40061201 	andmi	r1, r6, r1, lsl #4
     328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     32c:	00001301 	andeq	r1, r0, r1, lsl #6
     330:	3f012e15 	svccc	0x00012e15
     334:	3a0e0319 	bcc	380fa0 <__bss_end+0x36b450>
     338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	1119270b 	tstne	r9, fp, lsl #14
     340:	40061201 	andmi	r1, r6, r1, lsl #4
     344:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     348:	00001301 	andeq	r1, r0, r1, lsl #6
     34c:	11010b16 	tstne	r1, r6, lsl fp
     350:	00061201 	andeq	r1, r6, r1, lsl #4
     354:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     358:	0b3a0e03 	bleq	e83b6c <__bss_end+0xe6e01c>
     35c:	0b390b3b 	bleq	e43050 <__bss_end+0xe2d500>
     360:	01111927 	tsteq	r1, r7, lsr #18
     364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     368:	01194296 			; <UNDEFINED> instruction: 0x01194296
     36c:	18000013 	stmdane	r0, {r0, r1, r4}
     370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     374:	0b3a0e03 	bleq	e83b88 <__bss_end+0xe6e038>
     378:	0b390b3b 	bleq	e4306c <__bss_end+0xe2d51c>
     37c:	01111927 	tsteq	r1, r7, lsr #18
     380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     384:	01194296 			; <UNDEFINED> instruction: 0x01194296
     388:	19000013 	stmdbne	r0, {r0, r1, r4}
     38c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     390:	0b3b0b3a 	bleq	ec3080 <__bss_end+0xead530>
     394:	13490b39 	movtne	r0, #39737	; 0x9b39
     398:	00001802 	andeq	r1, r0, r2, lsl #16
     39c:	3f012e1a 	svccc	0x00012e1a
     3a0:	3a0e0319 	bcc	38100c <__bss_end+0x36b4bc>
     3a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3b0:	96184006 	ldrls	r4, [r8], -r6
     3b4:	00001942 	andeq	r1, r0, r2, asr #18
     3b8:	01110100 	tsteq	r1, r0, lsl #2
     3bc:	0b130e25 	bleq	4c3c58 <__bss_end+0x4ae108>
     3c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c8:	00001710 	andeq	r1, r0, r0, lsl r7
     3cc:	0b002402 	bleq	93dc <__module_entries_end+0x1338>
     3d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     3d4:	0300000e 	movweq	r0, #14
     3d8:	0b0b0024 	bleq	2c0470 <__bss_end+0x2aa920>
     3dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3e0:	16040000 	strne	r0, [r4], -r0
     3e4:	3a0e0300 	bcc	380fec <__bss_end+0x36b49c>
     3e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3ec:	0013490b 	andseq	r4, r3, fp, lsl #18
     3f0:	00350500 	eorseq	r0, r5, r0, lsl #10
     3f4:	00001349 	andeq	r1, r0, r9, asr #6
     3f8:	03001606 	movweq	r1, #1542	; 0x606
     3fc:	3b0b3a0e 	blcc	2cec3c <__bss_end+0x2b90ec>
     400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     404:	07000013 	smladeq	r0, r3, r0, r0
     408:	0b0b0117 	bleq	2c086c <__bss_end+0x2aad1c>
     40c:	0b3b0b3a 	bleq	ec30fc <__bss_end+0xead5ac>
     410:	13010b39 	movwne	r0, #6969	; 0x1b39
     414:	0d080000 	stceq	0, cr0, [r8, #-0]
     418:	3a0e0300 	bcc	381020 <__bss_end+0x36b4d0>
     41c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     420:	0013490b 	andseq	r4, r3, fp, lsl #18
     424:	01010900 	tsteq	r1, r0, lsl #18
     428:	13011349 	movwne	r1, #4937	; 0x1349
     42c:	210a0000 	mrscs	r0, (UNDEF: 10)
     430:	2f134900 	svccs	0x00134900
     434:	0b00000b 	bleq	468 <_start-0x7b98>
     438:	0b0b0113 	bleq	2c088c <__bss_end+0x2aad3c>
     43c:	0b3b0b3a 	bleq	ec312c <__bss_end+0xead5dc>
     440:	13010b39 	movwne	r0, #6969	; 0x1b39
     444:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     448:	3a0e0300 	bcc	381050 <__bss_end+0x36b500>
     44c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     454:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     458:	0b0b000f 	bleq	2c049c <__bss_end+0x2aa94c>
     45c:	130e0000 	movwne	r0, #57344	; 0xe000
     460:	0b0e0301 	bleq	38106c <__bss_end+0x36b51c>
     464:	3b0b3a0b 	blcc	2cec98 <__bss_end+0x2b9148>
     468:	010b390b 	tsteq	fp, fp, lsl #18
     46c:	0f000013 	svceq	0x00000013
     470:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     474:	0b3b0b3a 	bleq	ec3164 <__bss_end+0xead614>
     478:	13490b39 	movtne	r0, #39737	; 0x9b39
     47c:	00000b38 	andeq	r0, r0, r8, lsr fp
     480:	0b000f10 	bleq	40c8 <_start-0x3f38>
     484:	0013490b 	andseq	r4, r3, fp, lsl #18
     488:	01131100 	tsteq	r3, r0, lsl #2
     48c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     490:	0b3b0b3a 	bleq	ec3180 <__bss_end+0xead630>
     494:	13010b39 	movwne	r0, #6969	; 0x1b39
     498:	0d120000 	ldceq	0, cr0, [r2, #-0]
     49c:	3a0e0300 	bcc	3810a4 <__bss_end+0x36b554>
     4a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     4a8:	13000005 	movwne	r0, #5
     4ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
     4b0:	15140000 	ldrne	r0, [r4, #-0]
     4b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     4b8:	00130113 	andseq	r0, r3, r3, lsl r1
     4bc:	00051500 	andeq	r1, r5, r0, lsl #10
     4c0:	00001349 	andeq	r1, r0, r9, asr #6
     4c4:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
     4c8:	17000013 	smladne	r0, r3, r0, r0
     4cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     4d0:	0b3a050b 	bleq	e81904 <__bss_end+0xe6bdb4>
     4d4:	0b39053b 	bleq	e419c8 <__bss_end+0xe2be78>
     4d8:	00001301 	andeq	r1, r0, r1, lsl #6
     4dc:	03000d18 	movweq	r0, #3352	; 0xd18
     4e0:	3b0b3a0e 	blcc	2ced20 <__bss_end+0x2b91d0>
     4e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     4e8:	000b3813 	andeq	r3, fp, r3, lsl r8
     4ec:	000d1900 	andeq	r1, sp, r0, lsl #18
     4f0:	0b3a0e03 	bleq	e83d04 <__bss_end+0xe6e1b4>
     4f4:	0b39053b 	bleq	e419e8 <__bss_end+0xe2be98>
     4f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     4fc:	131a0000 	tstne	sl, #0
     500:	0b0e0301 	bleq	38110c <__bss_end+0x36b5bc>
     504:	3b0b3a0b 	blcc	2ced38 <__bss_end+0x2b91e8>
     508:	010b3905 	tsteq	fp, r5, lsl #18
     50c:	1b000013 	blne	560 <_start-0x7aa0>
     510:	0b0b0113 	bleq	2c0964 <__bss_end+0x2aae14>
     514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     518:	13010b39 	movwne	r0, #6969	; 0x1b39
     51c:	171c0000 	ldrne	r0, [ip, -r0]
     520:	3a0b0b01 	bcc	2c312c <__bss_end+0x2ad5dc>
     524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     528:	0013010b 	andseq	r0, r3, fp, lsl #2
     52c:	000d1d00 	andeq	r1, sp, r0, lsl #26
     530:	0b3a0e03 	bleq	e83d44 <__bss_end+0xe6e1f4>
     534:	0b39053b 	bleq	e41a28 <__bss_end+0xe2bed8>
     538:	00001349 	andeq	r1, r0, r9, asr #6
     53c:	0300131e 	movweq	r1, #798	; 0x31e
     540:	00193c0e 	andseq	r3, r9, lr, lsl #24
     544:	01151f00 	tsteq	r5, r0, lsl #30
     548:	13011927 	movwne	r1, #6439	; 0x1927
     54c:	34200000 	strtcc	r0, [r0], #-0
     550:	3a0e0300 	bcc	381158 <__bss_end+0x36b608>
     554:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     558:	3f13490b 	svccc	0x0013490b
     55c:	00193c19 	andseq	r3, r9, r9, lsl ip
     560:	00342100 	eorseq	r2, r4, r0, lsl #2
     564:	0b3a0e03 	bleq	e83d78 <__bss_end+0xe6e228>
     568:	0b390b3b 	bleq	e4325c <__bss_end+0xe2d70c>
     56c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     570:	0000193c 	andeq	r1, r0, ip, lsr r9
     574:	3f012e22 	svccc	0x00012e22
     578:	3a0e0319 	bcc	3811e4 <__bss_end+0x36b694>
     57c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     580:	1119270b 	tstne	r9, fp, lsl #14
     584:	40061201 	andmi	r1, r6, r1, lsl #4
     588:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     58c:	00001301 	andeq	r1, r0, r1, lsl #6
     590:	03000523 	movweq	r0, #1315	; 0x523
     594:	3b0b3a0e 	blcc	2cedd4 <__bss_end+0x2b9284>
     598:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     59c:	00180213 	andseq	r0, r8, r3, lsl r2
     5a0:	00342400 	eorseq	r2, r4, r0, lsl #8
     5a4:	0b3a0e03 	bleq	e83db8 <__bss_end+0xe6e268>
     5a8:	0b390b3b 	bleq	e4329c <__bss_end+0xe2d74c>
     5ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     5b0:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     5b4:	03193f01 	tsteq	r9, #1, 30
     5b8:	3b0b3a0e 	blcc	2cedf8 <__bss_end+0x2b92a8>
     5bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     5c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     5c4:	97184006 	ldrls	r4, [r8, -r6]
     5c8:	00001942 	andeq	r1, r0, r2, asr #18
     5cc:	01110100 	tsteq	r1, r0, lsl #2
     5d0:	0b130e25 	bleq	4c3e6c <__bss_end+0x4ae31c>
     5d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5dc:	00001710 	andeq	r1, r0, r0, lsl r7
     5e0:	03001602 	movweq	r1, #1538	; 0x602
     5e4:	3b0b3a0e 	blcc	2cee24 <__bss_end+0x2b92d4>
     5e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     5ec:	03000013 	movweq	r0, #19
     5f0:	0b0b0024 	bleq	2c0688 <__bss_end+0x2aab38>
     5f4:	0e030b3e 	vmoveq.16	d3[0], r0
     5f8:	24040000 	strcs	r0, [r4], #-0
     5fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     600:	0008030b 	andeq	r0, r8, fp, lsl #6
     604:	00160500 	andseq	r0, r6, r0, lsl #10
     608:	0b3a0e03 	bleq	e83e1c <__bss_end+0xe6e2cc>
     60c:	0b39053b 	bleq	e41b00 <__bss_end+0xe2bfb0>
     610:	00001349 	andeq	r1, r0, r9, asr #6
     614:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     618:	07000013 	smladeq	r0, r3, r0, r0
     61c:	0b0b0117 	bleq	2c0a80 <__bss_end+0x2aaf30>
     620:	0b3b0b3a 	bleq	ec3310 <__bss_end+0xead7c0>
     624:	13010b39 	movwne	r0, #6969	; 0x1b39
     628:	0d080000 	stceq	0, cr0, [r8, #-0]
     62c:	3a0e0300 	bcc	381234 <__bss_end+0x36b6e4>
     630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     634:	0013490b 	andseq	r4, r3, fp, lsl #18
     638:	01010900 	tsteq	r1, r0, lsl #18
     63c:	13011349 	movwne	r1, #4937	; 0x1349
     640:	210a0000 	mrscs	r0, (UNDEF: 10)
     644:	2f134900 	svccs	0x00134900
     648:	0b00000b 	bleq	67c <_start-0x7984>
     64c:	0b0b0113 	bleq	2c0aa0 <__bss_end+0x2aaf50>
     650:	0b3b0b3a 	bleq	ec3340 <__bss_end+0xead7f0>
     654:	13010b39 	movwne	r0, #6969	; 0x1b39
     658:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     65c:	3a0e0300 	bcc	381264 <__bss_end+0x36b714>
     660:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     664:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     668:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     66c:	0b0b000f 	bleq	2c06b0 <__bss_end+0x2aab60>
     670:	260e0000 	strcs	r0, [lr], -r0
     674:	00134900 	andseq	r4, r3, r0, lsl #18
     678:	01130f00 	tsteq	r3, r0, lsl #30
     67c:	0b0b0e03 	bleq	2c3e90 <__bss_end+0x2ae340>
     680:	0b3b0b3a 	bleq	ec3370 <__bss_end+0xead820>
     684:	13010b39 	movwne	r0, #6969	; 0x1b39
     688:	0d100000 	ldceq	0, cr0, [r0, #-0]
     68c:	3a080300 	bcc	201294 <__bss_end+0x1eb744>
     690:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     694:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     698:	1100000b 	tstne	r0, fp
     69c:	0b0b000f 	bleq	2c06e0 <__bss_end+0x2aab90>
     6a0:	00001349 	andeq	r1, r0, r9, asr #6
     6a4:	03011312 	movweq	r1, #4882	; 0x1312
     6a8:	3a050b0e 	bcc	1432e8 <__bss_end+0x12d798>
     6ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6b0:	0013010b 	andseq	r0, r3, fp, lsl #2
     6b4:	000d1300 	andeq	r1, sp, r0, lsl #6
     6b8:	0b3a0e03 	bleq	e83ecc <__bss_end+0xe6e37c>
     6bc:	0b390b3b 	bleq	e433b0 <__bss_end+0xe2d860>
     6c0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     6c4:	15140000 	ldrne	r0, [r4, #-0]
     6c8:	00192700 	andseq	r2, r9, r0, lsl #14
     6cc:	01151500 	tsteq	r5, r0, lsl #10
     6d0:	13491927 	movtne	r1, #39207	; 0x9927
     6d4:	00001301 	andeq	r1, r0, r1, lsl #6
     6d8:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     6dc:	17000013 	smladne	r0, r3, r0, r0
     6e0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     6e4:	0b3a050b 	bleq	e81b18 <__bss_end+0xe6bfc8>
     6e8:	0b39053b 	bleq	e41bdc <__bss_end+0xe2c08c>
     6ec:	00001301 	andeq	r1, r0, r1, lsl #6
     6f0:	03000d18 	movweq	r0, #3352	; 0xd18
     6f4:	3b0b3a0e 	blcc	2cef34 <__bss_end+0x2b93e4>
     6f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6fc:	000b3813 	andeq	r3, fp, r3, lsl r8
     700:	000d1900 	andeq	r1, sp, r0, lsl #18
     704:	0b3a0e03 	bleq	e83f18 <__bss_end+0xe6e3c8>
     708:	0b39053b 	bleq	e41bfc <__bss_end+0xe2c0ac>
     70c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     710:	131a0000 	tstne	sl, #0
     714:	0b0e0301 	bleq	381320 <__bss_end+0x36b7d0>
     718:	3b0b3a0b 	blcc	2cef4c <__bss_end+0x2b93fc>
     71c:	010b3905 	tsteq	fp, r5, lsl #18
     720:	1b000013 	blne	774 <_start-0x788c>
     724:	0b0b0113 	bleq	2c0b78 <__bss_end+0x2ab028>
     728:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     72c:	13010b39 	movwne	r0, #6969	; 0x1b39
     730:	171c0000 	ldrne	r0, [ip, -r0]
     734:	3a0b0b01 	bcc	2c3340 <__bss_end+0x2ad7f0>
     738:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     73c:	0013010b 	andseq	r0, r3, fp, lsl #2
     740:	000d1d00 	andeq	r1, sp, r0, lsl #26
     744:	0b3a0e03 	bleq	e83f58 <__bss_end+0xe6e408>
     748:	0b39053b 	bleq	e41c3c <__bss_end+0xe2c0ec>
     74c:	00001349 	andeq	r1, r0, r9, asr #6
     750:	0300131e 	movweq	r1, #798	; 0x31e
     754:	00193c0e 	andseq	r3, r9, lr, lsl #24
     758:	01151f00 	tsteq	r5, r0, lsl #30
     75c:	13011927 	movwne	r1, #6439	; 0x1927
     760:	34200000 	strtcc	r0, [r0], #-0
     764:	3a0e0300 	bcc	38136c <__bss_end+0x36b81c>
     768:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     76c:	3f13490b 	svccc	0x0013490b
     770:	00193c19 	andseq	r3, r9, r9, lsl ip
     774:	00262100 	eoreq	r2, r6, r0, lsl #2
     778:	34220000 	strtcc	r0, [r2], #-0
     77c:	3a0e0300 	bcc	381384 <__bss_end+0x36b834>
     780:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     784:	3f13490b 	svccc	0x0013490b
     788:	00193c19 	andseq	r3, r9, r9, lsl ip
     78c:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
     790:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     794:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     798:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     79c:	01111349 	tsteq	r1, r9, asr #6
     7a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     7a8:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
     7ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     7b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7b4:	13490b39 	movtne	r0, #39737	; 0x9b39
     7b8:	00001802 	andeq	r1, r0, r2, lsl #16
     7bc:	03003425 	movweq	r3, #1061	; 0x425
     7c0:	3b0b3a0e 	blcc	2cf000 <__bss_end+0x2b94b0>
     7c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     7c8:	00180213 	andseq	r0, r8, r3, lsl r2
     7cc:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     7d0:	0b3a0e03 	bleq	e83fe4 <__bss_end+0xe6e494>
     7d4:	0b39053b 	bleq	e41cc8 <__bss_end+0xe2c178>
     7d8:	13491927 	movtne	r1, #39207	; 0x9927
     7dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     7e4:	00130119 	andseq	r0, r3, r9, lsl r1
     7e8:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     7ec:	0b3a0e03 	bleq	e84000 <__bss_end+0xe6e4b0>
     7f0:	0b39053b 	bleq	e41ce4 <__bss_end+0xe2c194>
     7f4:	01111927 	tsteq	r1, r7, lsr #18
     7f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     7fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     800:	28000013 	stmdacs	r0, {r0, r1, r4}
     804:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     808:	0b3a0e03 	bleq	e8401c <__bss_end+0xe6e4cc>
     80c:	0b39053b 	bleq	e41d00 <__bss_end+0xe2c1b0>
     810:	01111927 	tsteq	r1, r7, lsr #18
     814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     818:	01194296 			; <UNDEFINED> instruction: 0x01194296
     81c:	29000013 	stmdbcs	r0, {r0, r1, r4}
     820:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     824:	0b3a0e03 	bleq	e84038 <__bss_end+0xe6e4e8>
     828:	0b39053b 	bleq	e41d1c <__bss_end+0xe2c1cc>
     82c:	13491927 	movtne	r1, #39207	; 0x9927
     830:	06120111 			; <UNDEFINED> instruction: 0x06120111
     834:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     838:	00130119 	andseq	r0, r3, r9, lsl r1
     83c:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     840:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     844:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     848:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     84c:	01111349 	tsteq	r1, r9, asr #6
     850:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     854:	00194296 	mulseq	r9, r6, r2
     858:	11010000 	mrsne	r0, (UNDEF: 1)
     85c:	130e2501 	movwne	r2, #58625	; 0xe501
     860:	1b0e030b 	blne	381494 <__bss_end+0x36b944>
     864:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     868:	00171006 	andseq	r1, r7, r6
     86c:	00240200 	eoreq	r0, r4, r0, lsl #4
     870:	0b3e0b0b 	bleq	f834a4 <__bss_end+0xf6d954>
     874:	00000e03 	andeq	r0, r0, r3, lsl #28
     878:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
     87c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     880:	13490035 	movtne	r0, #36917	; 0x9035
     884:	24050000 	strcs	r0, [r5], #-0
     888:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     88c:	0008030b 	andeq	r0, r8, fp, lsl #6
     890:	00160600 	andseq	r0, r6, r0, lsl #12
     894:	0b3a0e03 	bleq	e840a8 <__bss_end+0xe6e558>
     898:	0b390b3b 	bleq	e4358c <__bss_end+0xe2da3c>
     89c:	00001349 	andeq	r1, r0, r9, asr #6
     8a0:	0b000f07 	bleq	44c4 <_start-0x3b3c>
     8a4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     8a8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     8ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8b0:	13490b39 	movtne	r0, #39737	; 0x9b39
     8b4:	17090000 	strne	r0, [r9, -r0]
     8b8:	3a0b0b01 	bcc	2c34c4 <__bss_end+0x2ad974>
     8bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     8c4:	000d0a00 	andeq	r0, sp, r0, lsl #20
     8c8:	0b3a0e03 	bleq	e840dc <__bss_end+0xe6e58c>
     8cc:	0b390b3b 	bleq	e435c0 <__bss_end+0xe2da70>
     8d0:	00001349 	andeq	r1, r0, r9, asr #6
     8d4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     8d8:	00130113 	andseq	r0, r3, r3, lsl r1
     8dc:	00210c00 	eoreq	r0, r1, r0, lsl #24
     8e0:	0b2f1349 	bleq	bc560c <__bss_end+0xbafabc>
     8e4:	130d0000 	movwne	r0, #53248	; 0xd000
     8e8:	3a0b0b01 	bcc	2c34f4 <__bss_end+0x2ad9a4>
     8ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     8f4:	000d0e00 	andeq	r0, sp, r0, lsl #28
     8f8:	0b3a0e03 	bleq	e8410c <__bss_end+0xe6e5bc>
     8fc:	0b390b3b 	bleq	e435f0 <__bss_end+0xe2daa0>
     900:	0b381349 	bleq	e0562c <__bss_end+0xdefadc>
     904:	130f0000 	movwne	r0, #61440	; 0xf000
     908:	0b0e0301 	bleq	381514 <__bss_end+0x36b9c4>
     90c:	3b0b3a0b 	blcc	2cf140 <__bss_end+0x2b95f0>
     910:	010b390b 	tsteq	fp, fp, lsl #18
     914:	10000013 	andne	r0, r0, r3, lsl r0
     918:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     91c:	0b3b0b3a 	bleq	ec360c <__bss_end+0xeadabc>
     920:	13490b39 	movtne	r0, #39737	; 0x9b39
     924:	00000b38 	andeq	r0, r0, r8, lsr fp
     928:	0b000f11 	bleq	4574 <_start-0x3a8c>
     92c:	0013490b 	andseq	r4, r3, fp, lsl #18
     930:	01131200 	tsteq	r3, r0, lsl #4
     934:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     938:	0b3b0b3a 	bleq	ec3628 <__bss_end+0xeadad8>
     93c:	13010b39 	movwne	r0, #6969	; 0x1b39
     940:	0d130000 	ldceq	0, cr0, [r3, #-0]
     944:	3a0e0300 	bcc	38154c <__bss_end+0x36b9fc>
     948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     94c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     950:	14000005 	strne	r0, [r0], #-5
     954:	19270015 	stmdbne	r7!, {r0, r2, r4}
     958:	15150000 	ldrne	r0, [r5, #-0]
     95c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     960:	00130113 	andseq	r0, r3, r3, lsl r1
     964:	00051600 	andeq	r1, r5, r0, lsl #12
     968:	00001349 	andeq	r1, r0, r9, asr #6
     96c:	03011317 	movweq	r1, #4887	; 0x1317
     970:	3a050b0e 	bcc	1435b0 <__bss_end+0x12da60>
     974:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     978:	0013010b 	andseq	r0, r3, fp, lsl #2
     97c:	000d1800 	andeq	r1, sp, r0, lsl #16
     980:	0b3a0e03 	bleq	e84194 <__bss_end+0xe6e644>
     984:	0b39053b 	bleq	e41e78 <__bss_end+0xe2c328>
     988:	0b381349 	bleq	e056b4 <__bss_end+0xdefb64>
     98c:	0d190000 	ldceq	0, cr0, [r9, #-0]
     990:	3a0e0300 	bcc	381598 <__bss_end+0x36ba48>
     994:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     998:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     99c:	1a000005 	bne	9b8 <_start-0x7648>
     9a0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     9a4:	0b3a0b0b 	bleq	e835d8 <__bss_end+0xe6da88>
     9a8:	0b39053b 	bleq	e41e9c <__bss_end+0xe2c34c>
     9ac:	00001301 	andeq	r1, r0, r1, lsl #6
     9b0:	0b01131b 	bleq	45624 <__bss_end+0x2fad4>
     9b4:	3b0b3a0b 	blcc	2cf1e8 <__bss_end+0x2b9698>
     9b8:	010b3905 	tsteq	fp, r5, lsl #18
     9bc:	1c000013 	stcne	0, cr0, [r0], {19}
     9c0:	0b0b0117 	bleq	2c0e24 <__bss_end+0x2ab2d4>
     9c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9c8:	13010b39 	movwne	r0, #6969	; 0x1b39
     9cc:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
     9d0:	3a0e0300 	bcc	3815d8 <__bss_end+0x36ba88>
     9d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9d8:	0013490b 	andseq	r4, r3, fp, lsl #18
     9dc:	00131e00 	andseq	r1, r3, r0, lsl #28
     9e0:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
     9e4:	151f0000 	ldrne	r0, [pc, #-0]	; 9ec <_start-0x7614>
     9e8:	01192701 	tsteq	r9, r1, lsl #14
     9ec:	20000013 	andcs	r0, r0, r3, lsl r0
     9f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9f8:	13490b39 	movtne	r0, #39737	; 0x9b39
     9fc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     a00:	34210000 	strtcc	r0, [r1], #-0
     a04:	3a0e0300 	bcc	38160c <__bss_end+0x36babc>
     a08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a0c:	3f13490b 	svccc	0x0013490b
     a10:	00193c19 	andseq	r3, r9, r9, lsl ip
     a14:	00342200 	eorseq	r2, r4, r0, lsl #4
     a18:	0b3a0e03 	bleq	e8422c <__bss_end+0xe6e6dc>
     a1c:	0b390b3b 	bleq	e43710 <__bss_end+0xe2dbc0>
     a20:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     a24:	00001802 	andeq	r1, r0, r2, lsl #16
     a28:	03003423 	movweq	r3, #1059	; 0x423
     a2c:	3b0b3a0e 	blcc	2cf26c <__bss_end+0x2b971c>
     a30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a34:	00180213 	andseq	r0, r8, r3, lsl r2
     a38:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     a3c:	0b3a0e03 	bleq	e84250 <__bss_end+0xe6e700>
     a40:	0b39053b 	bleq	e41f34 <__bss_end+0xe2c3e4>
     a44:	01111927 	tsteq	r1, r7, lsr #18
     a48:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a4c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a50:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     a54:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a5c:	13490b39 	movtne	r0, #39737	; 0x9b39
     a60:	00001802 	andeq	r1, r0, r2, lsl #16
     a64:	03012e26 	movweq	r2, #7718	; 0x1e26
     a68:	3b0b3a0e 	blcc	2cf2a8 <__bss_end+0x2b9758>
     a6c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     a70:	11134919 	tstne	r3, r9, lsl r9
     a74:	40061201 	andmi	r1, r6, r1, lsl #4
     a78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a7c:	00001301 	andeq	r1, r0, r1, lsl #6
     a80:	03003427 	movweq	r3, #1063	; 0x427
     a84:	3b0b3a0e 	blcc	2cf2c4 <__bss_end+0x2b9774>
     a88:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a8c:	00180213 	andseq	r0, r8, r3, lsl r2
     a90:	010b2800 	tsteq	fp, r0, lsl #16
     a94:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a98:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     a9c:	03193f00 	tsteq	r9, #0, 30
     aa0:	3b0b3a0e 	blcc	2cf2e0 <__bss_end+0x2b9790>
     aa4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     aa8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     aac:	97184006 	ldrls	r4, [r8, -r6]
     ab0:	00001942 	andeq	r1, r0, r2, asr #18
     ab4:	3f012e2a 	svccc	0x00012e2a
     ab8:	3a0e0319 	bcc	381724 <__bss_end+0x36bbd4>
     abc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ac4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ac8:	96184006 	ldrls	r4, [r8], -r6
     acc:	13011942 	movwne	r1, #6466	; 0x1942
     ad0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     ad4:	03193f01 	tsteq	r9, #1, 30
     ad8:	3b0b3a0e 	blcc	2cf318 <__bss_end+0x2b97c8>
     adc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ae0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ae4:	97184006 	ldrls	r4, [r8, -r6]
     ae8:	13011942 	movwne	r1, #6466	; 0x1942
     aec:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     af0:	03193f01 	tsteq	r9, #1, 30
     af4:	3b0b3a0e 	blcc	2cf334 <__bss_end+0x2b97e4>
     af8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     afc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b00:	96184006 	ldrls	r4, [r8], -r6
     b04:	13011942 	movwne	r1, #6466	; 0x1942
     b08:	0b2d0000 	bleq	b40b10 <__bss_end+0xb2afc0>
     b0c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     b10:	00130106 	andseq	r0, r3, r6, lsl #2
     b14:	002e2e00 	eoreq	r2, lr, r0, lsl #28
     b18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b20:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b24:	01111349 	tsteq	r1, r9, asr #6
     b28:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b2c:	00194297 	mulseq	r9, r7, r2
     b30:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
     b34:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b3c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b40:	01111349 	tsteq	r1, r9, asr #6
     b44:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b48:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b4c:	30000013 	andcc	r0, r0, r3, lsl r0
     b50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b54:	0b3a0e03 	bleq	e84368 <__bss_end+0xe6e818>
     b58:	0b39053b 	bleq	e4204c <__bss_end+0xe2c4fc>
     b5c:	01111927 	tsteq	r1, r7, lsr #18
     b60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b64:	00194296 	mulseq	r9, r6, r2
     b68:	00053100 	andeq	r3, r5, r0, lsl #2
     b6c:	0b3a0e03 	bleq	e84380 <__bss_end+0xe6e830>
     b70:	0539053b 	ldreq	r0, [r9, #-1339]!	; 0xfffffac5
     b74:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b78:	01000000 	mrseq	r0, (UNDEF: 0)
     b7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b80:	0e030b13 	vmoveq.32	d3[0], r0
     b84:	01110e1b 	tsteq	r1, fp, lsl lr
     b88:	17100612 			; <UNDEFINED> instruction: 0x17100612
     b8c:	16020000 	strne	r0, [r2], -r0
     b90:	3a0e0300 	bcc	381798 <__bss_end+0x36bc48>
     b94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b98:	0013490b 	andseq	r4, r3, fp, lsl #18
     b9c:	000f0300 	andeq	r0, pc, r0, lsl #6
     ba0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ba4:	15040000 	strne	r0, [r4, #-0]
     ba8:	01192701 	tsteq	r9, r1, lsl #14
     bac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     bb0:	13490005 	movtne	r0, #36869	; 0x9005
     bb4:	24060000 	strcs	r0, [r6], #-0
     bb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bbc:	000e030b 	andeq	r0, lr, fp, lsl #6
     bc0:	00260700 	eoreq	r0, r6, r0, lsl #14
     bc4:	00001349 	andeq	r1, r0, r9, asr #6
     bc8:	0b000f08 	bleq	47f0 <_start-0x3810>
     bcc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     bd0:	0b0b0113 	bleq	2c1024 <__bss_end+0x2ab4d4>
     bd4:	0b3b0b3a 	bleq	ec38c4 <__bss_end+0xeadd74>
     bd8:	13010b39 	movwne	r0, #6969	; 0x1b39
     bdc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     be0:	3a0e0300 	bcc	3817e8 <__bss_end+0x36bc98>
     be4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     bec:	0b00000b 	bleq	c20 <_start-0x73e0>
     bf0:	13490101 	movtne	r0, #37121	; 0x9101
     bf4:	00001301 	andeq	r1, r0, r1, lsl #6
     bf8:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     bfc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     c00:	00340d00 	eorseq	r0, r4, r0, lsl #26
     c04:	0b3a0e03 	bleq	e84418 <__bss_end+0xe6e8c8>
     c08:	0b390b3b 	bleq	e438fc <__bss_end+0xe2ddac>
     c0c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c10:	350e0000 	strcc	r0, [lr, #-0]
     c14:	00134900 	andseq	r4, r3, r0, lsl #18
     c18:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     c1c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c20:	0b3b0b3a 	bleq	ec3910 <__bss_end+0xeaddc0>
     c24:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     c28:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c2c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c30:	00130119 	andseq	r0, r3, r9, lsl r1
     c34:	00051000 	andeq	r1, r5, r0
     c38:	0b3a0803 	bleq	e82c4c <__bss_end+0xe6d0fc>
     c3c:	0b390b3b 	bleq	e43930 <__bss_end+0xe2dde0>
     c40:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c44:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     c48:	03193f01 	tsteq	r9, #1, 30
     c4c:	3b0b3a0e 	blcc	2cf48c <__bss_end+0x2b993c>
     c50:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c54:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c58:	96184006 	ldrls	r4, [r8], -r6
     c5c:	13011942 	movwne	r1, #6466	; 0x1942
     c60:	05120000 	ldreq	r0, [r2, #-0]
     c64:	3a0e0300 	bcc	38186c <__bss_end+0x36bd1c>
     c68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c70:	13000018 	movwne	r0, #24
     c74:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c78:	0b3a0e03 	bleq	e8448c <__bss_end+0xe6e93c>
     c7c:	0b390b3b 	bleq	e43970 <__bss_end+0xe2de20>
     c80:	01111927 	tsteq	r1, r7, lsr #18
     c84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c88:	00194297 	mulseq	r9, r7, r2
     c8c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     c90:	0b3a0e03 	bleq	e844a4 <__bss_end+0xe6e954>
     c94:	0b390b3b 	bleq	e43988 <__bss_end+0xe2de38>
     c98:	01111927 	tsteq	r1, r7, lsr #18
     c9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ca0:	00194296 	mulseq	r9, r6, r2
     ca4:	010b1500 	tsteq	fp, r0, lsl #10
     ca8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cac:	34160000 	ldrcc	r0, [r6], #-0
     cb0:	3a080300 	bcc	2018b8 <__bss_end+0x1ebd68>
     cb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cbc:	00000018 	andeq	r0, r0, r8, lsl r0
     cc0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     cc4:	030b130e 	movweq	r1, #45838	; 0xb30e
     cc8:	110e1b0e 	tstne	lr, lr, lsl #22
     ccc:	10061201 	andne	r1, r6, r1, lsl #4
     cd0:	02000017 	andeq	r0, r0, #23
     cd4:	0e030104 	adfeqs	f0, f3, f4
     cd8:	0b0b0b3e 	bleq	2c39d8 <__bss_end+0x2ade88>
     cdc:	0b3a1349 	bleq	e85a08 <__bss_end+0xe6feb8>
     ce0:	0b390b3b 	bleq	e439d4 <__bss_end+0xe2de84>
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	03002803 	movweq	r2, #2051	; 0x803
     cec:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     cf0:	00240400 	eoreq	r0, r4, r0, lsl #8
     cf4:	0b3e0b0b 	bleq	f83928 <__bss_end+0xf6ddd8>
     cf8:	00000e03 	andeq	r0, r0, r3, lsl #28
     cfc:	0b011305 	bleq	45918 <__bss_end+0x2fdc8>
     d00:	3b0b3a0b 	blcc	2cf534 <__bss_end+0x2b99e4>
     d04:	010b390b 	tsteq	fp, fp, lsl #18
     d08:	06000013 			; <UNDEFINED> instruction: 0x06000013
     d0c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     d10:	0b3b0b3a 	bleq	ec3a00 <__bss_end+0xeadeb0>
     d14:	13490b39 	movtne	r0, #39737	; 0x9b39
     d18:	00000b38 	andeq	r0, r0, r8, lsr fp
     d1c:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
     d20:	00130113 	andseq	r0, r3, r3, lsl r1
     d24:	00210800 	eoreq	r0, r1, r0, lsl #16
     d28:	0b2f1349 	bleq	bc5a54 <__bss_end+0xbaff04>
     d2c:	16090000 	strne	r0, [r9], -r0
     d30:	3a0e0300 	bcc	381938 <__bss_end+0x36bde8>
     d34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d38:	0013490b 	andseq	r4, r3, fp, lsl #18
     d3c:	00350a00 	eorseq	r0, r5, r0, lsl #20
     d40:	00001349 	andeq	r1, r0, r9, asr #6
     d44:	0300340b 	movweq	r3, #1035	; 0x40b
     d48:	3b0b3a0e 	blcc	2cf588 <__bss_end+0x2b9a38>
     d4c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d50:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     d54:	0c000018 	stceq	0, cr0, [r0], {24}
     d58:	0b0b000f 	bleq	2c0d9c <__bss_end+0x2ab24c>
     d5c:	00001349 	andeq	r1, r0, r9, asr #6
     d60:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
     d64:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     d68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d6c:	0b3a0e03 	bleq	e84580 <__bss_end+0xe6ea30>
     d70:	0b390b3b 	bleq	e43a64 <__bss_end+0xe2df14>
     d74:	01111927 	tsteq	r1, r7, lsr #18
     d78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d7c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d80:	0f000013 	svceq	0x00000013
     d84:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d88:	0b3b0b3a 	bleq	ec3a78 <__bss_end+0xeadf28>
     d8c:	13490b39 	movtne	r0, #39737	; 0x9b39
     d90:	00001802 	andeq	r1, r0, r2, lsl #16
     d94:	03003410 	movweq	r3, #1040	; 0x410
     d98:	3b0b3a0e 	blcc	2cf5d8 <__bss_end+0x2b9a88>
     d9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     da0:	00180213 	andseq	r0, r8, r3, lsl r2
     da4:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     da8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     dac:	0b3b0b3a 	bleq	ec3a9c <__bss_end+0xeadf4c>
     db0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     db4:	01111349 	tsteq	r1, r9, asr #6
     db8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dbc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     dc0:	12000013 	andne	r0, r0, #19
     dc4:	0b0b0024 	bleq	2c0e5c <__bss_end+0x2ab30c>
     dc8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     dcc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     dd0:	03193f01 	tsteq	r9, #1, 30
     dd4:	3b0b3a0e 	blcc	2cf614 <__bss_end+0x2b9ac4>
     dd8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     ddc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     de0:	96184006 	ldrls	r4, [r8], -r6
     de4:	13011942 	movwne	r1, #6466	; 0x1942
     de8:	05140000 	ldreq	r0, [r4, #-0]
     dec:	3a080300 	bcc	2019f4 <__bss_end+0x1ebea4>
     df0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     df4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     df8:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
     dfc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e00:	0b3a0e03 	bleq	e84614 <__bss_end+0xe6eac4>
     e04:	0b390b3b 	bleq	e43af8 <__bss_end+0xe2dfa8>
     e08:	01111927 	tsteq	r1, r7, lsr #18
     e0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e10:	00194297 	mulseq	r9, r7, r2
     e14:	00341600 	eorseq	r1, r4, r0, lsl #12
     e18:	0b3a0803 	bleq	e82e2c <__bss_end+0xe6d2dc>
     e1c:	0b390b3b 	bleq	e43b10 <__bss_end+0xe2dfc0>
     e20:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e24:	01000000 	mrseq	r0, (UNDEF: 0)
     e28:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     e2c:	0e030b13 	vmoveq.32	d3[0], r0
     e30:	01110e1b 	tsteq	r1, fp, lsl lr
     e34:	17100612 			; <UNDEFINED> instruction: 0x17100612
     e38:	16020000 	strne	r0, [r2], -r0
     e3c:	3a0e0300 	bcc	381a44 <__bss_end+0x36bef4>
     e40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e44:	0013490b 	andseq	r4, r3, fp, lsl #18
     e48:	00260300 	eoreq	r0, r6, r0, lsl #6
     e4c:	00001349 	andeq	r1, r0, r9, asr #6
     e50:	0b002404 	bleq	9e68 <__module_entries_end+0x1dc4>
     e54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e58:	0500000e 	streq	r0, [r0, #-14]
     e5c:	0b0b0024 	bleq	2c0ef4 <__bss_end+0x2ab3a4>
     e60:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e64:	16060000 	strne	r0, [r6], -r0
     e68:	3a0e0300 	bcc	381a70 <__bss_end+0x36bf20>
     e6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e70:	0013490b 	andseq	r4, r3, fp, lsl #18
     e74:	01170700 	tsteq	r7, r0, lsl #14
     e78:	0b3a0b0b 	bleq	e83aac <__bss_end+0xe6df5c>
     e7c:	0b390b3b 	bleq	e43b70 <__bss_end+0xe2e020>
     e80:	00001301 	andeq	r1, r0, r1, lsl #6
     e84:	03000d08 	movweq	r0, #3336	; 0xd08
     e88:	3b0b3a0e 	blcc	2cf6c8 <__bss_end+0x2b9b78>
     e8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e90:	09000013 	stmdbeq	r0, {r0, r1, r4}
     e94:	13490101 	movtne	r0, #37121	; 0x9101
     e98:	00001301 	andeq	r1, r0, r1, lsl #6
     e9c:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
     ea0:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ea4:	01130b00 	tsteq	r3, r0, lsl #22
     ea8:	0b3a0b0b 	bleq	e83adc <__bss_end+0xe6df8c>
     eac:	0b390b3b 	bleq	e43ba0 <__bss_end+0xe2e050>
     eb0:	00001301 	andeq	r1, r0, r1, lsl #6
     eb4:	03000d0c 	movweq	r0, #3340	; 0xd0c
     eb8:	3b0b3a0e 	blcc	2cf6f8 <__bss_end+0x2b9ba8>
     ebc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ec0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ec4:	000f0d00 	andeq	r0, pc, r0, lsl #26
     ec8:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ecc:	0301130e 	movweq	r1, #4878	; 0x130e
     ed0:	3a0b0b0e 	bcc	2c3b10 <__bss_end+0x2adfc0>
     ed4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed8:	0013010b 	andseq	r0, r3, fp, lsl #2
     edc:	000d0f00 	andeq	r0, sp, r0, lsl #30
     ee0:	0b3a0803 	bleq	e82ef4 <__bss_end+0xe6d3a4>
     ee4:	0b390b3b 	bleq	e43bd8 <__bss_end+0xe2e088>
     ee8:	0b381349 	bleq	e05c14 <__bss_end+0xdf00c4>
     eec:	0f100000 	svceq	0x00100000
     ef0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ef4:	11000013 	tstne	r0, r3, lsl r0
     ef8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     efc:	0b3a050b 	bleq	e82330 <__bss_end+0xe6c7e0>
     f00:	0b390b3b 	bleq	e43bf4 <__bss_end+0xe2e0a4>
     f04:	00001301 	andeq	r1, r0, r1, lsl #6
     f08:	03000d12 	movweq	r0, #3346	; 0xd12
     f0c:	3b0b3a0e 	blcc	2cf74c <__bss_end+0x2b9bfc>
     f10:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     f14:	00053813 	andeq	r3, r5, r3, lsl r8
     f18:	00151300 	andseq	r1, r5, r0, lsl #6
     f1c:	00001927 	andeq	r1, r0, r7, lsr #18
     f20:	27011514 	smladcs	r1, r4, r5, r1
     f24:	01134919 	tsteq	r3, r9, lsl r9
     f28:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     f2c:	13490005 	movtne	r0, #36869	; 0x9005
     f30:	13160000 	tstne	r6, #0
     f34:	0b0e0301 	bleq	381b40 <__bss_end+0x36bff0>
     f38:	3b0b3a05 	blcc	2cf754 <__bss_end+0x2b9c04>
     f3c:	010b3905 	tsteq	fp, r5, lsl #18
     f40:	17000013 	smladne	r0, r3, r0, r0
     f44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f4c:	13490b39 	movtne	r0, #39737	; 0x9b39
     f50:	00000b38 	andeq	r0, r0, r8, lsr fp
     f54:	03000d18 	movweq	r0, #3352	; 0xd18
     f58:	3b0b3a0e 	blcc	2cf798 <__bss_end+0x2b9c48>
     f5c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f60:	00053813 	andeq	r3, r5, r3, lsl r8
     f64:	01131900 	tsteq	r3, r0, lsl #18
     f68:	0b0b0e03 	bleq	2c477c <__bss_end+0x2aec2c>
     f6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f70:	13010b39 	movwne	r0, #6969	; 0x1b39
     f74:	131a0000 	tstne	sl, #0
     f78:	3a0b0b01 	bcc	2c3b84 <__bss_end+0x2ae034>
     f7c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f80:	0013010b 	andseq	r0, r3, fp, lsl #2
     f84:	01171b00 	tsteq	r7, r0, lsl #22
     f88:	0b3a0b0b 	bleq	e83bbc <__bss_end+0xe6e06c>
     f8c:	0b39053b 	bleq	e42480 <__bss_end+0xe2c930>
     f90:	00001301 	andeq	r1, r0, r1, lsl #6
     f94:	03000d1c 	movweq	r0, #3356	; 0xd1c
     f98:	3b0b3a0e 	blcc	2cf7d8 <__bss_end+0x2b9c88>
     f9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     fa0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     fa4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
     fa8:	0000193c 	andeq	r1, r0, ip, lsr r9
     fac:	2701151e 	smladcs	r1, lr, r5, r1
     fb0:	00130119 	andseq	r0, r3, r9, lsl r1
     fb4:	00341f00 	eorseq	r1, r4, r0, lsl #30
     fb8:	0b3a0e03 	bleq	e847cc <__bss_end+0xe6ec7c>
     fbc:	0b39053b 	bleq	e424b0 <__bss_end+0xe2c960>
     fc0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fc4:	0000193c 	andeq	r1, r0, ip, lsr r9
     fc8:	03003420 	movweq	r3, #1056	; 0x420
     fcc:	3b0b3a0e 	blcc	2cf80c <__bss_end+0x2b9cbc>
     fd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fd4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     fd8:	21000019 	tstcs	r0, r9, lsl r0
     fdc:	0e030117 	mcreq	1, 0, r0, cr3, cr7, {0}
     fe0:	0b3a050b 	bleq	e82414 <__bss_end+0xe6c8c4>
     fe4:	0b390b3b 	bleq	e43cd8 <__bss_end+0xe2e188>
     fe8:	00001301 	andeq	r1, r0, r1, lsl #6
     fec:	49003522 	stmdbmi	r0, {r1, r5, r8, sl, ip, sp}
     ff0:	23000013 	movwcs	r0, #19
     ff4:	13490021 	movtne	r0, #36897	; 0x9021
     ff8:	0000052f 	andeq	r0, r0, pc, lsr #10
     ffc:	03003424 	movweq	r3, #1060	; 0x424
    1000:	3b0b3a0e 	blcc	2cf840 <__bss_end+0x2b9cf0>
    1004:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1008:	00180213 	andseq	r0, r8, r3, lsl r2
    100c:	00342500 	eorseq	r2, r4, r0, lsl #10
    1010:	0b3a0e03 	bleq	e84824 <__bss_end+0xe6ecd4>
    1014:	0b390b3b 	bleq	e43d08 <__bss_end+0xe2e1b8>
    1018:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    101c:	00001802 	andeq	r1, r0, r2, lsl #16
    1020:	03012e26 	movweq	r2, #7718	; 0x1e26
    1024:	3b0b3a0e 	blcc	2cf864 <__bss_end+0x2b9d14>
    1028:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    102c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1030:	97184006 	ldrls	r4, [r8, -r6]
    1034:	13011942 	movwne	r1, #6466	; 0x1942
    1038:	05270000 	streq	r0, [r7, #-0]!
    103c:	3a0e0300 	bcc	381c44 <__bss_end+0x36c0f4>
    1040:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1044:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1048:	28000018 	stmdacs	r0, {r3, r4}
    104c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1050:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1054:	13490b39 	movtne	r0, #39737	; 0x9b39
    1058:	00001802 	andeq	r1, r0, r2, lsl #16
    105c:	03003429 	movweq	r3, #1065	; 0x429
    1060:	3b0b3a08 	blcc	2cf888 <__bss_end+0x2b9d38>
    1064:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1068:	00180213 	andseq	r0, r8, r3, lsl r2
    106c:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    1070:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1074:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1078:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    107c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1080:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1084:	2b000019 	blcs	10f0 <_start-0x6f10>
    1088:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    108c:	0b3a0e03 	bleq	e848a0 <__bss_end+0xe6ed50>
    1090:	0b39053b 	bleq	e42584 <__bss_end+0xe2ca34>
    1094:	13491927 	movtne	r1, #39207	; 0x9927
    1098:	06120111 			; <UNDEFINED> instruction: 0x06120111
    109c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10a0:	2c000019 	stccs	0, cr0, [r0], {25}
    10a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10a8:	0b3a0e03 	bleq	e848bc <__bss_end+0xe6ed6c>
    10ac:	0b390b3b 	bleq	e43da0 <__bss_end+0xe2e250>
    10b0:	01111927 	tsteq	r1, r7, lsr #18
    10b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    10bc:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    10c0:	08030005 	stmdaeq	r3, {r0, r2}
    10c4:	0b3b0b3a 	bleq	ec3db4 <__bss_end+0xeae264>
    10c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    10cc:	00001802 	andeq	r1, r0, r2, lsl #16
    10d0:	0300342e 	movweq	r3, #1070	; 0x42e
    10d4:	3b0b3a08 	blcc	2cf8fc <__bss_end+0x2b9dac>
    10d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10dc:	00180213 	andseq	r0, r8, r3, lsl r2
    10e0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    10e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10e8:	0b3b0b3a 	bleq	ec3dd8 <__bss_end+0xeae288>
    10ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    10f0:	01111349 	tsteq	r1, r9, asr #6
    10f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10f8:	00194296 	mulseq	r9, r6, r2
    10fc:	00053000 	andeq	r3, r5, r0
    1100:	0b3a0e03 	bleq	e84914 <__bss_end+0xe6edc4>
    1104:	0b390b3b 	bleq	e43df8 <__bss_end+0xe2e2a8>
    1108:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
    1110:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1114:	0e030b13 	vmoveq.32	d3[0], r0
    1118:	01110e1b 	tsteq	r1, fp, lsl lr
    111c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1120:	24020000 	strcs	r0, [r2], #-0
    1124:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1128:	0008030b 	andeq	r0, r8, fp, lsl #6
    112c:	00240300 	eoreq	r0, r4, r0, lsl #6
    1130:	0b3e0b0b 	bleq	f83d64 <__bss_end+0xf6e214>
    1134:	00000e03 	andeq	r0, r0, r3, lsl #28
    1138:	0b000f04 	bleq	4d50 <_start-0x32b0>
    113c:	0500000b 	streq	r0, [r0, #-11]
    1140:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1144:	0b3a0e03 	bleq	e84958 <__bss_end+0xe6ee08>
    1148:	0b390b3b 	bleq	e43e3c <__bss_end+0xe2e2ec>
    114c:	01111927 	tsteq	r1, r7, lsr #18
    1150:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1154:	00194296 	mulseq	r9, r6, r2
    1158:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    115c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1160:	0b3b0b3a 	bleq	ec3e50 <__bss_end+0xeae300>
    1164:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1168:	06120111 			; <UNDEFINED> instruction: 0x06120111
    116c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1170:	00130119 	andseq	r0, r3, r9, lsl r1
    1174:	00050700 	andeq	r0, r5, r0, lsl #14
    1178:	0b3a0e03 	bleq	e8498c <__bss_end+0xe6ee3c>
    117c:	0b390b3b 	bleq	e43e70 <__bss_end+0xe2e320>
    1180:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1184:	34080000 	strcc	r0, [r8], #-0
    1188:	3a080300 	bcc	201d90 <__bss_end+0x1ec240>
    118c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1190:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1194:	09000018 	stmdbeq	r0, {r3, r4}
    1198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    119c:	0b3a0e03 	bleq	e849b0 <__bss_end+0xe6ee60>
    11a0:	0b390b3b 	bleq	e43e94 <__bss_end+0xe2e344>
    11a4:	01111927 	tsteq	r1, r7, lsr #18
    11a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11ac:	00194296 	mulseq	r9, r6, r2
    11b0:	11010000 	mrsne	r0, (UNDEF: 1)
    11b4:	130e2501 	movwne	r2, #58625	; 0xe501
    11b8:	1b0e030b 	blne	381dec <__bss_end+0x36c29c>
    11bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    11c0:	00171006 	andseq	r1, r7, r6
    11c4:	00240200 	eoreq	r0, r4, r0, lsl #4
    11c8:	0b3e0b0b 	bleq	f83dfc <__bss_end+0xf6e2ac>
    11cc:	00000803 	andeq	r0, r0, r3, lsl #16
    11d0:	03001603 	movweq	r1, #1539	; 0x603
    11d4:	3b0b3a0e 	blcc	2cfa14 <__bss_end+0x2b9ec4>
    11d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11dc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    11e0:	0b0b0024 	bleq	2c1278 <__bss_end+0x2ab728>
    11e4:	0e030b3e 	vmoveq.16	d3[0], r0
    11e8:	16050000 	strne	r0, [r5], -r0
    11ec:	3a0e0300 	bcc	381df4 <__bss_end+0x36c2a4>
    11f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    11f8:	00260600 	eoreq	r0, r6, r0, lsl #12
    11fc:	00001349 	andeq	r1, r0, r9, asr #6
    1200:	0b011707 	bleq	46e24 <__bss_end+0x312d4>
    1204:	3b0b3a0b 	blcc	2cfa38 <__bss_end+0x2b9ee8>
    1208:	010b390b 	tsteq	fp, fp, lsl #18
    120c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1210:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1214:	0b3b0b3a 	bleq	ec3f04 <__bss_end+0xeae3b4>
    1218:	13490b39 	movtne	r0, #39737	; 0x9b39
    121c:	01090000 	mrseq	r0, (UNDEF: 9)
    1220:	01134901 	tsteq	r3, r1, lsl #18
    1224:	0a000013 	beq	1278 <_start-0x6d88>
    1228:	13490021 	movtne	r0, #36897	; 0x9021
    122c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1230:	0b01130b 	bleq	45e64 <__bss_end+0x30314>
    1234:	3b0b3a0b 	blcc	2cfa68 <__bss_end+0x2b9f18>
    1238:	010b390b 	tsteq	fp, fp, lsl #18
    123c:	0c000013 	stceq	0, cr0, [r0], {19}
    1240:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1244:	0b3b0b3a 	bleq	ec3f34 <__bss_end+0xeae3e4>
    1248:	13490b39 	movtne	r0, #39737	; 0x9b39
    124c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1250:	0b000f0d 	bleq	4e8c <_start-0x3174>
    1254:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1258:	13490037 	movtne	r0, #36919	; 0x9037
    125c:	130f0000 	movwne	r0, #61440	; 0xf000
    1260:	0b0e0301 	bleq	381e6c <__bss_end+0x36c31c>
    1264:	3b0b3a0b 	blcc	2cfa98 <__bss_end+0x2b9f48>
    1268:	010b390b 	tsteq	fp, fp, lsl #18
    126c:	10000013 	andne	r0, r0, r3, lsl r0
    1270:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1274:	0b3b0b3a 	bleq	ec3f64 <__bss_end+0xeae414>
    1278:	13490b39 	movtne	r0, #39737	; 0x9b39
    127c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1280:	0b000f11 	bleq	4ecc <_start-0x3134>
    1284:	0013490b 	andseq	r4, r3, fp, lsl #18
    1288:	01131200 	tsteq	r3, r0, lsl #4
    128c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    1290:	0b3b0b3a 	bleq	ec3f80 <__bss_end+0xeae430>
    1294:	13010b39 	movwne	r0, #6969	; 0x1b39
    1298:	0d130000 	ldceq	0, cr0, [r3, #-0]
    129c:	3a0e0300 	bcc	381ea4 <__bss_end+0x36c354>
    12a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    12a8:	14000005 	strne	r0, [r0], #-5
    12ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
    12b0:	15150000 	ldrne	r0, [r5, #-0]
    12b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    12b8:	00130113 	andseq	r0, r3, r3, lsl r1
    12bc:	00051600 	andeq	r1, r5, r0, lsl #12
    12c0:	00001349 	andeq	r1, r0, r9, asr #6
    12c4:	03011317 	movweq	r1, #4887	; 0x1317
    12c8:	3a050b0e 	bcc	143f08 <__bss_end+0x12e3b8>
    12cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12d0:	0013010b 	andseq	r0, r3, fp, lsl #2
    12d4:	000d1800 	andeq	r1, sp, r0, lsl #16
    12d8:	0b3a0e03 	bleq	e84aec <__bss_end+0xe6ef9c>
    12dc:	0b39053b 	bleq	e427d0 <__bss_end+0xe2cc80>
    12e0:	0b381349 	bleq	e0600c <__bss_end+0xdf04bc>
    12e4:	0d190000 	ldceq	0, cr0, [r9, #-0]
    12e8:	3a0e0300 	bcc	381ef0 <__bss_end+0x36c3a0>
    12ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    12f4:	1a000005 	bne	1310 <_start-0x6cf0>
    12f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    12fc:	0b3a0b0b 	bleq	e83f30 <__bss_end+0xe6e3e0>
    1300:	0b39053b 	bleq	e427f4 <__bss_end+0xe2cca4>
    1304:	00001301 	andeq	r1, r0, r1, lsl #6
    1308:	0b01131b 	bleq	45f7c <__bss_end+0x3042c>
    130c:	3b0b3a0b 	blcc	2cfb40 <__bss_end+0x2b9ff0>
    1310:	010b3905 	tsteq	fp, r5, lsl #18
    1314:	1c000013 	stcne	0, cr0, [r0], {19}
    1318:	0b0b0117 	bleq	2c177c <__bss_end+0x2abc2c>
    131c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1320:	13010b39 	movwne	r0, #6969	; 0x1b39
    1324:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    1328:	3a0e0300 	bcc	381f30 <__bss_end+0x36c3e0>
    132c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1330:	0013490b 	andseq	r4, r3, fp, lsl #18
    1334:	01151e00 	tsteq	r5, r0, lsl #28
    1338:	13011927 	movwne	r1, #6439	; 0x1927
    133c:	341f0000 	ldrcc	r0, [pc], #-0	; 1344 <_start-0x6cbc>
    1340:	3a0e0300 	bcc	381f48 <__bss_end+0x36c3f8>
    1344:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1348:	3f13490b 	svccc	0x0013490b
    134c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1350:	00262000 	eoreq	r2, r6, r0
    1354:	34210000 	strtcc	r0, [r1], #-0
    1358:	3a0e0300 	bcc	381f60 <__bss_end+0x36c410>
    135c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1360:	3f13490b 	svccc	0x0013490b
    1364:	00193c19 	andseq	r3, r9, r9, lsl ip
    1368:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
    136c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1370:	0b3b0b3a 	bleq	ec4060 <__bss_end+0xeae510>
    1374:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1378:	01111349 	tsteq	r1, r9, asr #6
    137c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1380:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1384:	23000013 	movwcs	r0, #19
    1388:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    138c:	0b3b0b3a 	bleq	ec407c <__bss_end+0xeae52c>
    1390:	13490b39 	movtne	r0, #39737	; 0x9b39
    1394:	00001802 	andeq	r1, r0, r2, lsl #16
    1398:	03000524 	movweq	r0, #1316	; 0x524
    139c:	3b0b3a0e 	blcc	2cfbdc <__bss_end+0x2ba08c>
    13a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13a4:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    13a8:	00001742 	andeq	r1, r0, r2, asr #14
    13ac:	03003425 	movweq	r3, #1061	; 0x425
    13b0:	3b0b3a08 	blcc	2cfbd8 <__bss_end+0x2ba088>
    13b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13b8:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    13bc:	00001742 	andeq	r1, r0, r2, asr #14
    13c0:	03003426 	movweq	r3, #1062	; 0x426
    13c4:	3b0b3a0e 	blcc	2cfc04 <__bss_end+0x2ba0b4>
    13c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13cc:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    13d0:	00001742 	andeq	r1, r0, r2, asr #14
    13d4:	01110100 	tsteq	r1, r0, lsl #2
    13d8:	0b130e25 	bleq	4c4c74 <__bss_end+0x4af124>
    13dc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    13e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    13e4:	00001710 	andeq	r1, r0, r0, lsl r7
    13e8:	0b002402 	bleq	a3f8 <__module_entries_end+0x2354>
    13ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13f0:	03000008 	movweq	r0, #8
    13f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    13f8:	0b3b0b3a 	bleq	ec40e8 <__bss_end+0xeae598>
    13fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1400:	24040000 	strcs	r0, [r4], #-0
    1404:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1408:	000e030b 	andeq	r0, lr, fp, lsl #6
    140c:	00160500 	andseq	r0, r6, r0, lsl #10
    1410:	0b3a0e03 	bleq	e84c24 <__bss_end+0xe6f0d4>
    1414:	0b39053b 	bleq	e42908 <__bss_end+0xe2cdb8>
    1418:	00001349 	andeq	r1, r0, r9, asr #6
    141c:	0b011706 	bleq	4703c <__bss_end+0x314ec>
    1420:	3b0b3a0b 	blcc	2cfc54 <__bss_end+0x2ba104>
    1424:	010b390b 	tsteq	fp, fp, lsl #18
    1428:	07000013 	smladeq	r0, r3, r0, r0
    142c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1430:	0b3b0b3a 	bleq	ec4120 <__bss_end+0xeae5d0>
    1434:	13490b39 	movtne	r0, #39737	; 0x9b39
    1438:	01080000 	mrseq	r0, (UNDEF: 8)
    143c:	01134901 	tsteq	r3, r1, lsl #18
    1440:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1444:	13490021 	movtne	r0, #36897	; 0x9021
    1448:	00000b2f 	andeq	r0, r0, pc, lsr #22
    144c:	0b01130a 	bleq	4607c <__bss_end+0x3052c>
    1450:	3b0b3a0b 	blcc	2cfc84 <__bss_end+0x2ba134>
    1454:	010b390b 	tsteq	fp, fp, lsl #18
    1458:	0b000013 	bleq	14ac <_start-0x6b54>
    145c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1460:	0b3b0b3a 	bleq	ec4150 <__bss_end+0xeae600>
    1464:	13490b39 	movtne	r0, #39737	; 0x9b39
    1468:	00000b38 	andeq	r0, r0, r8, lsr fp
    146c:	0b000f0c 	bleq	50a4 <_start-0x2f5c>
    1470:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1474:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1478:	0b3a0b0b 	bleq	e840ac <__bss_end+0xe6e55c>
    147c:	0b390b3b 	bleq	e44170 <__bss_end+0xe2e620>
    1480:	00001301 	andeq	r1, r0, r1, lsl #6
    1484:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1488:	3b0b3a08 	blcc	2cfcb0 <__bss_end+0x2ba160>
    148c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1490:	000b3813 	andeq	r3, fp, r3, lsl r8
    1494:	000f0f00 	andeq	r0, pc, r0, lsl #30
    1498:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    149c:	13100000 	tstne	r0, #0
    14a0:	0b0e0301 	bleq	3820ac <__bss_end+0x36c55c>
    14a4:	3b0b3a05 	blcc	2cfcc0 <__bss_end+0x2ba170>
    14a8:	010b390b 	tsteq	fp, fp, lsl #18
    14ac:	11000013 	tstne	r0, r3, lsl r0
    14b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14b4:	0b3b0b3a 	bleq	ec41a4 <__bss_end+0xeae654>
    14b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    14bc:	00000538 	andeq	r0, r0, r8, lsr r5
    14c0:	27001512 	smladcs	r0, r2, r5, r1
    14c4:	13000019 	movwne	r0, #25
    14c8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    14cc:	13011349 	movwne	r1, #4937	; 0x1349
    14d0:	05140000 	ldreq	r0, [r4, #-0]
    14d4:	00134900 	andseq	r4, r3, r0, lsl #18
    14d8:	00261500 	eoreq	r1, r6, r0, lsl #10
    14dc:	00001349 	andeq	r1, r0, r9, asr #6
    14e0:	03011316 	movweq	r1, #4886	; 0x1316
    14e4:	3a050b0e 	bcc	144124 <__bss_end+0x12e5d4>
    14e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    14f0:	000d1700 	andeq	r1, sp, r0, lsl #14
    14f4:	0b3a0e03 	bleq	e84d08 <__bss_end+0xe6f1b8>
    14f8:	0b39053b 	bleq	e429ec <__bss_end+0xe2ce9c>
    14fc:	0b381349 	bleq	e06228 <__bss_end+0xdf06d8>
    1500:	0d180000 	ldceq	0, cr0, [r8, #-0]
    1504:	3a0e0300 	bcc	38210c <__bss_end+0x36c5bc>
    1508:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    150c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1510:	19000005 	stmdbne	r0, {r0, r2}
    1514:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1518:	0b3a0b0b 	bleq	e8414c <__bss_end+0xe6e5fc>
    151c:	0b39053b 	bleq	e42a10 <__bss_end+0xe2cec0>
    1520:	00001301 	andeq	r1, r0, r1, lsl #6
    1524:	0b01131a 	bleq	46194 <__bss_end+0x30644>
    1528:	3b0b3a0b 	blcc	2cfd5c <__bss_end+0x2ba20c>
    152c:	010b3905 	tsteq	fp, r5, lsl #18
    1530:	1b000013 	blne	1584 <_start-0x6a7c>
    1534:	0b0b0117 	bleq	2c1998 <__bss_end+0x2abe48>
    1538:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    153c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1540:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    1544:	3a0e0300 	bcc	38214c <__bss_end+0x36c5fc>
    1548:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    154c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1550:	01151d00 	tsteq	r5, r0, lsl #26
    1554:	13011927 	movwne	r1, #6439	; 0x1927
    1558:	341e0000 	ldrcc	r0, [lr], #-0
    155c:	3a0e0300 	bcc	382164 <__bss_end+0x36c614>
    1560:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1564:	3f13490b 	svccc	0x0013490b
    1568:	00193c19 	andseq	r3, r9, r9, lsl ip
    156c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1570:	0b3a0e03 	bleq	e84d84 <__bss_end+0xe6f234>
    1574:	0b390b3b 	bleq	e44268 <__bss_end+0xe2e718>
    1578:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    157c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1580:	3f012e20 	svccc	0x00012e20
    1584:	3a0e0319 	bcc	3821f0 <__bss_end+0x36c6a0>
    1588:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    158c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1590:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1594:	97184006 	ldrls	r4, [r8, -r6]
    1598:	13011942 	movwne	r1, #6466	; 0x1942
    159c:	05210000 	streq	r0, [r1, #-0]!
    15a0:	3a080300 	bcc	2021a8 <__bss_end+0x1ec658>
    15a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15ac:	22000018 	andcs	r0, r0, #24
    15b0:	08030005 	stmdaeq	r3, {r0, r2}
    15b4:	0b3b0b3a 	bleq	ec42a4 <__bss_end+0xeae754>
    15b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    15bc:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15c0:	23000017 	movwcs	r0, #23
    15c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15c8:	0b3b0b3a 	bleq	ec42b8 <__bss_end+0xeae768>
    15cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    15d0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15d4:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    15d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15dc:	0b3b0b3a 	bleq	ec42cc <__bss_end+0xeae77c>
    15e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    15e4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15e8:	00000017 	andeq	r0, r0, r7, lsl r0
    15ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    15f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    15f4:	110e1b0e 	tstne	lr, lr, lsl #22
    15f8:	10061201 	andne	r1, r6, r1, lsl #4
    15fc:	02000017 	andeq	r0, r0, #23
    1600:	0b0b0024 	bleq	2c1698 <__bss_end+0x2abb48>
    1604:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1608:	16030000 	strne	r0, [r3], -r0
    160c:	3a0e0300 	bcc	382214 <__bss_end+0x36c6c4>
    1610:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1614:	0013490b 	andseq	r4, r3, fp, lsl #18
    1618:	00240400 	eoreq	r0, r4, r0, lsl #8
    161c:	0b3e0b0b 	bleq	f84250 <__bss_end+0xf6e700>
    1620:	00000e03 	andeq	r0, r0, r3, lsl #28
    1624:	03001605 	movweq	r1, #1541	; 0x605
    1628:	3b0b3a0e 	blcc	2cfe68 <__bss_end+0x2ba318>
    162c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1630:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1634:	13490026 	movtne	r0, #36902	; 0x9026
    1638:	17070000 	strne	r0, [r7, -r0]
    163c:	3a0b0b01 	bcc	2c4248 <__bss_end+0x2ae6f8>
    1640:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1644:	0013010b 	andseq	r0, r3, fp, lsl #2
    1648:	000d0800 	andeq	r0, sp, r0, lsl #16
    164c:	0b3a0e03 	bleq	e84e60 <__bss_end+0xe6f310>
    1650:	0b390b3b 	bleq	e44344 <__bss_end+0xe2e7f4>
    1654:	00001349 	andeq	r1, r0, r9, asr #6
    1658:	49010109 	stmdbmi	r1, {r0, r3, r8}
    165c:	00130113 	andseq	r0, r3, r3, lsl r1
    1660:	00210a00 	eoreq	r0, r1, r0, lsl #20
    1664:	0b2f1349 	bleq	bc6390 <__bss_end+0xbb0840>
    1668:	130b0000 	movwne	r0, #45056	; 0xb000
    166c:	3a0b0b01 	bcc	2c4278 <__bss_end+0x2ae728>
    1670:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1674:	0013010b 	andseq	r0, r3, fp, lsl #2
    1678:	000d0c00 	andeq	r0, sp, r0, lsl #24
    167c:	0b3a0e03 	bleq	e84e90 <__bss_end+0xe6f340>
    1680:	0b390b3b 	bleq	e44374 <__bss_end+0xe2e824>
    1684:	0b381349 	bleq	e063b0 <__bss_end+0xdf0860>
    1688:	0f0d0000 	svceq	0x000d0000
    168c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1690:	01130e00 	tsteq	r3, r0, lsl #28
    1694:	0b0b0e03 	bleq	2c4ea8 <__bss_end+0x2af358>
    1698:	0b3b0b3a 	bleq	ec4388 <__bss_end+0xeae838>
    169c:	13010b39 	movwne	r0, #6969	; 0x1b39
    16a0:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 16a8 <_start-0x6958>
    16a4:	3a080300 	bcc	2022ac <__bss_end+0x1ec75c>
    16a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16ac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    16b0:	1000000b 	andne	r0, r0, fp
    16b4:	0b0b000f 	bleq	2c16f8 <__bss_end+0x2abba8>
    16b8:	00001349 	andeq	r1, r0, r9, asr #6
    16bc:	03011311 	movweq	r1, #4881	; 0x1311
    16c0:	3a050b0e 	bcc	144300 <__bss_end+0x12e7b0>
    16c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    16cc:	000d1200 	andeq	r1, sp, r0, lsl #4
    16d0:	0b3a0e03 	bleq	e84ee4 <__bss_end+0xe6f394>
    16d4:	0b390b3b 	bleq	e443c8 <__bss_end+0xe2e878>
    16d8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    16dc:	15130000 	ldrne	r0, [r3, #-0]
    16e0:	00192700 	andseq	r2, r9, r0, lsl #14
    16e4:	01151400 	tsteq	r5, r0, lsl #8
    16e8:	13491927 	movtne	r1, #39207	; 0x9927
    16ec:	00001301 	andeq	r1, r0, r1, lsl #6
    16f0:	49000515 	stmdbmi	r0, {r0, r2, r4, r8, sl}
    16f4:	16000013 			; <UNDEFINED> instruction: 0x16000013
    16f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    16fc:	0b3a050b 	bleq	e82b30 <__bss_end+0xe6cfe0>
    1700:	0b39053b 	bleq	e42bf4 <__bss_end+0xe2d0a4>
    1704:	00001301 	andeq	r1, r0, r1, lsl #6
    1708:	03000d17 	movweq	r0, #3351	; 0xd17
    170c:	3b0b3a0e 	blcc	2cff4c <__bss_end+0x2ba3fc>
    1710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1714:	000b3813 	andeq	r3, fp, r3, lsl r8
    1718:	000d1800 	andeq	r1, sp, r0, lsl #16
    171c:	0b3a0e03 	bleq	e84f30 <__bss_end+0xe6f3e0>
    1720:	0b39053b 	bleq	e42c14 <__bss_end+0xe2d0c4>
    1724:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1728:	37190000 	ldrcc	r0, [r9, -r0]
    172c:	00134900 	andseq	r4, r3, r0, lsl #18
    1730:	01131a00 	tsteq	r3, r0, lsl #20
    1734:	0b0b0e03 	bleq	2c4f48 <__bss_end+0x2af3f8>
    1738:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    173c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1740:	131b0000 	tstne	fp, #0
    1744:	3a0b0b01 	bcc	2c4350 <__bss_end+0x2ae800>
    1748:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    174c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1750:	01171c00 	tsteq	r7, r0, lsl #24
    1754:	0b3a0b0b 	bleq	e84388 <__bss_end+0xe6e838>
    1758:	0b39053b 	bleq	e42c4c <__bss_end+0xe2d0fc>
    175c:	00001301 	andeq	r1, r0, r1, lsl #6
    1760:	03000d1d 	movweq	r0, #3357	; 0xd1d
    1764:	3b0b3a0e 	blcc	2cffa4 <__bss_end+0x2ba454>
    1768:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    176c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1770:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    1774:	0000193c 	andeq	r1, r0, ip, lsr r9
    1778:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
    177c:	00130119 	andseq	r0, r3, r9, lsl r1
    1780:	00342000 	eorseq	r2, r4, r0
    1784:	0b3a0e03 	bleq	e84f98 <__bss_end+0xe6f448>
    1788:	0b39053b 	bleq	e42c7c <__bss_end+0xe2d12c>
    178c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1790:	0000193c 	andeq	r1, r0, ip, lsr r9
    1794:	3f012e21 	svccc	0x00012e21
    1798:	3a0e0319 	bcc	382404 <__bss_end+0x36c8b4>
    179c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    17a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    17a8:	97184006 	ldrls	r4, [r8, -r6]
    17ac:	13011942 	movwne	r1, #6466	; 0x1942
    17b0:	05220000 	streq	r0, [r2, #-0]!
    17b4:	3a0e0300 	bcc	3823bc <__bss_end+0x36c86c>
    17b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    17c0:	23000018 	movwcs	r0, #24
    17c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    17c8:	0b3b0b3a 	bleq	ec44b8 <__bss_end+0xeae968>
    17cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    17d0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    17d4:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    17d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    17dc:	0b3b0b3a 	bleq	ec44cc <__bss_end+0xeae97c>
    17e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    17e4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    17e8:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    17ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    17f0:	0b3b0b3a 	bleq	ec44e0 <__bss_end+0xeae990>
    17f4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17f8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    17fc:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02160002 	andseq	r0, r6, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010344 	andeq	r0, r1, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03b20002 			; <UNDEFINED> instruction: 0x03b20002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	08610002 	stmdaeq	r1!, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d54 	andeq	r0, r1, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	13a00002 	movne	r0, #2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	23c20002 	biccs	r0, r2, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011ba0 	andeq	r1, r1, r0, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	3a320002 	bcc	c800d4 <__bss_end+0xc6a584>
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000134c4 	andeq	r3, r1, r4, asr #9
  d4:	000003a0 	andeq	r0, r0, r0, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	3d0d0002 	stccc	0, cr0, [sp, #-8]
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013864 	andeq	r3, r1, r4, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	41450002 	cmpmi	r5, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013e3c 	andeq	r3, r1, ip, lsr lr
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	4cc20002 	stclmi	0, cr0, [r2], {2}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00014300 	andeq	r4, r1, r0, lsl #6
 134:	00000118 	andeq	r0, r0, r8, lsl r1
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	4d9d0002 	ldcmi	0, cr0, [sp, #8]
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00014418 	andeq	r4, r1, r8, lsl r4
 154:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	5cd20002 	ldclpl	0, cr0, [r2], {2}
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00014534 	andeq	r4, r1, r4, lsr r5
 174:	00000118 	andeq	r0, r0, r8, lsl r1
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	6bf30002 	blvs	ffcc0194 <_estack+0xf7cb0194>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0001464c 	andeq	r4, r1, ip, asr #12
 194:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
       4:	00b70003 	adcseq	r0, r7, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	2f69702f 	svccs	0x0069702f
      24:	70736152 	rsbsvc	r6, r3, r2, asr r1
      28:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      2c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      30:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      34:	534f5452 	movtpl	r5, #62546	; 0xf452
      38:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
      3c:	4f545265 	svcmi	0x00545265
      40:	6f532f53 	svcvs	0x00532f53
      44:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      48:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      4c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
      50:	43472f65 	movtmi	r2, #32613	; 0x7f65
      54:	61522f43 	cmpvs	r2, r3, asr #30
      58:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
      5c:	50797272 	rsbspl	r7, r9, r2, ror r2
      60:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
      64:	2f656d6f 	svccs	0x00656d6f
      68:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
      6c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      70:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      74:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      78:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      7c:	2f534f54 	svccs	0x00534f54
      80:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      84:	534f5452 	movtpl	r5, #62546	; 0xf452
      88:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd61 <_estack+0xf7fefd61>
      8c:	2f656372 	svccs	0x00656372
      90:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      94:	00656475 	rsbeq	r6, r5, r5, ror r4
      98:	726f7000 	rsbvc	r7, pc, #0
      9c:	00632e74 	rsbeq	r2, r3, r4, ror lr
      a0:	70000001 	andvc	r0, r0, r1
      a4:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      a8:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      ac:	00020068 	andeq	r0, r2, r8, rrx
      b0:	726f7000 	rsbvc	r7, pc, #0
      b4:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      b8:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      bc:	00000100 	andeq	r0, r0, r0, lsl #2
      c0:	00010500 	andeq	r0, r1, r0, lsl #10
      c4:	00000205 	andeq	r0, r0, r5, lsl #4
      c8:	f7030001 			; <UNDEFINED> instruction: 0xf7030001
      cc:	10050100 	andne	r0, r5, r0, lsl #2
      d0:	4e0e05bd 	mcrmi	5, 0, r0, cr14, cr13, {5}
      d4:	056e1205 	strbeq	r1, [lr, #-517]!	; 0xfffffdfb
      d8:	10052e2c 	andne	r2, r5, ip, lsr #28
      dc:	4b0e052e 	blmi	38159c <__bss_end+0x36ba4c>
      e0:	05681005 	strbeq	r1, [r8, #-5]!
      e4:	1205670e 	andne	r6, r5, #3670016	; 0x380000
      e8:	2e100567 	cfmsc32cs	mvfx0, mvfx0, mvfx7
      ec:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
      f0:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
      f4:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
      f8:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
      fc:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     100:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     104:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     108:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     10c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     110:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     114:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     118:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     11c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     120:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     124:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     128:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     12c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     130:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     134:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     138:	10056a12 	andne	r6, r5, r2, lsl sl
     13c:	4b0e052e 	blmi	3815fc <__bss_end+0x36baac>
     140:	056a1005 	strbeq	r1, [sl, #-5]!
     144:	21056808 	tstcs	r5, r8, lsl #16
     148:	2e04052e 	cfsh32cs	mvfx0, mvfx4, #30
     14c:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
     150:	1005a10e 	andne	sl, r5, lr, lsl #2
     154:	6809056c 	stmdavs	r9, {r2, r3, r5, r6, r8, sl}
     158:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     15c:	02051622 	andeq	r1, r5, #35651584	; 0x2200000
     160:	0905314d 	stmdbeq	r5, {r0, r2, r3, r6, r8, ip, sp}
     164:	2f010531 	svccs	0x00010531
     168:	0a034d4e 	beq	d36a8 <__bss_end+0xbdb58>
     16c:	9f020582 	svcls	0x00020582
     170:	31070531 	tstcc	r7, r1, lsr r5
     174:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     178:	05884b01 	streq	r4, [r8, #2817]	; 0xb01
     17c:	02056b11 	andeq	r6, r5, #17408	; 0x4400
     180:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     184:	0d053007 	stceq	0, cr3, [r5, #-28]	; 0xffffffe4
     188:	4b07052e 	blmi	1c1648 <__bss_end+0x1abaf8>
     18c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     190:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     194:	4b07052e 	blmi	1c1654 <__bss_end+0x1abb04>
     198:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     19c:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1a0:	4b07052e 	blmi	1c1660 <__bss_end+0x1abb10>
     1a4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1a8:	4c844c02 	stcmi	12, cr4, [r4], {2}
     1ac:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     1b0:	0101000e 	tsteq	r1, lr
     1b4:	000000d3 	ldrdeq	r0, [r0], -r3
     1b8:	00670003 	rsbeq	r0, r7, r3
     1bc:	01020000 	mrseq	r0, (UNDEF: 2)
     1c0:	000d0efb 	strdeq	r0, [sp], -fp
     1c4:	01010101 	tsteq	r1, r1, lsl #2
     1c8:	01000000 	mrseq	r0, (UNDEF: 0)
     1cc:	2f010000 	svccs	0x00010000
     1d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     1d4:	2f69702f 	svccs	0x0069702f
     1d8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     1dc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     1e0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     1e4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     1e8:	534f5452 	movtpl	r5, #62546	; 0xf452
     1ec:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     1f0:	4f545265 	svcmi	0x00545265
     1f4:	6f532f53 	svcvs	0x00532f53
     1f8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     1fc:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     200:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     204:	43472f65 	movtmi	r2, #32613	; 0x7f65
     208:	61522f43 	cmpvs	r2, r3, asr #30
     20c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     210:	50797272 	rsbspl	r7, r9, r2, ror r2
     214:	70000069 	andvc	r0, r0, r9, rrx
     218:	6974726f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     21c:	632e7273 			; <UNDEFINED> instruction: 0x632e7273
     220:	00000100 	andeq	r0, r0, r0, lsl #2
     224:	00010500 	andeq	r0, r1, r0, lsl #10
     228:	03440205 	movteq	r0, #16901	; 0x4205
     22c:	f5030001 			; <UNDEFINED> instruction: 0xf5030001
     230:	0c050100 	stfeqs	f0, [r5], {-0}
     234:	a0020552 	andge	r0, r2, r2, asr r5
     238:	02342f2f 	eorseq	r2, r4, #47, 30	; 0xbc
     23c:	01051324 	tsteq	r5, r4, lsr #6
     240:	d60e036c 	strle	r0, [lr], -ip, ror #6
     244:	31160205 	tstcc	r6, r5, lsl #4
     248:	31152c02 	tstcc	r5, r2, lsl #24
     24c:	24020105 	strcs	r0, [r2], #-261	; 0xfffffefb
     250:	031c0513 	tsteq	ip, #79691776	; 0x4c00000
     254:	02056616 	andeq	r6, r5, #23068672	; 0x1600000
     258:	132c0213 			; <UNDEFINED> instruction: 0x132c0213
     25c:	0201052f 	andeq	r0, r1, #197132288	; 0xbc00000
     260:	2a031324 	bcs	c4ef8 <__bss_end+0xaf3a8>
     264:	4c020566 	cfstr32mi	mvfx0, [r2], {102}	; 0x66
     268:	0a031305 	beq	c4e84 <__bss_end+0xaf334>
     26c:	9f01059e 	svcls	0x0001059e
     270:	4b1805a1 	blmi	6018fc <__bss_end+0x5ebdac>
     274:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     278:	19054d14 	stmdbne	r5, {r2, r4, r8, sl, fp, lr}
     27c:	4a0505a2 	bmi	14190c <__bss_end+0x12bdbc>
     280:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
     284:	0e02a601 	cfmadd32eq	mvax0, mvfx10, mvfx2, mvfx1
     288:	bc010100 	stflts	f0, [r1], {-0}
     28c:	03000002 	movweq	r0, #2
     290:	0000f300 	andeq	pc, r0, r0, lsl #6
     294:	fb010200 	blx	40a9e <__bss_end+0x2af4e>
     298:	01000d0e 	tsteq	r0, lr, lsl #26
     29c:	00010101 	andeq	r0, r1, r1, lsl #2
     2a0:	00010000 	andeq	r0, r1, r0
     2a4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     2a8:	2f656d6f 	svccs	0x00656d6f
     2ac:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     2b0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     2b4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     2b8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     2bc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     2c0:	2f534f54 	svccs	0x00534f54
     2c4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2c8:	534f5452 	movtpl	r5, #62546	; 0xf452
     2cc:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffffa5 <_estack+0xf7feffa5>
     2d0:	00656372 	rsbeq	r6, r5, r2, ror r3
     2d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 220 <_start-0x7de0>
     2d8:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     2dc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     2e0:	72656270 	rsbvc	r6, r5, #112, 4
     2e4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     2e8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     2ec:	4f545265 	svcmi	0x00545265
     2f0:	72462f53 	subvc	r2, r6, #332	; 0x14c
     2f4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     2f8:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     2fc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     300:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     304:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     308:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     30c:	2f656d6f 	svccs	0x00656d6f
     310:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     314:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     318:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     31c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     320:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     324:	2f534f54 	svccs	0x00534f54
     328:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     32c:	534f5452 	movtpl	r5, #62546	; 0xf452
     330:	756f532f 	strbvc	r5, [pc, #-815]!	; 9 <_start-0x7ff7>
     334:	2f656372 	svccs	0x00656372
     338:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     33c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     340:	4343472f 	movtmi	r4, #14127	; 0x372f
     344:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     348:	72656270 	rsbvc	r6, r5, #112, 4
     34c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     350:	72630000 	rsbvc	r0, r3, #0
     354:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     358:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     35c:	00000100 	andeq	r0, r0, r0, lsl #2
     360:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     364:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     368:	6f700000 	svcvs	0x00700000
     36c:	616d7472 	smcvs	55106	; 0xd742
     370:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     374:	00030068 	andeq	r0, r3, r8, rrx
     378:	6f726300 	svcvs	0x00726300
     37c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     380:	00682e65 	rsbeq	r2, r8, r5, ror #28
     384:	00000002 	andeq	r0, r0, r2
     388:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     38c:	0105f002 	tsteq	r5, r2	; <UNPREDICTABLE>
     390:	018a0300 	orreq	r0, sl, r0, lsl #6
     394:	bf1e0501 	svclt	0x001e0501
     398:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     39c:	05056a1a 	streq	r6, [r5, #-2586]	; 0xfffff5e6
     3a0:	4c17054a 	cfldr32mi	mvfx0, [r7], {74}	; 0x4a
     3a4:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     3a8:	0f053205 	svceq	0x00053205
     3ac:	4e180568 	cfmsc32mi	mvfx0, mvfx8, mvfx8
     3b0:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
     3b4:	24056718 	strcs	r6, [r5], #-1816	; 0xfffff8e8
     3b8:	69030567 	stmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl}
     3bc:	69678783 	stmdbvs	r7!, {r0, r1, r7, r8, r9, sl, pc}^
     3c0:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     3c4:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     3c8:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     3cc:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     3d0:	08060304 	stmdaeq	r6, {r2, r8, r9}
     3d4:	09056a92 	stmdbeq	r5, {r1, r4, r7, r9, fp, sp, lr}
     3d8:	2f01054d 	svccs	0x0001054d
     3dc:	a32405be 			; <UNDEFINED> instruction: 0xa32405be
     3e0:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     3e4:	02056b34 	andeq	r6, r5, #52, 22	; 0xd000
     3e8:	1205694a 	andne	r6, r5, #1212416	; 0x128000
     3ec:	4a040584 	bmi	101a04 <__bss_end+0xebeb4>
     3f0:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     3f4:	03054a61 	movweq	r4, #23137	; 0x5a61
     3f8:	5905a44a 	stmdbpl	r5, {r1, r3, r6, sl, sp, pc}
     3fc:	4a03054a 	bmi	c192c <__bss_end+0xabddc>
     400:	05850405 	streq	r0, [r5, #1029]	; 0x405
     404:	03056a32 	movweq	r6, #23090	; 0x5a32
     408:	8401054a 	strhi	r0, [r1], #-1354	; 0xfffffab6
     40c:	6a0705da 	bvs	1c1b7c <__bss_end+0x1ac02c>
     410:	05330305 	ldreq	r0, [r3, #-773]!	; 0xfffffcfb
     414:	1405a024 	strne	sl, [r5], #-36	; 0xffffffdc
     418:	4b04054a 	blmi	101948 <__bss_end+0xebdf8>
     41c:	a0840305 	addge	r0, r4, r5, lsl #6
     420:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     424:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     428:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     42c:	03060905 	movweq	r0, #26885	; 0x6905
     430:	05900873 	ldreq	r0, [r0, #2163]	; 0x873
     434:	01054a07 	tsteq	r5, r7, lsl #20
     438:	be4a0f03 	cdplt	15, 4, cr0, cr10, cr3, {0}
     43c:	05691105 	strbeq	r1, [r9, #-261]!	; 0xfffffefb
     440:	0f054a25 	svceq	0x00054a25
     444:	4b070566 	blmi	1c19e4 <__bss_end+0x1abe94>
     448:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
     44c:	1b059f0f 	blne	168090 <__bss_end+0x152540>
     450:	4a0505a1 	bmi	141adc <__bss_end+0x12bf8c>
     454:	05500b05 	ldrbeq	r0, [r0, #-2821]	; 0xfffff4fb
     458:	2305671b 	movwcs	r6, #22299	; 0x571b
     45c:	6a080583 	bvs	201a70 <__bss_end+0x1ebf20>
     460:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
     464:	1e05660b 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx11
     468:	4a1c054c 	bmi	7019a0 <__bss_end+0x6ebe50>
     46c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     470:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
     474:	a5050531 	strge	r0, [r5, #-1329]	; 0xfffffacf
     478:	05851f05 	streq	r1, [r5, #3845]	; 0xf05
     47c:	06054a07 	streq	r4, [r5], -r7, lsl #20
     480:	8504054c 	strhi	r0, [r4, #-1356]	; 0xfffffab4
     484:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     488:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     48c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     490:	03060a05 	movweq	r0, #27141	; 0x6a05
     494:	05900865 	ldreq	r0, [r0, #2149]	; 0x865
     498:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     49c:	054a6e03 	strbeq	r6, [sl, #-3587]	; 0xfffff1fd
     4a0:	11054a07 	tstne	r5, r7, lsl #20
     4a4:	054a3103 	strbeq	r3, [sl, #-259]	; 0xfffffefd
     4a8:	40088301 	andmi	r8, r8, r1, lsl #6
     4ac:	31680205 	cmncc	r8, r5, lsl #4
     4b0:	05310705 	ldreq	r0, [r1, #-1797]!	; 0xfffff8fb
     4b4:	05053023 	streq	r3, [r5, #-35]	; 0xffffffdd
     4b8:	4f03054a 	svcmi	0x0003054a
     4bc:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
     4c0:	0807059e 	stmdaeq	r7, {r1, r2, r3, r4, r7, r8, sl}
     4c4:	03020520 	movweq	r0, #9504	; 0x2520
     4c8:	02004a0c 	andeq	r4, r0, #12, 20	; 0xc000
     4cc:	02060104 	andeq	r0, r6, #4, 2
     4d0:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     4d4:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
     4d8:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     4dc:	05a10603 	streq	r0, [r1, #1539]!	; 0x603
     4e0:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     4e4:	16059e03 	strne	r9, [r5], -r3, lsl #28
     4e8:	03040200 	movweq	r0, #16896	; 0x4200
     4ec:	0002054a 	andeq	r0, r2, sl, asr #10
     4f0:	68030402 	stmdavs	r3, {r1, sl}
     4f4:	74030405 	strvc	r0, [r3], #-1029	; 0xfffffbfb
     4f8:	0301054a 	movweq	r0, #5450	; 0x154a
     4fc:	05a22e0d 	streq	r2, [r2, #3597]!	; 0xe0d
     500:	02056912 	andeq	r6, r5, #294912	; 0x48000
     504:	0003054a 	andeq	r0, r3, sl, asr #10
     508:	30030402 	andcc	r0, r3, r2, lsl #8
     50c:	02004f05 	andeq	r4, r0, #5, 30
     510:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
     514:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
     518:	6b660104 	blvs	1980930 <__bss_end+0x196ade0>
     51c:	19054b4b 	stmdbne	r5, {r0, r1, r3, r6, r8, r9, fp, lr}
     520:	6721054e 	strvs	r0, [r1, -lr, asr #10]!
     524:	08670105 	stmdaeq	r7!, {r0, r2, r8}^
     528:	89220524 	stmdbhi	r2!, {r2, r5, r8, sl}
     52c:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     530:	05834b02 	streq	r4, [r3, #2818]	; 0xb02
     534:	3705a015 	smladcc	r5, r5, r0, sl
     538:	6604054a 	strvs	r0, [r4], -sl, asr #10
     53c:	6a4c0b05 	bvs	1303158 <__bss_end+0x12ed608>
     540:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
     544:	0a022f01 	beq	8c150 <__bss_end+0x76600>
     548:	4b010100 	blmi	40950 <__bss_end+0x2ae00>
     54c:	03000002 	movweq	r0, #2
     550:	00016f00 	andeq	r6, r1, r0, lsl #30
     554:	fb010200 	blx	40d5e <__bss_end+0x2b20e>
     558:	01000d0e 	tsteq	r0, lr, lsl #26
     55c:	00010101 	andeq	r0, r1, r1, lsl #2
     560:	00010000 	andeq	r0, r1, r0
     564:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     568:	2f656d6f 	svccs	0x00656d6f
     56c:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     570:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     574:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     578:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     57c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     580:	2f534f54 	svccs	0x00534f54
     584:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     588:	534f5452 	movtpl	r5, #62546	; 0xf452
     58c:	756f532f 	strbvc	r5, [pc, #-815]!	; 265 <_start-0x7d9b>
     590:	00656372 	rsbeq	r6, r5, r2, ror r3
     594:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     598:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     59c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     5a0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     5a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     5a8:	61652d65 	cmnvs	r5, r5, ror #26
     5ac:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     5b0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     5b4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     5b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     5bc:	73752f00 	cmnvc	r5, #0, 30
     5c0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     5c4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5c8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     5cc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     5d0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     5d4:	73752f00 	cmnvc	r5, #0, 30
     5d8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     5dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5e0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     5e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     5e8:	6f682f00 	svcvs	0x00682f00
     5ec:	702f656d 	eorvc	r6, pc, sp, ror #10
     5f0:	61522f69 	cmpvs	r2, r9, ror #30
     5f4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     5f8:	50797272 	rsbspl	r7, r9, r2, ror r2
     5fc:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     600:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     604:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     608:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     60c:	2f534f54 	svccs	0x00534f54
     610:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     614:	702f6563 	eorvc	r6, pc, r3, ror #10
     618:	6174726f 	cmnvs	r4, pc, ror #4
     61c:	2f656c62 	svccs	0x00656c62
     620:	2f434347 	svccs	0x00434347
     624:	70736152 	rsbsvc	r6, r3, r2, asr r1
     628:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     62c:	00695079 	rsbeq	r5, r9, r9, ror r0
     630:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 57c <_start-0x7a84>
     634:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     638:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     63c:	72656270 	rsbvc	r6, r5, #112, 4
     640:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     644:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     648:	4f545265 	svcmi	0x00545265
     64c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     650:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     654:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     658:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     65c:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     660:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     664:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
     668:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     66c:	00010063 	andeq	r0, r1, r3, rrx
     670:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     674:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     678:	00020068 	andeq	r0, r2, r8, rrx
     67c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     680:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     684:	00030068 	andeq	r0, r3, r8, rrx
     688:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
     68c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     690:	00000300 	andeq	r0, r0, r0, lsl #6
     694:	6b636f6c 	blvs	18dc44c <__bss_end+0x18c68fc>
     698:	0300682e 	movweq	r6, #2094	; 0x82e
     69c:	74730000 	ldrbtvc	r0, [r3], #-0
     6a0:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     6a4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     6a8:	6f700000 	svcvs	0x00700000
     6ac:	616d7472 	smcvs	55106	; 0xd742
     6b0:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     6b4:	00050068 	andeq	r0, r5, r8, rrx
     6b8:	73696c00 	cmnvc	r9, #0, 24
     6bc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     6c0:	00000006 	andeq	r0, r0, r6
     6c4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     6c8:	010d5402 	tsteq	sp, r2, lsl #8
     6cc:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     6d0:	86240501 	strthi	r0, [r4], -r1, lsl #10
     6d4:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     6d8:	2c054e1e 	stccs	14, cr4, [r5], {30}
     6dc:	4a1a056a 	bmi	681c8c <__bss_end+0x66c13c>
     6e0:	054b3005 	strbeq	r3, [fp, #-5]
     6e4:	1a054a1e 	bne	152f64 <__bss_end+0x13d414>
     6e8:	6701054c 	strvs	r0, [r1, -ip, asr #10]
     6ec:	84160586 	ldrhi	r0, [r6], #-1414	; 0xfffffa7a
     6f0:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     6f4:	05a50a05 	streq	r0, [r5, #2565]!	; 0xa05
     6f8:	18056821 	stmdane	r5, {r0, r5, fp, sp, lr}
     6fc:	4b24054a 	blmi	901c2c <__bss_end+0x8ec0dc>
     700:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
     704:	1e054b09 	vmlane.f64	d4, d5, d9
     708:	4b12054a 	blmi	481c38 <__bss_end+0x46c0e8>
     70c:	691d0567 	ldmdbvs	sp, {r0, r1, r2, r5, r6, r8, sl}
     710:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
     714:	01054a1d 	tsteq	r5, sp, lsl sl
     718:	14058667 	strne	r8, [r5], #-1639	; 0xfffff999
     71c:	030405a3 	movweq	r0, #17827	; 0x45a3
     720:	0e056609 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx9
     724:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
     728:	03058214 	movweq	r8, #21012	; 0x5214
     72c:	007c0566 	rsbseq	r0, ip, r6, ror #10
     730:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     734:	02004605 	andeq	r4, r0, #5242880	; 0x500000
     738:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     73c:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     740:	03054a01 	movweq	r4, #23041	; 0x5a01
     744:	01040200 	mrseq	r0, R12_usr
     748:	6d24052e 	cfstr32vs	mvfx0, [r4, #-184]!	; 0xffffff48
     74c:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     750:	24054b0f 	strcs	r4, [r5], #-2831	; 0xfffff4f1
     754:	4b1c054a 	blmi	701c84 <__bss_end+0x6ec134>
     758:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
     75c:	0a056a1d 	beq	15afd8 <__bss_end+0x145488>
     760:	4a1d0568 	bmi	741d08 <__bss_end+0x72c1b8>
     764:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     768:	05851005 	streq	r1, [r5, #5]
     76c:	25054a35 	strcs	r4, [r5, #-2613]	; 0xfffff5cb
     770:	2f10054a 	svccs	0x0010054a
     774:	054a3505 	strbeq	r3, [sl, #-1285]	; 0xfffffafb
     778:	09054a25 	stmdbeq	r5, {r0, r2, r5, r9, fp, lr}
     77c:	690c0532 	stmdbvs	ip, {r1, r4, r5, r8, sl}
     780:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     784:	13056823 	movwne	r6, #22563	; 0x5823
     788:	4d1e054a 	cfldr32mi	mvfx0, [lr, #-296]	; 0xfffffed8
     78c:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
     790:	01054a1d 	tsteq	r5, sp, lsl sl
     794:	00080267 	andeq	r0, r8, r7, ror #4
     798:	05570101 	ldrbeq	r0, [r7, #-257]	; 0xfffffeff
     79c:	00030000 	andeq	r0, r3, r0
     7a0:	0000017a 	andeq	r0, r0, sl, ror r1
     7a4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7a8:	0101000d 	tsteq	r1, sp
     7ac:	00000101 	andeq	r0, r0, r1, lsl #2
     7b0:	00000100 	andeq	r0, r0, r0, lsl #2
     7b4:	6f682f01 	svcvs	0x00682f01
     7b8:	702f656d 	eorvc	r6, pc, sp, ror #10
     7bc:	61522f69 	cmpvs	r2, r9, ror #30
     7c0:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     7c4:	50797272 	rsbspl	r7, r9, r2, ror r2
     7c8:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     7cc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     7d0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     7d4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     7d8:	2f534f54 	svccs	0x00534f54
     7dc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     7e0:	2f006563 	svccs	0x00006563
     7e4:	2f727375 	svccs	0x00727375
     7e8:	2f62696c 	svccs	0x0062696c
     7ec:	2f636367 	svccs	0x00636367
     7f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     7f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     7f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7fc:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
     800:	2f312e33 	svccs	0x00312e33
     804:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     808:	00656475 	rsbeq	r6, r5, r5, ror r4
     80c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     810:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     814:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     818:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     81c:	2f62696c 	svccs	0x0062696c
     820:	00737973 	rsbseq	r7, r3, r3, ror r9
     824:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     828:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     82c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     830:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     834:	0062696c 	rsbeq	r6, r2, ip, ror #18
     838:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 784 <_start-0x787c>
     83c:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     840:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     844:	72656270 	rsbvc	r6, r5, #112, 4
     848:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     84c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     850:	4f545265 	svcmi	0x00545265
     854:	72462f53 	subvc	r2, r6, #332	; 0x14c
     858:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     85c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     860:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     864:	6f702f65 	svcvs	0x00702f65
     868:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     86c:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     870:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     874:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     878:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     87c:	2f006950 	svccs	0x00006950
     880:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     884:	2f69702f 	svccs	0x0069702f
     888:	70736152 	rsbsvc	r6, r3, r2, asr r1
     88c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     890:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     894:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     898:	534f5452 	movtpl	r5, #62546	; 0xf452
     89c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     8a0:	4f545265 	svcmi	0x00545265
     8a4:	6f532f53 	svcvs	0x00532f53
     8a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     8ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     8b4:	75710000 	ldrbvc	r0, [r1, #-0]!
     8b8:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     8bc:	00010063 	andeq	r0, r1, r3, rrx
     8c0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     8c4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     8c8:	00020068 	andeq	r0, r2, r8, rrx
     8cc:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     8d0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     8d4:	00030068 	andeq	r0, r3, r8, rrx
     8d8:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
     8dc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     8e0:	00000300 	andeq	r0, r0, r0, lsl #6
     8e4:	6b636f6c 	blvs	18dc69c <__bss_end+0x18c6b4c>
     8e8:	0300682e 	movweq	r6, #2094	; 0x82e
     8ec:	74730000 	ldrbtvc	r0, [r3], #-0
     8f0:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     8f4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     8f8:	6f700000 	svcvs	0x00700000
     8fc:	616d7472 	smcvs	55106	; 0xd742
     900:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     904:	00050068 	andeq	r0, r5, r8, rrx
     908:	73696c00 	cmnvc	r9, #0, 24
     90c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     910:	74000006 	strvc	r0, [r0], #-6
     914:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     918:	00060068 	andeq	r0, r6, r8, rrx
     91c:	01050000 	mrseq	r0, (UNDEF: 5)
     920:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     924:	0300010f 	movweq	r0, #271	; 0x10f
     928:	05010297 	streq	r0, [r1, #-663]	; 0xfffffd69
     92c:	1c05a102 	stfned	f2, [r5], {2}
     930:	4a300530 	bmi	c01df8 <__bss_end+0xbec2a8>
     934:	054a4405 	strbeq	r4, [sl, #-1029]	; 0xfffffbfb
     938:	25054a3b 	strcs	r4, [r5, #-2619]	; 0xfffff5c5
     93c:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     940:	054b1e05 	strbeq	r1, [fp, #-3589]	; 0xfffff1fb
     944:	1605671f 			; <UNDEFINED> instruction: 0x1605671f
     948:	4b20054a 	blmi	801e78 <__bss_end+0x7ec328>
     94c:	054a3605 	strbeq	r3, [sl, #-1541]	; 0xfffff9fb
     950:	6c054a41 			; <UNDEFINED> instruction: 0x6c054a41
     954:	4a63052e 	bmi	18c1e14 <__bss_end+0x18ac2c4>
     958:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
     95c:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
     960:	0505674b 	streq	r6, [r5, #-1867]	; 0xfffff8b5
     964:	6d080568 	cfstr32vs	mvfx0, [r8, #-416]	; 0xfffffe60
     968:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     96c:	09054c23 	stmdbeq	r5, {r0, r1, r5, sl, fp, lr}
     970:	6607054a 	strvs	r0, [r7], -sl, asr #10
     974:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
     978:	05835104 	streq	r5, [r3, #260]	; 0x104
     97c:	09058502 	stmdbeq	r5, {r1, r8, sl, pc}
     980:	2f010532 	svccs	0x00010532
     984:	d90e056a 	stmdble	lr, {r1, r3, r5, r6, r8, sl}
     988:	05510405 	ldrbeq	r0, [r1, #-1029]	; 0xfffffbfb
     98c:	0505681d 	streq	r6, [r5, #-2077]	; 0xfffff7e3
     990:	6a330567 	bvs	cc1f34 <__bss_end+0xcac3e4>
     994:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
     998:	17054c2b 	strne	r4, [r5, -fp, lsr #24]
     99c:	4b120566 	blmi	481f3c <__bss_end+0x46c3ec>
     9a0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     9a4:	1c054e1a 	stcne	14, cr4, [r5], {26}
     9a8:	67050567 	strvs	r0, [r5, -r7, ror #10]
     9ac:	056e0d05 	strbeq	r0, [lr, #-3333]!	; 0xfffff2fb
     9b0:	09056b05 	stmdbeq	r5, {r0, r2, r8, r9, fp, sp, lr}
     9b4:	2f010551 	svccs	0x00010551
     9b8:	6601d003 	strvs	sp, [r1], -r3
     9bc:	05d71605 	ldrbeq	r1, [r7, #1541]	; 0x605
     9c0:	4a0b0303 	bmi	2c15d4 <__bss_end+0x2aba84>
     9c4:	05320f05 	ldreq	r0, [r2, #-3845]!	; 0xfffff0fb
     9c8:	06054a2c 	streq	r4, [r5], -ip, lsr #20
     9cc:	4d05054a 	cfstr32mi	mvfx0, [r5, #-296]	; 0xfffffed8
     9d0:	05860905 	streq	r0, [r6, #2309]	; 0x905
     9d4:	24054a07 	strcs	r4, [r5], #-2567	; 0xfffff5f9
     9d8:	4a0a054c 	bmi	281f10 <__bss_end+0x26c3c0>
     9dc:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
     9e0:	05055007 	streq	r5, [r5, #-7]
     9e4:	320c0532 	andcc	r0, ip, #209715200	; 0xc800000
     9e8:	054e1605 	strbeq	r1, [lr, #-1541]	; 0xfffff9fb
     9ec:	06052e07 	streq	r2, [r5], -r7, lsl #28
     9f0:	330d054e 	movwcc	r0, #54606	; 0xd54e
     9f4:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
     9f8:	14056a06 	strne	r6, [r5], #-2566	; 0xfffff5fa
     9fc:	4e030567 	cfsh32mi	mvfx0, mvfx3, #55
     a00:	02002f33 	andeq	r2, r0, #51, 30	; 0xcc
     a04:	9e060104 	adflss	f0, f6, f4
     a08:	03040200 	movweq	r0, #16896	; 0x4200
     a0c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     a10:	02008204 	andeq	r8, r0, #4, 4	; 0x40000000
     a14:	05660604 	strbeq	r0, [r6, #-1540]!	; 0xfffff9fc
     a18:	04020007 	streq	r0, [r2], #-7
     a1c:	05310606 	ldreq	r0, [r1, #-1542]!	; 0xfffff9fa
     a20:	04020005 	streq	r0, [r2], #-5
     a24:	0805ba06 	stmdaeq	r5, {r1, r2, r9, fp, ip, sp, pc}
     a28:	6606054c 	strvs	r0, [r6], -ip, asr #10
     a2c:	054d1c05 	strbeq	r1, [sp, #-3077]	; 0xfffff3fb
     a30:	05894a05 	streq	r4, [r9, #2565]	; 0xa05
     a34:	07055109 	streq	r5, [r5, -r9, lsl #2]
     a38:	4c06054a 	cfstr32mi	mvfx0, [r6], {74}	; 0x4a
     a3c:	05500505 	ldrbeq	r0, [r0, #-1285]	; 0xfffffafb
     a40:	04054b0e 	streq	r4, [r5], #-2830	; 0xfffff4f2
     a44:	4b0d0550 	blmi	341f8c <__bss_end+0x32c43c>
     a48:	05330b05 	ldreq	r0, [r3, #-2821]!	; 0xfffff4fb
     a4c:	04020001 	streq	r0, [r2], #-1
     a50:	d2033103 	andle	r3, r3, #-1073741824	; 0xc0000000
     a54:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
     a58:	05d60c03 	ldrbeq	r0, [r6, #3075]	; 0xc03
     a5c:	2b054c0e 	blcs	153a9c <__bss_end+0x13df4c>
     a60:	4a05054a 	bmi	141f90 <__bss_end+0x12c440>
     a64:	054e0405 	strbeq	r0, [lr, #-1029]	; 0xfffffbfb
     a68:	0605860f 	streq	r8, [r5], -pc, lsl #12
     a6c:	4c09054a 	cfstr32mi	mvfx0, [r9], {74}	; 0x4a
     a70:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     a74:	0a054c24 	beq	153b0c <__bss_end+0x13dfbc>
     a78:	6608054a 	strvs	r0, [r8], -sl, asr #10
     a7c:	054e0905 	strbeq	r0, [lr, #-2309]	; 0xfffff6fb
     a80:	10056823 	andne	r6, r5, r3, lsr #16
     a84:	05820903 	streq	r0, [r2, #2307]	; 0x903
     a88:	0c054a05 			; <UNDEFINED> instruction: 0x0c054a05
     a8c:	09056b69 	stmdbeq	r5, {r0, r3, r5, r6, r8, r9, fp, sp, lr}
     a90:	2f01054f 	svccs	0x0001054f
     a94:	d716056a 	ldrle	r0, [r6, -sl, ror #10]
     a98:	0d030305 	stceq	3, cr0, [r3, #-20]	; 0xffffffec
     a9c:	320f054a 	andcc	r0, pc, #310378496	; 0x12800000
     aa0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     aa4:	05054d1c 	streq	r4, [r5, #-3356]	; 0xfffff2e4
     aa8:	68070568 	stmdavs	r7, {r3, r5, r6, r8, sl}
     aac:	056b1105 	strbeq	r1, [fp, #-261]!	; 0xfffffefb
     ab0:	0a054a06 	beq	1532d0 <__bss_end+0x13d780>
     ab4:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
     ab8:	25054a08 	strcs	r4, [r5, #-2568]	; 0xfffff5f8
     abc:	4a0b054c 	bmi	2c1ff4 <__bss_end+0x2ac4a4>
     ac0:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
     ac4:	1a054c08 	bne	153aec <__bss_end+0x13df9c>
     ac8:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     acc:	08056a0a 	stmdaeq	r5, {r1, r3, r9, fp, sp, lr}
     ad0:	4e25054a 	cfsh64mi	mvdx0, mvdx5, #42
     ad4:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     ad8:	08056609 	stmdaeq	r5, {r0, r3, r9, sl, sp, lr}
     adc:	3305054d 	movwcc	r0, #21837	; 0x554d
     ae0:	052f0c05 	streq	r0, [pc, #-3077]!	; fffffee3 <_estack+0xf7fefee3>
     ae4:	07054e16 	smladeq	r5, r6, lr, r4
     ae8:	4e06052e 	cfsh32mi	mvfx0, mvfx6, #30
     aec:	05300d05 	ldreq	r0, [r0, #-3333]!	; 0xfffff2fb
     af0:	06054c0c 	streq	r4, [r5], -ip, lsl #24
     af4:	6714056a 	ldrvs	r0, [r4, -sl, ror #10]
     af8:	334e0305 	movtcc	r0, #58117	; 0xe305
     afc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     b00:	009e0601 	addseq	r0, lr, r1, lsl #12
     b04:	66030402 	strvs	r0, [r3], -r2, lsl #8
     b08:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     b0c:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     b10:	07056606 	streq	r6, [r5, -r6, lsl #12]
     b14:	06040200 	streq	r0, [r4], -r0, lsl #4
     b18:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
     b1c:	06040200 	streq	r0, [r4], -r0, lsl #4
     b20:	4c0805ba 	cfstr32mi	mvfx0, [r8], {186}	; 0xba
     b24:	05660605 	strbeq	r0, [r6, #-1541]!	; 0xfffff9fb
     b28:	4a11031c 	bmi	4417a0 <__bss_end+0x42bc50>
     b2c:	834a0505 	movthi	r0, #42245	; 0xa505
     b30:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
     b34:	06054a07 	streq	r4, [r5], -r7, lsl #20
     b38:	5005054c 	andpl	r0, r5, ip, asr #10
     b3c:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
     b40:	0d054f04 	stceq	15, cr4, [r5, #-16]
     b44:	300b054b 	andcc	r0, fp, fp, asr #10
     b48:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
     b4c:	6a310304 	bvs	c41764 <__bss_end+0xc2bc14>
     b50:	05c11905 	strbeq	r1, [r1, #2309]	; 0x905
     b54:	05054d0e 	streq	r4, [r5, #-3342]	; 0xfffff2f2
     b58:	4e04054a 	cfsh32mi	mvfx0, mvfx4, #42
     b5c:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
     b60:	0f054a04 	svceq	0x00054a04
     b64:	4a06056b 	bmi	182118 <__bss_end+0x16c5c8>
     b68:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
     b6c:	24054a07 	strcs	r4, [r5], #-2567	; 0xfffff5f9
     b70:	4a0a054c 	bmi	2820a8 <__bss_end+0x26c558>
     b74:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
     b78:	23054e09 	movwcs	r4, #24073	; 0x5e09
     b7c:	03100568 	tsteq	r0, #104, 10	; 0x1a000000
     b80:	05058209 	streq	r8, [r5, #-521]	; 0xfffffdf7
     b84:	690c054a 	stmdbvs	ip, {r1, r3, r6, r8, sl}
     b88:	5009056a 	andpl	r0, r9, sl, ror #10
     b8c:	6a2f0105 	bvs	bc0fa8 <__bss_end+0xbab458>
     b90:	05870205 	streq	r0, [r7, #517]	; 0x205
     b94:	02052f0c 	andeq	r2, r5, #12, 30	; 0x30
     b98:	30090567 	andcc	r0, r9, r7, ror #10
     b9c:	6a2f0105 	bvs	bc0fb8 <__bss_end+0xbab468>
     ba0:	05870b05 	streq	r0, [r7, #2821]	; 0xb05
     ba4:	01056809 	tsteq	r5, r9, lsl #16
     ba8:	1405862f 	strne	r8, [r5], #-1583	; 0xfffff9d1
     bac:	4a020587 	bmi	821d0 <__bss_end+0x6c680>
     bb0:	4b01054b 	blmi	420e4 <__bss_end+0x2c594>
     bb4:	05662203 	strbeq	r2, [r6, #-515]!	; 0xfffffdfd
     bb8:	0405bb0d 	streq	fp, [r5], #-2829	; 0xfffff4f3
     bbc:	0309054a 	movweq	r0, #38218	; 0x954a
     bc0:	1d054a0d 	vstrne	s8, [r5, #-52]	; 0xffffffcc
     bc4:	4a4d0568 	bmi	134216c <__bss_end+0x132c61c>
     bc8:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
     bcc:	20056716 	andcs	r6, r5, r6, lsl r7
     bd0:	4a16054a 	bmi	582100 <__bss_end+0x56c5b0>
     bd4:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     bd8:	05054a24 	streq	r4, [r5, #-2596]	; 0xfffff5dc
     bdc:	4c20054a 	cfstr32mi	mvfx0, [r0], #-296	; 0xfffffed8
     be0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     be4:	4e056b1d 	vmovmi.32	d5[0], r6
     be8:	4a03054a 	bmi	c2118 <__bss_end+0xac5c8>
     bec:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
     bf0:	17054a21 	strne	r4, [r5, -r1, lsr #20]
     bf4:	830e054a 	movwhi	r0, #58698	; 0xe54a
     bf8:	054a2405 	strbeq	r2, [sl, #-1029]	; 0xfffffbfb
     bfc:	23054a05 	movwcs	r4, #23045	; 0x5a05
     c00:	4a35054c 	bmi	d42138 <__bss_end+0xd2c5e8>
     c04:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
     c08:	0d054a18 	vstreq	s8, [r5, #-96]	; 0xffffffa0
     c0c:	4a02054e 	bmi	8214c <__bss_end+0x6c5fc>
     c10:	6a670105 	bvs	19c102c <__bss_end+0x19ab4dc>
     c14:	059f0d05 	ldreq	r0, [pc, #3333]	; 1921 <_start-0x66df>
     c18:	17054a04 	strne	r4, [r5, -r4, lsl #20]
     c1c:	4a21054c 	bmi	842154 <__bss_end+0x82c604>
     c20:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     c24:	2505670e 	strcs	r6, [r5, #-1806]	; 0xfffff8f2
     c28:	4a05054a 	bmi	142158 <__bss_end+0x12c608>
     c2c:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
     c30:	32054a18 	andcc	r4, r5, #24, 20	; 0x18000
     c34:	4a54054c 	bmi	150216c <__bss_end+0x14ec61c>
     c38:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
     c3c:	056a6801 	strbeq	r6, [sl, #-2049]!	; 0xfffff7ff
     c40:	08058902 	stmdaeq	r5, {r1, r8, fp, pc}
     c44:	06053231 			; <UNDEFINED> instruction: 0x06053231
     c48:	4e23054a 	cfsh64mi	mvdx0, mvdx3, #42
     c4c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     c50:	06056607 	streq	r6, [r5], -r7, lsl #12
     c54:	3110054e 	tstcc	r0, lr, asr #10
     c58:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     c5c:	66710311 			; <UNDEFINED> instruction: 0x66710311
     c60:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     c64:	66130305 	ldrvs	r0, [r3], -r5, lsl #6
     c68:	05321405 	ldreq	r1, [r2, #-1029]!	; 0xfffffbfb
     c6c:	05316802 	ldreq	r6, [r1, #-2050]!	; 0xfffff7fe
     c70:	05303008 	ldreq	r3, [r0, #-8]!
     c74:	23054a06 	movwcs	r4, #23046	; 0x5a06
     c78:	4a09054c 	bmi	2421b0 <__bss_end+0x22c660>
     c7c:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
     c80:	10054c06 	andne	r4, r5, r6, lsl #24
     c84:	4a050531 	bmi	142150 <__bss_end+0x12c600>
     c88:	77031105 	strvc	r1, [r3, -r5, lsl #2]
     c8c:	4a080566 	bmi	20222c <__bss_end+0x1ec6dc>
     c90:	0d030505 	cfstr32eq	mvfx0, [r3, #-20]	; 0xffffffec
     c94:	32140566 	andscc	r0, r4, #427819008	; 0x19800000
     c98:	05680205 	strbeq	r0, [r8, #-517]!	; 0xfffffdfb
     c9c:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     ca0:	16058502 	strne	r8, [r5], -r2, lsl #10
     ca4:	4a2a052f 	bmi	a82168 <__bss_end+0xa6c618>
     ca8:	05820b05 	streq	r0, [r2, #2821]	; 0xb05
     cac:	09052f02 	stmdbeq	r5, {r1, r8, r9, sl, fp, sp}
     cb0:	2f010530 	svccs	0x00010530
     cb4:	8615056a 	ldrhi	r0, [r5], -sl, ror #10
     cb8:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     cbc:	0905820a 	stmdbeq	r5, {r1, r3, r9, pc}
     cc0:	2f010530 	svccs	0x00010530
     cc4:	85020586 	strhi	r0, [r2, #-1414]	; 0xfffffa7a
     cc8:	052f1605 	streq	r1, [pc, #-1541]!	; 6cb <_start-0x7935>
     ccc:	2a054a34 	bcs	1535a4 <__bss_end+0x13da54>
     cd0:	820b054a 	andhi	r0, fp, #310378496	; 0x12800000
     cd4:	052f0205 	streq	r0, [pc, #-517]!	; ad7 <_start-0x7529>
     cd8:	01053009 	tsteq	r5, r9
     cdc:	15056a2f 	strne	r6, [r5, #-2607]	; 0xfffff5d1
     ce0:	4a330586 	bmi	cc2300 <__bss_end+0xcac7b0>
     ce4:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     ce8:	0905820a 	stmdbeq	r5, {r1, r3, r9, pc}
     cec:	2f010530 	svccs	0x00010530
     cf0:	01000802 	tsteq	r0, r2, lsl #16
     cf4:	0008b401 	andeq	fp, r8, r1, lsl #8
     cf8:	96000300 	strls	r0, [r0], -r0, lsl #6
     cfc:	02000001 	andeq	r0, r0, #1
     d00:	0d0efb01 	vstreq	d15, [lr, #-4]
     d04:	01010100 	mrseq	r0, (UNDEF: 17)
     d08:	00000001 	andeq	r0, r0, r1
     d0c:	01000001 	tsteq	r0, r1
     d10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c5c <_start-0x73a4>
     d14:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     d18:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     d1c:	72656270 	rsbvc	r6, r5, #112, 4
     d20:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     d24:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     d28:	4f545265 	svcmi	0x00545265
     d2c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     d30:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     d34:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     d38:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d3c:	752f0065 	strvc	r0, [pc, #-101]!	; cdf <_start-0x7321>
     d40:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; b7c <_start-0x7484>
     d44:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     d48:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     d4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     d50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     d54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     d58:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
     d5c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     d60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     d64:	2f006564 	svccs	0x00006564
     d68:	2f727375 	svccs	0x00727375
     d6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d70:	2f656475 	svccs	0x00656475
     d74:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     d78:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     d7c:	2f007379 	svccs	0x00007379
     d80:	2f727375 	svccs	0x00727375
     d84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d88:	2f656475 	svccs	0x00656475
     d8c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     d90:	2f006269 	svccs	0x00006269
     d94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     d98:	2f69702f 	svccs	0x0069702f
     d9c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     da0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     da4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     da8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     dac:	534f5452 	movtpl	r5, #62546	; 0xf452
     db0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     db4:	4f545265 	svcmi	0x00545265
     db8:	6f532f53 	svcvs	0x00532f53
     dbc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     dc0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     dc4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     dc8:	6f682f00 	svcvs	0x00682f00
     dcc:	702f656d 	eorvc	r6, pc, sp, ror #10
     dd0:	61522f69 	cmpvs	r2, r9, ror #30
     dd4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     dd8:	50797272 	rsbspl	r7, r9, r2, ror r2
     ddc:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     de0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     de4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     de8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     dec:	2f534f54 	svccs	0x00534f54
     df0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     df4:	702f6563 	eorvc	r6, pc, r3, ror #10
     df8:	6174726f 	cmnvs	r4, pc, ror #4
     dfc:	2f656c62 	svccs	0x00656c62
     e00:	2f434347 	svccs	0x00434347
     e04:	70736152 	rsbsvc	r6, r3, r2, asr r1
     e08:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     e0c:	00695079 	rsbeq	r5, r9, r9, ror r0
     e10:	73617400 	cmnvc	r1, #0, 8
     e14:	632e736b 			; <UNDEFINED> instruction: 0x632e736b
     e18:	00000100 	andeq	r0, r0, r0, lsl #2
     e1c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     e20:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     e24:	00000200 	andeq	r0, r0, r0, lsl #4
     e28:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     e2c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     e30:	00000300 	andeq	r0, r0, r0, lsl #6
     e34:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     e38:	00682e74 	rsbeq	r2, r8, r4, ror lr
     e3c:	6c000003 	stcvs	0, cr0, [r0], {3}
     e40:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     e44:	00030068 	andeq	r0, r3, r8, rrx
     e48:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     e4c:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     e50:	00040068 	andeq	r0, r4, r8, rrx
     e54:	6f727000 	svcvs	0x00727000
     e58:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
     e5c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e60:	70000005 	andvc	r0, r0, r5
     e64:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     e68:	6f726361 	svcvs	0x00726361
     e6c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     e70:	72460000 	subvc	r0, r6, #0
     e74:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     e78:	682e534f 	stmdavs	lr!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
     e7c:	00000500 	andeq	r0, r0, r0, lsl #10
     e80:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     e84:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     e88:	61740000 	cmnvs	r4, r0
     e8c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     e90:	00000500 	andeq	r0, r0, r0, lsl #10
     e94:	00010500 	andeq	r0, r1, r0, lsl #10
     e98:	1ba00205 	blne	fe8016b4 <_estack+0xf67f16b4>
     e9c:	9b030001 	blls	c0ea8 <__bss_end+0xab358>
     ea0:	0d050103 	stfeqs	f0, [r5, #-12]
     ea4:	05f20903 	ldrbeq	r0, [r2, #2307]!	; 0x903
     ea8:	1b05a004 	blne	168ec0 <__bss_end+0x153370>
     eac:	05661803 	strbeq	r1, [r6, #-2051]!	; 0xfffff7fd
     eb0:	11054a25 	tstne	r5, r5, lsr #20
     eb4:	4b2c0566 	blmi	b02454 <__bss_end+0xaec904>
     eb8:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
     ebc:	03052e11 	movweq	r2, #24081	; 0x5e11
     ec0:	052e1403 	streq	r1, [lr, #-1027]!	; 0xfffffbfd
     ec4:	d60c031d 			; <UNDEFINED> instruction: 0xd60c031d
     ec8:	059e1b05 	ldreq	r1, [lr, #2821]	; 0xb05
     ecc:	13055105 	movwne	r5, #20741	; 0x5105
     ed0:	6b03056b 	blvs	c2484 <__bss_end+0xac934>
     ed4:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
     ed8:	06059f15 			; <UNDEFINED> instruction: 0x06059f15
     edc:	4e12054a 	cfmac32mi	mvfx0, mvfx2, mvfx10
     ee0:	05682005 	strbeq	r2, [r8, #-5]!
     ee4:	06054a07 	streq	r4, [r5], -r7, lsl #20
     ee8:	521b054f 	andspl	r0, fp, #331350016	; 0x13c00000
     eec:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     ef0:	08054c16 	stmdaeq	r5, {r1, r2, r4, sl, fp, lr}
     ef4:	68140566 	ldmdavs	r4, {r1, r2, r5, r6, r8, sl}
     ef8:	056d1005 	strbeq	r1, [sp, #-5]!
     efc:	06054a1d 			; <UNDEFINED> instruction: 0x06054a1d
     f00:	4c21054a 	cfstr32mi	mvfx0, [r1], #-296	; 0xfffffed8
     f04:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f08:	4a090310 	bmi	241b50 <__bss_end+0x22c000>
     f0c:	00a00405 	adceq	r0, r0, r5, lsl #8
     f10:	06010402 	streq	r0, [r1], -r2, lsl #8
     f14:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     f18:	0c058203 	sfmeq	f0, 1, [r5], {3}
     f1c:	03040200 	movweq	r0, #16896	; 0x4200
     f20:	05920806 	ldreq	r0, [r2, #2054]	; 0x806
     f24:	04020003 	streq	r0, [r2], #-3
     f28:	0b054e03 	bleq	15473c <__bss_end+0x13ebec>
     f2c:	4e04054e 	cfsh32mi	mvfx0, mvfx4, #46
     f30:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     f34:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
     f38:	6606054e 	strvs	r0, [r6], -lr, asr #10
     f3c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     f40:	01053309 	tsteq	r5, r9, lsl #6
     f44:	0802052f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, sl}
     f48:	85030542 	strhi	r0, [r3, #-1346]	; 0xfffffabe
     f4c:	05321705 	ldreq	r1, [r2, #-1797]!	; 0xfffff8fb
     f50:	14054a06 	strne	r4, [r5], #-2566	; 0xfffff5fa
     f54:	4e0c0568 	cfsh32mi	mvfx0, mvfx12, #56
     f58:	01040200 	mrseq	r0, R12_usr
     f5c:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     f60:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
     f64:	0402000a 	streq	r0, [r2], #-10
     f68:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
     f6c:	04020004 	streq	r0, [r2], #-4
     f70:	1d053404 	cfstrsne	mvf3, [r5, #-16]
     f74:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     f78:	00060585 	andeq	r0, r6, r5, lsl #11
     f7c:	4a040402 	bmi	101f8c <__bss_end+0xec43c>
     f80:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
     f84:	05a38504 	streq	r8, [r3, #1284]!	; 0x504
     f88:	0305a210 	movweq	sl, #21008	; 0x5210
     f8c:	311905a2 	tstcc	r9, r2, lsr #11
     f90:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     f94:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     f98:	31020568 	tstcc	r2, r8, ror #10
     f9c:	05f21003 	ldrbeq	r1, [r2, #3]!
     fa0:	0305a021 	movweq	sl, #20513	; 0x5021
     fa4:	3112054f 	tstcc	r2, pc, asr #10
     fa8:	054a1005 	strbeq	r1, [sl, #-5]
     fac:	13056815 	movwne	r6, #22549	; 0x5815
     fb0:	4a06054a 	bmi	1824e0 <__bss_end+0x16c990>
     fb4:	05511905 	ldrbeq	r1, [r1, #-2309]	; 0xfffff6fb
     fb8:	40054a07 	andmi	r4, r5, r7, lsl #20
     fbc:	01040200 	mrseq	r0, R12_usr
     fc0:	002f0566 	eoreq	r0, pc, r6, ror #10
     fc4:	4a010402 	bmi	41fd4 <__bss_end+0x2c484>
     fc8:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
     fcc:	07056e19 	smladeq	r5, r9, lr, r6
     fd0:	0040054a 	subeq	r0, r0, sl, asr #10
     fd4:	66010402 	strvs	r0, [r1], -r2, lsl #8
     fd8:	02002f05 	andeq	r2, r0, #5, 30
     fdc:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     fe0:	18056813 	stmdane	r5, {r0, r1, r4, fp, sp, lr}
     fe4:	6806054f 	stmdavs	r6, {r0, r1, r2, r3, r6, r8, sl}
     fe8:	056d3105 	strbeq	r3, [sp, #-261]!	; 0xfffffefb
     fec:	05674a05 	strbeq	r4, [r7, #-2565]!	; 0xfffff5fb
     ff0:	05054d15 	streq	r4, [r5, #-3349]	; 0xfffff2eb
     ff4:	6804054e 	stmdavs	r4, {r1, r2, r3, r6, r8, sl}
     ff8:	a6300205 	ldrtge	r0, [r0], -r5, lsl #4
     ffc:	05841705 	streq	r1, [r4, #1797]	; 0x705
    1000:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
    1004:	031e0568 	tsteq	lr, #104, 10	; 0x1a000000
    1008:	11052e0e 	tstne	r5, lr, lsl #28
    100c:	6b31054a 	blvs	c4253c <__bss_end+0xc2c9ec>
    1010:	674a0505 	strbvs	r0, [sl, -r5, lsl #10]
    1014:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    1018:	04054f05 	streq	r4, [r5], #-3845	; 0xfffff0fb
    101c:	30020568 	andcc	r0, r2, r8, ror #10
    1020:	860305a6 	strhi	r0, [r3], -r6, lsr #11
    1024:	00320c05 	eorseq	r0, r2, r5, lsl #24
    1028:	06010402 	streq	r0, [r1], -r2, lsl #8
    102c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1030:	0a056602 	beq	15a840 <__bss_end+0x144cf0>
    1034:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1038:	0d052e06 	stceq	14, cr2, [r5, #-24]	; 0xffffffe8
    103c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1040:	0003052f 	andeq	r0, r3, pc, lsr #10
    1044:	68040402 	stmdavs	r4, {r1, sl}
    1048:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    104c:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    1050:	04020002 	streq	r0, [r2], #-2
    1054:	058a2f04 	streq	r2, [sl, #3844]	; 0xf04
    1058:	0505a110 	streq	sl, [r5, #-272]	; 0xfffffef0
    105c:	6812054f 	ldmdavs	r2, {r0, r1, r2, r3, r6, r8, sl}
    1060:	054d0305 	strbeq	r0, [sp, #-773]	; 0xfffffcfb
    1064:	0605300f 	streq	r3, [r5], -pc
    1068:	680c054a 	stmdavs	ip, {r1, r3, r6, r8, sl}
    106c:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    1070:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1074:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1078:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    107c:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    1080:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1084:	0a030404 	beq	c209c <__bss_end+0xac54c>
    1088:	0006052e 	andeq	r0, r6, lr, lsr #10
    108c:	6a040402 	bvs	10209c <__bss_end+0xec54c>
    1090:	05860705 	streq	r0, [r6, #1797]	; 0x705
    1094:	16058408 	strne	r8, [r5], -r8, lsl #8
    1098:	690c056c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl}
    109c:	056a1505 	strbeq	r1, [sl, #-1285]!	; 0xfffffafb
    10a0:	4a130318 	bmi	4c1d08 <__bss_end+0x4ac1b8>
    10a4:	056a0505 	strbeq	r0, [sl, #-1285]!	; 0xfffffafb
    10a8:	07058809 	streq	r8, [r5, -r9, lsl #16]
    10ac:	06052008 	streq	r2, [r5], -r8
    10b0:	0200834f 	andeq	r8, r0, #1006632961	; 0x3c000001
    10b4:	ba060104 	blt	1814cc <__bss_end+0x16b97c>
    10b8:	03040200 	movweq	r0, #16896	; 0x4200
    10bc:	06070582 	streq	r0, [r7], -r2, lsl #11
    10c0:	06059308 	streq	r9, [r5], -r8, lsl #6
    10c4:	32030568 	andcc	r0, r3, #104, 10	; 0x1a000000
    10c8:	c22f0205 	eorgt	r0, pc, #1342177280	; 0x50000000
    10cc:	05850305 	streq	r0, [r5, #773]	; 0x305
    10d0:	06053218 			; <UNDEFINED> instruction: 0x06053218
    10d4:	6815054a 	ldmdavs	r5, {r1, r3, r6, r8, sl}
    10d8:	004e0c05 	subeq	r0, lr, r5, lsl #24
    10dc:	06010402 	streq	r0, [r1], -r2, lsl #8
    10e0:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    10e4:	0a056602 	beq	15a8f4 <__bss_end+0x144da4>
    10e8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    10ec:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    10f0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    10f4:	001d0533 	andseq	r0, sp, r3, lsr r5
    10f8:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
    10fc:	02000605 	andeq	r0, r0, #5242880	; 0x500000
    1100:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    1104:	04054c05 	streq	r4, [r5], #-3077	; 0xfffff3fb
    1108:	a0030585 	andge	r0, r3, r5, lsl #11
    110c:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    1110:	0605681a 			; <UNDEFINED> instruction: 0x0605681a
    1114:	4d05054a 	cfstr32mi	mvfx0, [r5, #-296]	; 0xfffffed8
    1118:	15030205 	strne	r0, [r3, #-517]	; 0xfffffdfb
    111c:	0309052e 	movweq	r0, #38190	; 0x952e
    1120:	38052e72 	stmdacc	r5, {r1, r4, r5, r6, r9, sl, fp, sp}
    1124:	4a07054a 	bmi	1c2654 <__bss_end+0x1acb04>
    1128:	05501305 	ldrbeq	r1, [r0, #-773]	; 0xfffffcfb
    112c:	06056e02 	streq	r6, [r5], -r2, lsl #28
    1130:	3202052a 	andcc	r0, r2, #176160768	; 0xa800000
    1134:	831005de 	tsthi	r0, #931135488	; 0x37800000
    1138:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
    113c:	05055107 	streq	r5, [r5, #-263]	; 0xfffffef9
    1140:	6908054a 	stmdbvs	r8, {r1, r3, r6, r8, sl}
    1144:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1148:	07056c09 	streq	r6, [r5, -r9, lsl #24]
    114c:	4c0e054a 	cfstr32mi	mvfx0, [lr], {74}	; 0x4a
    1150:	054f0a05 	strbeq	r0, [pc, #-2565]	; 753 <_start-0x78ad>
    1154:	05c22f02 	strbeq	r2, [r2, #3842]	; 0xf02
    1158:	05058a09 	streq	r8, [r5, #-2569]	; 0xfffff5f7
    115c:	0024054e 	eoreq	r0, r4, lr, asr #10
    1160:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1164:	02001905 	andeq	r1, r0, #81920	; 0x14000
    1168:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    116c:	09056804 	stmdbeq	r5, {r2, fp, sp, lr}
    1170:	66070530 			; <UNDEFINED> instruction: 0x66070530
    1174:	83500605 	cmphi	r0, #5242880	; 0x500000
    1178:	01040200 	mrseq	r0, R12_usr
    117c:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    1180:	05820304 	streq	r0, [r2, #772]	; 0x304
    1184:	0402000f 	streq	r0, [r2], #-15
    1188:	93080603 	movwls	r0, #34307	; 0x8603
    118c:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    1190:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    1194:	04020008 	streq	r0, [r2], #-8
    1198:	07056603 	streq	r6, [r5, -r3, lsl #12]
    119c:	3204054e 	andcc	r0, r4, #327155712	; 0x13800000
    11a0:	03300205 	teqeq	r0, #1342177280	; 0x50000000
    11a4:	1005ba09 	andne	fp, r5, r9, lsl #20
    11a8:	50090583 	andpl	r0, r9, r3, lsl #11
    11ac:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
    11b0:	06054c08 	streq	r4, [r5], -r8, lsl #24
    11b4:	4e1e0566 	cfmsc32mi	mvfx0, mvfx14, mvfx6
    11b8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    11bc:	3a054c1e 	bcc	15423c <__bss_end+0x13e6ec>
    11c0:	662b054a 	strtvs	r0, [fp], -sl, asr #10
    11c4:	05821505 	streq	r1, [r2, #1285]	; 0x505
    11c8:	00832f06 	addeq	r2, r3, r6, lsl #30
    11cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    11d0:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    11d4:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
    11d8:	a40a05b3 	strge	r0, [sl], #-1459	; 0xfffffa4d
    11dc:	052f0205 	streq	r0, [pc, #-517]!	; fdf <_start-0x7021>
    11e0:	f20d0301 	vcgt.s8	d0, d13, d1
    11e4:	0d030d05 	stceq	13, cr0, [r3, #-20]	; 0xffffffec
    11e8:	03040566 	movweq	r0, #17766	; 0x4566
    11ec:	05ac080d 	streq	r0, [ip, #2061]!	; 0x80d
    11f0:	660a0303 	strvs	r0, [sl], -r3, lsl #6
    11f4:	05a01505 	streq	r1, [r0, #1285]!	; 0x505
    11f8:	0705670e 	streq	r6, [r5, -lr, lsl #14]
    11fc:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    1200:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    1204:	4e0205da 	mcrmi	5, 0, r0, cr2, cr10, {6}
    1208:	059f1405 	ldreq	r1, [pc, #1029]	; 1615 <_start-0x69eb>
    120c:	01056702 	tsteq	r5, r2, lsl #14
    1210:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
    1214:	9f01054d 	svcls	0x0001054d
    1218:	681605a2 	ldmdavs	r6, {r1, r5, r7, r8, sl}
    121c:	0b030205 	bleq	c1a38 <__bss_end+0xabee8>
    1220:	3003054a 	andcc	r0, r3, sl, asr #10
    1224:	05a01c05 	streq	r1, [r0, #3077]!	; 0xc05
    1228:	1f054a05 	svcne	0x00054a05
    122c:	4a06054c 	bmi	182764 <__bss_end+0x16cc14>
    1230:	054c1305 	strbeq	r1, [ip, #-773]	; 0xfffffcfb
    1234:	1b054e0a 	blne	154a64 <__bss_end+0x13ef14>
    1238:	4a0c0530 	bmi	302700 <__bss_end+0x2ecbb0>
    123c:	672f0605 	strvs	r0, [pc, -r5, lsl #12]!
    1240:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1244:	009e0601 	addseq	r0, lr, r1, lsl #12
    1248:	66030402 	strvs	r0, [r3], -r2, lsl #8
    124c:	02000f05 	andeq	r0, r0, #5, 30
    1250:	08060304 	stmdaeq	r6, {r2, r8, r9}
    1254:	002b055c 	eoreq	r0, fp, ip, asr r5
    1258:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    125c:	02000805 	andeq	r0, r0, #327680	; 0x50000
    1260:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    1264:	0c054c16 	stceq	12, cr4, [r5], {22}
    1268:	054a7503 	strbeq	r7, [sl, #-1283]	; 0xfffffafd
    126c:	17054a0a 	strne	r4, [r5, -sl, lsl #20]
    1270:	054a1203 	strbeq	r1, [sl, #-515]	; 0xfffffdfd
    1274:	0b054a07 	bleq	153a98 <__bss_end+0x13df48>
    1278:	3007054c 	andcc	r0, r7, ip, asr #10
    127c:	9b1b052f 	blls	6c2740 <__bss_end+0x6acbf0>
    1280:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1284:	4a0b0316 	bmi	2c1ee4 <__bss_end+0x2ac394>
    1288:	054f0705 	strbeq	r0, [pc, #-1797]	; b8b <_start-0x7475>
    128c:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    1290:	26056601 	strcs	r6, [r5], -r1, lsl #12
    1294:	01040200 	mrseq	r0, R12_usr
    1298:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    129c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    12a0:	02056706 	andeq	r6, r5, #1572864	; 0x180000
    12a4:	30090533 	andcc	r0, r9, r3, lsr r5
    12a8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    12ac:	0558080e 	ldrbeq	r0, [r8, #-2062]	; 0xfffff7f2
    12b0:	0a056a02 	beq	15bac0 <__bss_end+0x145f70>
    12b4:	68020530 	stmdavs	r2, {r4, r5, r8, sl}
    12b8:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    12bc:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
    12c0:	0a056a19 	beq	15bb2c <__bss_end+0x145fdc>
    12c4:	6909054b 	stmdbvs	r9, {r0, r1, r3, r6, r8, sl}
    12c8:	a22f0105 	eorge	r0, pc, #1073741825	; 0x40000001
    12cc:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    12d0:	ae034b01 	vmlage.f64	d4, d3, d1
    12d4:	1b059e01 	blne	168ae0 <__bss_end+0x152f90>
    12d8:	4a04056c 	bmi	102890 <__bss_end+0xecd40>
    12dc:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    12e0:	05059f12 	streq	r9, [r5, #-3858]	; 0xfffff0ee
    12e4:	030b054a 	movweq	r0, #46410	; 0xb54a
    12e8:	16054a09 	strne	r4, [r5], -r9, lsl #20
    12ec:	831e0567 	tsthi	lr, #432013312	; 0x19c00000
    12f0:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    12f4:	0605a008 	streq	sl, [r5], -r8
    12f8:	511a0566 	tstpl	sl, r6, ror #10
    12fc:	660b058a 	strvs	r0, [fp], -sl, lsl #11
    1300:	054b1c05 	strbeq	r1, [fp, #-3077]	; 0xfffff3fb
    1304:	03054a1a 	movweq	r4, #23066	; 0x5a1a
    1308:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    130c:	00ba060c 	adcseq	r0, sl, ip, lsl #12
    1310:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    1314:	03040200 	movweq	r0, #16896	; 0x4200
    1318:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    131c:	00900804 	addseq	r0, r0, r4, lsl #16
    1320:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    1324:	06040200 	streq	r0, [r4], -r0, lsl #4
    1328:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
    132c:	02008208 	andeq	r8, r0, #8, 4	; 0x80000000
    1330:	00ba0904 	adcseq	r0, sl, r4, lsl #18
    1334:	820b0402 	andhi	r0, fp, #33554432	; 0x2000000
    1338:	05b00806 	ldreq	r0, [r0, #2054]!	; 0x806
    133c:	9e170301 	cdpls	3, 1, cr0, cr7, cr1, {0}
    1340:	96080205 	strls	r0, [r8], -r5, lsl #4
    1344:	05a20505 	streq	r0, [r2, #1285]!	; 0x505
    1348:	05866809 	streq	r6, [r6, #2057]	; 0x809
    134c:	14054f03 	strne	r4, [r5], #-3843	; 0xfffff0fd
    1350:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1354:	8a2f0205 	bhi	bc1b70 <__bss_end+0xbac020>
    1358:	05870505 	streq	r0, [r7, #1285]	; 0x505
    135c:	05866809 	streq	r6, [r6, #2057]	; 0x809
    1360:	0c054f03 	stceq	15, cr4, [r5], {3}
    1364:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1368:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    136c:	058a2f02 	streq	r2, [sl, #3842]	; 0xf02
    1370:	0905a305 	stmdbeq	r5, {r0, r2, r8, r9, sp, pc}
    1374:	0b058668 	bleq	162d1c <__bss_end+0x14d1cc>
    1378:	4a05054d 	bmi	1428b4 <__bss_end+0x12cd64>
    137c:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    1380:	0c054a0e 			; <UNDEFINED> instruction: 0x0c054a0e
    1384:	4d0a0586 	cfstr32mi	mvfx0, [sl, #-536]	; 0xfffffde8
    1388:	052f0205 	streq	r0, [pc, #-517]!	; 118b <_start-0x6e75>
    138c:	1b058801 	blne	163398 <__bss_end+0x14d848>
    1390:	4a040567 	bmi	102934 <__bss_end+0xecde4>
    1394:	054e1005 	strbeq	r1, [lr, #-5]
    1398:	66330301 	ldrtvs	r0, [r3], -r1, lsl #6
    139c:	6e030405 	cdpvs	4, 0, cr0, cr3, cr5, {0}
    13a0:	9b0a052e 	blls	282860 <__bss_end+0x26cd10>
    13a4:	20080805 	andcs	r0, r8, r5, lsl #16
    13a8:	0d030305 	stceq	3, cr0, [r3, #-20]	; 0xffffffec
    13ac:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    13b0:	28020601 	stmdacs	r2, {r0, r9, sl}
    13b4:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    13b8:	01059e03 	tsteq	r5, r3, lsl #28
    13bc:	2408a606 	strcs	sl, [r8], #-1542	; 0xfffff9fa
    13c0:	0b034705 	bleq	d2fdc <__bss_end+0xbd48c>
    13c4:	4a02059e 	bmi	82a44 <__bss_end+0x6cef4>
    13c8:	05872e05 	streq	r2, [r7, #3589]	; 0xe05
    13cc:	05054a02 	streq	r4, [r5, #-2562]	; 0xfffff5fe
    13d0:	6b54056b 	blvs	1502984 <__bss_end+0x14ece34>
    13d4:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    13d8:	82120301 	andshi	r0, r2, #67108864	; 0x4000000
    13dc:	74031d05 	strvc	r1, [r3], #-3333	; 0xfffff2fb
    13e0:	4a10052e 	bmi	4028a0 <__bss_end+0x3ecd50>
    13e4:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    13e8:	4a0b0301 	bmi	2c1ff4 <__bss_end+0x2ac4a4>
    13ec:	05ba2603 	ldreq	r2, [sl, #1539]!	; 0x603
    13f0:	82110320 	andshi	r0, r1, #32, 6	; 0x80000000
    13f4:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    13f8:	1b054c02 	blne	154408 <__bss_end+0x13e8b8>
    13fc:	4a040584 	bmi	102a14 <__bss_end+0xecec4>
    1400:	834c0305 	movthi	r0, #49925	; 0xc305
    1404:	01040200 	mrseq	r0, R12_usr
    1408:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    140c:	06820304 	streq	r0, [r2], r4, lsl #6
    1410:	1405b208 	strne	fp, [r5], #-520	; 0xfffffdf8
    1414:	4a3005a1 	bmi	c02aa0 <__bss_end+0xbecf50>
    1418:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
    141c:	056a500b 	strbeq	r5, [sl, #-11]!
    1420:	01054d09 	tsteq	r5, r9, lsl #26
    1424:	1c05f62f 	stcne	6, cr15, [r5], {47}	; 0x2f
    1428:	831d0584 	tsthi	sp, #132, 10	; 0x21000000
    142c:	be830105 	rmflts	f0, f3, f5
    1430:	05a40205 	streq	r0, [r4, #517]!	; 0x205
    1434:	06053408 	streq	r3, [r5], -r8, lsl #8
    1438:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    143c:	056b2505 	strbeq	r2, [fp, #-1285]!	; 0xfffffafb
    1440:	05054a19 	streq	r4, [r5, #-2585]	; 0xfffff5e7
    1444:	0076054a 	rsbseq	r0, r6, sl, asr #10
    1448:	4a010402 	bmi	42458 <__bss_end+0x2c908>
    144c:	02003d05 	andeq	r3, r0, #320	; 0x140
    1450:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1454:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    1458:	0c054a01 			; <UNDEFINED> instruction: 0x0c054a01
    145c:	68210550 	stmdavs	r1!, {r4, r6, r8, sl}
    1460:	054a5905 	strbeq	r5, [sl, #-2309]	; 0xfffff6fb
    1464:	71054a0e 	tstvc	r5, lr, lsl #20
    1468:	4a0a052e 	bmi	282928 <__bss_end+0x26cdd8>
    146c:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    1470:	34054a50 	strcc	r4, [r5], #-2640	; 0xfffff5b0
    1474:	2e13054a 	cfmac32cs	mvfx0, mvfx3, mvfx10
    1478:	059f0405 	ldreq	r0, [pc, #1029]	; 1885 <_start-0x677b>
    147c:	056a4b0c 	strbeq	r4, [sl, #-2828]!	; 0xfffff4f4
    1480:	09054d02 	stmdbeq	r5, {r1, r8, sl, fp, lr}
    1484:	2f010530 	svccs	0x00010530
    1488:	4b0f05a2 	blmi	3c2b18 <__bss_end+0x3acfc8>
    148c:	03670105 	cmneq	r7, #1073741825	; 0x40000001
    1490:	03059e32 	movweq	r9, #24114	; 0x5e32
    1494:	03080589 	movweq	r0, #34185	; 0x8589
    1498:	06052e17 			; <UNDEFINED> instruction: 0x06052e17
    149c:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    14a0:	67030305 	strvs	r0, [r3, -r5, lsl #6]
    14a4:	0301052e 	movweq	r0, #5422	; 0x152e
    14a8:	17054a3a 	smladxne	r5, sl, sl, r4
    14ac:	4a0305db 	bmi	c2c20 <__bss_end+0xad0d0>
    14b0:	05855905 	streq	r5, [r5, #2309]	; 0x905
    14b4:	0e056a04 	vmlaeq.f32	s12, s10, s8
    14b8:	4d140568 	cfldr32mi	mvfx0, [r4, #-416]	; 0xfffffe60
    14bc:	836d0205 	cmnhi	sp, #1342177280	; 0x50000000
    14c0:	05836986 	streq	r6, [r3, #2438]	; 0x986
    14c4:	660a0314 			; <UNDEFINED> instruction: 0x660a0314
    14c8:	14030105 	strne	r0, [r3], #-261	; 0xfffffefb
    14cc:	66170366 	ldrvs	r0, [r7], -r6, ror #6
    14d0:	05691205 	strbeq	r1, [r9, #-517]!	; 0xfffffdfb
    14d4:	03054a02 	movweq	r4, #23042	; 0x5a02
    14d8:	03040200 	movweq	r0, #16896	; 0x4200
    14dc:	00600530 	rsbeq	r0, r0, r0, lsr r5
    14e0:	08030402 	stmdaeq	r3, {r1, sl}
    14e4:	0002051e 	andeq	r0, r2, lr, lsl r5
    14e8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    14ec:	054b4b6b 	strbeq	r4, [fp, #-2923]	; 0xfffff495
    14f0:	05504e03 	ldrbeq	r4, [r0, #-3587]	; 0xfffff1fd
    14f4:	1c055014 	stcne	0, cr5, [r5], {20}
    14f8:	67010567 	strvs	r0, [r1, -r7, ror #10]
    14fc:	16055c08 	strne	r5, [r5], -r8, lsl #24
    1500:	4a05056d 	bmi	142abc <__bss_end+0x12cf6c>
    1504:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
    1508:	12052f14 	andne	r2, r5, #20, 30	; 0x50
    150c:	2f0405ba 	svccs	0x000405ba
    1510:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    1514:	1b056a05 	blne	15bd30 <__bss_end+0x1461e0>
    1518:	4a0c0530 	bmi	3029e0 <__bss_end+0x2ece90>
    151c:	834b0605 	movthi	r0, #46597	; 0xb605
    1520:	a005059f 	mulge	r5, pc, r5	; <UNPREDICTABLE>
    1524:	4f010530 	svcmi	0x00010530
    1528:	840205be 	strhi	r0, [r2], #-1470	; 0xfffffa42
    152c:	05841205 	streq	r1, [r4, #517]	; 0x205
    1530:	03054a04 	movweq	r4, #23044	; 0x5a04
    1534:	4a560569 	bmi	1582ae0 <__bss_end+0x156cf90>
    1538:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    153c:	820f0301 	andhi	r0, pc, #67108864	; 0x4000000
    1540:	76030305 	strvc	r0, [r3], -r5, lsl #6
    1544:	4a4e052e 	bmi	1382a04 <__bss_end+0x136ceb4>
    1548:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    154c:	05058713 	streq	r8, [r5, #-1811]	; 0xfffff8ed
    1550:	6819054a 	ldmdavs	r9, {r1, r3, r6, r8, sl}
    1554:	f6690105 			; <UNDEFINED> instruction: 0xf6690105
    1558:	05bf1a05 	ldreq	r1, [pc, #2565]!	; 1f65 <_start-0x609b>
    155c:	17056804 	strne	r6, [r5, -r4, lsl #16]
    1560:	002c056b 	eoreq	r0, ip, fp, ror #10
    1564:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1568:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    156c:	05ba0204 	ldreq	r0, [sl, #516]!	; 0x204
    1570:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    1574:	0f052e04 	svceq	0x00052e04
    1578:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    157c:	0005054c 	andeq	r0, r5, ip, asr #10
    1580:	4a040402 	bmi	102590 <__bss_end+0xeca40>
    1584:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
    1588:	14054b0d 	strne	r4, [r5], #-2829	; 0xfffff4f3
    158c:	4a3b056b 	bmi	ec2b40 <__bss_end+0xeacff0>
    1590:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
    1594:	820a0309 	andhi	r0, sl, #603979776	; 0x24000000
    1598:	052f0105 	streq	r0, [pc, #-261]!	; 149b <_start-0x6b65>
    159c:	019d0302 	orrseq	r0, sp, r2, lsl #6
    15a0:	8a030566 	bhi	c2b40 <__bss_end+0xacff0>
    15a4:	4b020583 	blmi	82bb8 <__bss_end+0x6d068>
    15a8:	01000602 	tsteq	r0, r2, lsl #12
    15ac:	00016b01 	andeq	r6, r1, r1, lsl #22
    15b0:	50000300 	andpl	r0, r0, r0, lsl #6
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    15bc:	01010100 	mrseq	r0, (UNDEF: 17)
    15c0:	00000001 	andeq	r0, r0, r1
    15c4:	01000001 	tsteq	r0, r1
    15c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1514 <_start-0x6aec>
    15cc:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    15d0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    15d4:	72656270 	rsbvc	r6, r5, #112, 4
    15d8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    15dc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    15e0:	4f545265 	svcmi	0x00545265
    15e4:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    15e8:	442f6f6d 	strtmi	r6, [pc], #-3949	; 15f0 <_start-0x6a10>
    15ec:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    15f0:	00007372 	andeq	r7, r0, r2, ror r3
    15f4:	2e717269 	cdpcs	2, 7, cr7, cr1, cr9, {3}
    15f8:	00010063 	andeq	r0, r1, r3, rrx
    15fc:	71726900 	cmnvc	r2, r0, lsl #18
    1600:	0100682e 	tsteq	r0, lr, lsr #16
    1604:	05000000 	streq	r0, [r0, #-0]
    1608:	02050001 	andeq	r0, r5, #1
    160c:	000134c4 	andeq	r3, r1, r4, asr #9
    1610:	05011e03 	streq	r1, [r1, #-3587]	; 0xfffff1fd
    1614:	1b059f08 	blne	16923c <__bss_end+0x1536ec>
    1618:	4a190531 	bmi	642ae4 <__bss_end+0x62cf94>
    161c:	312e1005 			; <UNDEFINED> instruction: 0x312e1005
    1620:	05851905 	streq	r1, [r5, #2309]	; 0x905
    1624:	16056606 	strne	r6, [r5], -r6, lsl #12
    1628:	6604054b 	strvs	r0, [r4], -fp, asr #10
    162c:	05f51405 	ldrbeq	r1, [r5, #1029]!	; 0x405
    1630:	0b05660e 	bleq	15ae70 <__bss_end+0x145320>
    1634:	0308052e 	movweq	r0, #34094	; 0x852e
    1638:	01056673 	tsteq	r5, r3, ror r6
    163c:	8a660f03 	bhi	1985250 <__bss_end+0x196f700>
    1640:	054b2f05 	strbeq	r2, [fp, #-3845]	; 0xfffff0fb
    1644:	15052e19 	strne	r2, [r5, #-3609]	; 0xfffff1e7
    1648:	2e050531 	mcrcs	5, 0, r0, cr5, cr1, {1}
    164c:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    1650:	03054a28 	movweq	r4, #23080	; 0x5a28
    1654:	8515054a 	ldrhi	r0, [r5, #-1354]	; 0xfffffab6
    1658:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    165c:	28054b14 	stmdacs	r5, {r2, r4, r8, r9, fp, lr}
    1660:	4a03054a 	bmi	c2b90 <__bss_end+0xad040>
    1664:	05851505 	streq	r1, [r5, #1285]	; 0x505
    1668:	2e052e05 	cdpcs	14, 0, cr2, cr5, cr5, {0}
    166c:	4a25054b 	bmi	942ba0 <__bss_end+0x92d050>
    1670:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
    1674:	05858301 	streq	r8, [r5, #769]	; 0x301
    1678:	01054b02 	tsteq	r5, r2, lsl #22
    167c:	0205852f 	andeq	r8, r5, #197132288	; 0xbc00000
    1680:	2f01054b 	svccs	0x0001054b
    1684:	bb050585 	bllt	142ca0 <__bss_end+0x12d150>
    1688:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
    168c:	05832f21 	streq	r2, [r3, #3873]	; 0xf21
    1690:	0105bb03 	tsteq	r5, r3, lsl #22
    1694:	23058530 	movwcs	r8, #21808	; 0x5530
    1698:	4a100583 	bmi	402cac <__bss_end+0x3ed15c>
    169c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
    16a0:	12056708 	andne	r6, r5, #8, 14	; 0x200000
    16a4:	4b0e052e 	blmi	382b64 <__bss_end+0x36d014>
    16a8:	0a030105 	beq	c1ac4 <__bss_end+0xabf74>
    16ac:	030a05ba 	movweq	r0, #42426	; 0xa5ba
    16b0:	08052e78 	stmdaeq	r5, {r3, r4, r5, r6, r9, sl, fp, sp}
    16b4:	2e120567 	cfmsc32cs	mvfx0, mvfx2, mvfx7
    16b8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    16bc:	0a05c001 	beq	1716c8 <__bss_end+0x15bb78>
    16c0:	6708052a 	strvs	r0, [r8, -sl, lsr #10]
    16c4:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    16c8:	01054b0e 	tsteq	r5, lr, lsl #22
    16cc:	2305bdbc 	movwcs	fp, #23996	; 0x5dbc
    16d0:	4a100583 	bmi	402ce4 <__bss_end+0x3ed194>
    16d4:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
    16d8:	13056708 	movwne	r6, #22280	; 0x5708
    16dc:	4b0e052e 	blmi	382b9c <__bss_end+0x36d04c>
    16e0:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    16e4:	01054a0e 	tsteq	r5, lr, lsl #20
    16e8:	05660a03 	strbeq	r0, [r6, #-2563]!	; 0xfffff5fd
    16ec:	2e78030a 	cdpcs	3, 7, cr0, cr8, cr10, {0}
    16f0:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    16f4:	0e052e13 	mcreq	14, 0, r2, cr5, cr3, {0}
    16f8:	4a11054b 	bmi	442c2c <__bss_end+0x42d0dc>
    16fc:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    1700:	0a056c01 	beq	15c70c <__bss_end+0x146bbc>
    1704:	6708052a 	strvs	r0, [r8, -sl, lsr #10]
    1708:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    170c:	11054b0e 	tstne	r5, lr, lsl #22
    1710:	4a0e054a 	bmi	382c40 <__bss_end+0x36d0f0>
    1714:	02680105 	rsbeq	r0, r8, #1073741825	; 0x40000001
    1718:	0101000c 	tsteq	r1, ip
    171c:	0000016d 	andeq	r0, r0, sp, ror #2
    1720:	00520003 	subseq	r0, r2, r3
    1724:	01020000 	mrseq	r0, (UNDEF: 2)
    1728:	000d0efb 	strdeq	r0, [sp], -fp
    172c:	01010101 	tsteq	r1, r1, lsl #2
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	2f010000 	svccs	0x00010000
    1738:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    173c:	2f69702f 	svccs	0x0069702f
    1740:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1744:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1748:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    174c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1750:	534f5452 	movtpl	r5, #62546	; 0xf452
    1754:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1758:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    175c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1760:	67000073 	smlsdxvs	r0, r3, r0, r0
    1764:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1768:	00010063 	andeq	r0, r1, r3, rrx
    176c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1770:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1774:	00000001 	andeq	r0, r0, r1
    1778:	05004105 	streq	r4, [r0, #-261]	; 0xfffffefb
    177c:	01386402 	teqeq	r8, r2, lsl #8
    1780:	00e80300 	rsceq	r0, r8, r0, lsl #6
    1784:	a0160501 	andsge	r0, r6, r1, lsl #10
    1788:	05820605 	streq	r0, [r2, #1541]	; 0x605
    178c:	1005301b 	andne	r3, r5, fp, lsl r0
    1790:	6814052e 	ldmdavs	r4, {r1, r2, r3, r5, r8, sl}
    1794:	20080605 	andcs	r0, r8, r5, lsl #12
    1798:	052f1805 	streq	r1, [pc, #-2053]!	; f9b <_start-0x7065>
    179c:	0905820f 	stmdbeq	r5, {r0, r1, r2, r3, r9, pc}
    17a0:	4a06054a 	bmi	182cd0 <__bss_end+0x16d180>
    17a4:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    17a8:	1a054a23 	bne	15403c <__bss_end+0x13e4ec>
    17ac:	2e060582 	cfsh32cs	mvfx0, mvfx6, #-62
    17b0:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
    17b4:	01052e18 	tsteq	r5, r8, lsl lr
    17b8:	bc3f0567 	cfldr32lt	mvfx0, [pc], #-412	; 1624 <_start-0x69dc>
    17bc:	05bb0205 	ldreq	r0, [fp, #517]!	; 0x205
    17c0:	38058301 	stmdacc	r5, {r0, r8, r9, pc}
    17c4:	9f100568 	svcls	0x00100568
    17c8:	05672005 	strbeq	r2, [r7, #-5]!
    17cc:	10054a17 	andne	r4, r5, r7, lsl sl
    17d0:	3004054a 	andcc	r0, r4, sl, asr #10
    17d4:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
    17d8:	05b00801 	ldreq	r0, [r0, #2049]!	; 0x801
    17dc:	01052c17 	tsteq	r5, r7, lsl ip
    17e0:	23053e08 	movwcs	r3, #24072	; 0x5e08
    17e4:	831005a0 	tsthi	r0, #160, 10	; 0x28000000
    17e8:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
    17ec:	2c054a17 			; <UNDEFINED> instruction: 0x2c054a17
    17f0:	4a230582 	bmi	8c2e00 <__bss_end+0x8ad2b0>
    17f4:	052e3105 	streq	r3, [lr, #-261]!	; 0xfffffefb
    17f8:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
    17fc:	1005bb17 	andne	fp, r5, r7, lsl fp
    1800:	02052f66 	andeq	r2, r5, #408	; 0x198
    1804:	08170568 	ldmdaeq	r7, {r3, r5, r6, r8, sl}
    1808:	0803055a 	stmdaeq	r3, {r1, r3, r4, r6, r8, sl}
    180c:	301705ad 	andscc	r0, r7, sp, lsr #11
    1810:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    1814:	05301705 	ldreq	r1, [r0, #-1797]!	; 0xfffff8fb
    1818:	05ad0803 	streq	r0, [sp, #2051]!	; 0x803
    181c:	03053017 	movweq	r3, #20503	; 0x5017
    1820:	18053d08 	stmdane	r5, {r3, r8, sl, fp, ip, sp}
    1824:	08030530 	stmdaeq	r3, {r4, r5, r8, sl}
    1828:	301805ad 	andscc	r0, r8, sp, lsr #11
    182c:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    1830:	30010530 	andcc	r0, r1, r0, lsr r5
    1834:	bb2105a1 	bllt	842ec0 <__bss_end+0x82d370>
    1838:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    183c:	10054a15 	andne	r4, r5, r5, lsl sl
    1840:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
    1844:	08170568 	ldmdaeq	r7, {r3, r5, r6, r8, sl}
    1848:	0803055a 	stmdaeq	r3, {r1, r3, r4, r6, r8, sl}
    184c:	301705ad 	andscc	r0, r7, sp, lsr #11
    1850:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    1854:	05301705 	ldreq	r1, [r0, #-1797]!	; 0xfffff8fb
    1858:	05ad0803 	streq	r0, [sp, #2051]!	; 0x803
    185c:	03053017 	movweq	r3, #20503	; 0x5017
    1860:	18053d08 	stmdane	r5, {r3, r8, sl, fp, ip, sp}
    1864:	08030530 	stmdaeq	r3, {r4, r5, r8, sl}
    1868:	301805ad 	andscc	r0, r8, sp, lsr #11
    186c:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    1870:	30010530 	andcc	r0, r1, r0, lsr r5
    1874:	832005a1 			; <UNDEFINED> instruction: 0x832005a1
    1878:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    187c:	052f4a10 	streq	r4, [pc, #-2576]!	; e74 <_start-0x718c>
    1880:	16056807 	strne	r6, [r5], -r7, lsl #16
    1884:	8301052e 	movwhi	r0, #5422	; 0x152e
    1888:	01000a02 	tsteq	r0, r2, lsl #20
    188c:	00026b01 	andeq	r6, r2, r1, lsl #22
    1890:	ed000300 	stc	3, cr0, [r0, #-0]
    1894:	02000000 	andeq	r0, r0, #0
    1898:	0d0efb01 	vstreq	d15, [lr, #-4]
    189c:	01010100 	mrseq	r0, (UNDEF: 17)
    18a0:	00000001 	andeq	r0, r0, r1
    18a4:	01000001 	tsteq	r0, r1
    18a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 17f4 <_start-0x680c>
    18ac:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    18b0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    18b4:	72656270 	rsbvc	r6, r5, #112, 4
    18b8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    18bc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    18c0:	4f545265 	svcmi	0x00545265
    18c4:	462f2f53 	qsaxmi	r2, pc, r3	; <UNPREDICTABLE>
    18c8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    18cc:	2f534f54 	svccs	0x00534f54
    18d0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    18d4:	702f6563 	eorvc	r6, pc, r3, ror #10
    18d8:	6174726f 	cmnvs	r4, pc, ror #4
    18dc:	2f656c62 	svccs	0x00656c62
    18e0:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    18e4:	00676e61 	rsbeq	r6, r7, r1, ror #28
    18e8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    18ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    18f0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    18f4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    18f8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    18fc:	61652d65 	cmnvs	r5, r5, ror #26
    1900:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1904:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1908:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    190c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1910:	73752f00 	cmnvc	r5, #0, 30
    1914:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1918:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    191c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1920:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1924:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1928:	73752f00 	cmnvc	r5, #0, 30
    192c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1930:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1934:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1938:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    193c:	65680000 	strbvs	r0, [r8, #-0]!
    1940:	345f7061 	ldrbcc	r7, [pc], #-97	; 1948 <_start-0x66b8>
    1944:	0100632e 	tsteq	r0, lr, lsr #6
    1948:	74730000 	ldrbtvc	r0, [r3], #-0
    194c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1950:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1954:	745f0000 	ldrbvc	r0, [pc], #-0	; 195c <_start-0x66a4>
    1958:	73657079 	cmnvc	r5, #121	; 0x79
    195c:	0300682e 	movweq	r6, #2094	; 0x82e
    1960:	65720000 	ldrbvs	r0, [r2, #-0]!
    1964:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1968:	00030068 	andeq	r0, r3, r8, rrx
    196c:	636f6c00 	cmnvs	pc, #0, 24
    1970:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1974:	73000003 	movwvc	r0, #3
    1978:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    197c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1980:	00000004 	andeq	r0, r0, r4
    1984:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1988:	013e3c02 	teqeq	lr, r2, lsl #24
    198c:	01920300 	orrseq	r0, r2, r0, lsl #6
    1990:	84070501 	strhi	r0, [r7], #-1281	; 0xfffffaff
    1994:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
    1998:	0505320d 	streq	r3, [r5, #-525]	; 0xfffffdf3
    199c:	4c04054a 	cfstr32mi	mvfx0, [r4], {74}	; 0x4a
    19a0:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    19a4:	14056810 	strne	r6, [r5], #-2064	; 0xfffff7f0
    19a8:	4a0605a2 	bmi	183038 <__bss_end+0x16d4e8>
    19ac:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
    19b0:	2c058605 	stccs	6, cr8, [r5], {5}
    19b4:	01040200 	mrseq	r0, R12_usr
    19b8:	001b0566 	andseq	r0, fp, r6, ror #10
    19bc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    19c0:	056a1405 	strbeq	r1, [sl, #-1029]!	; 0xfffffbfb
    19c4:	09054b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, lr}
    19c8:	30150567 	andscc	r0, r5, r7, ror #10
    19cc:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    19d0:	09056314 	stmdbeq	r5, {r2, r4, r8, r9, sp, lr}
    19d4:	003d054a 	eorseq	r0, sp, sl, asr #10
    19d8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    19dc:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
    19e0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    19e4:	06055210 			; <UNDEFINED> instruction: 0x06055210
    19e8:	6a42054a 	bvs	1082f18 <__bss_end+0x106d3c8>
    19ec:	054a1005 	strbeq	r1, [sl, #-5]
    19f0:	2f052e0e 	svccs	0x00052e0e
    19f4:	4a26054e 	bmi	982f34 <__bss_end+0x96d3e4>
    19f8:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
    19fc:	31054a1f 	tstcc	r5, pc, lsl sl
    1a00:	4a07054a 	bmi	1c2f30 <__bss_end+0x1ad3e0>
    1a04:	054f1505 	strbeq	r1, [pc, #-1285]	; 1507 <_start-0x6af9>
    1a08:	3705862a 	strcc	r8, [r5, -sl, lsr #12]
    1a0c:	4a21054a 	bmi	842f3c <__bss_end+0x82d3ec>
    1a10:	054b1a05 	strbeq	r1, [fp, #-2565]	; 0xfffff5fb
    1a14:	19056906 	stmdbne	r5, {r1, r2, r8, fp, sp, lr}
    1a18:	4a23054d 	bmi	8c2f54 <__bss_end+0x8ad404>
    1a1c:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    1a20:	0c056a02 			; <UNDEFINED> instruction: 0x0c056a02
    1a24:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    1a28:	0105bc09 	tsteq	r5, r9, lsl #24
    1a2c:	1005da2f 	andne	sp, r5, pc, lsr #20
    1a30:	4d040583 	cfstr32mi	mvfx0, [r4, #-524]	; 0xfffffdf4
    1a34:	056a0705 	strbeq	r0, [sl, #-1797]!	; 0xfffff8fb
    1a38:	0305a10a 	movweq	sl, #20746	; 0x510a
    1a3c:	3121054c 			; <UNDEFINED> instruction: 0x3121054c
    1a40:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    1a44:	03059f04 	movweq	r9, #24324	; 0x5f04
    1a48:	3001054c 	andcc	r0, r1, ip, asr #10
    1a4c:	4b090586 	blmi	24306c <__bss_end+0x22d51c>
    1a50:	a24b0105 	subge	r0, fp, #1073741825	; 0x40000001
    1a54:	1905864c 	stmdbne	r5, {r2, r3, r6, r9, sl, pc}
    1a58:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    1a5c:	1c056714 	stcne	7, cr6, [r5], {20}
    1a60:	2e0d056a 	cfsh32cs	mvfx0, mvfx13, #58
    1a64:	9f080567 	svcls	0x00080567
    1a68:	05680705 	strbeq	r0, [r8, #-1797]!	; 0xfffff8fb
    1a6c:	07054a14 	smladeq	r5, r4, sl, r4
    1a70:	4a19054b 	bmi	642fa4 <__bss_end+0x62d454>
    1a74:	054e1305 	strbeq	r1, [lr, #-773]	; 0xfffffcfb
    1a78:	1f054b30 	svcne	0x00054b30
    1a7c:	4b240566 	blmi	90301c <__bss_end+0x8ed4cc>
    1a80:	05851605 	streq	r1, [r5, #1541]	; 0x605
    1a84:	05f6bb01 	ldrbeq	fp, [r6, #2817]!	; 0xb01
    1a88:	02058812 	andeq	r8, r5, #1179648	; 0x120000
    1a8c:	0057054a 	subseq	r0, r7, sl, asr #10
    1a90:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1a94:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    1a98:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1a9c:	04020002 	streq	r0, [r2], #-2
    1aa0:	06054a01 	streq	r4, [r5], -r1, lsl #20
    1aa4:	4b18056d 	blmi	603060 <__bss_end+0x5ed510>
    1aa8:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1aac:	1a054a04 	bne	1542c4 <__bss_end+0x13e774>
    1ab0:	4a2c0568 	bmi	b03058 <__bss_end+0xaed508>
    1ab4:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    1ab8:	06056713 			; <UNDEFINED> instruction: 0x06056713
    1abc:	4b1d054f 	blmi	743000 <__bss_end+0x72d4b0>
    1ac0:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1ac4:	04054a4d 	streq	r4, [r5], #-2637	; 0xfffff5b3
    1ac8:	4c11054a 	cfldr32mi	mvfx0, [r1], {74}	; 0x4a
    1acc:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    1ad0:	20054a05 	andcs	r4, r5, r5, lsl #20
    1ad4:	4a2d054d 	bmi	b43010 <__bss_end+0xb2d4c0>
    1ad8:	054a3e05 	strbeq	r3, [sl, #-3589]	; 0xfffff1fb
    1adc:	31052e20 	tstcc	r5, r0, lsr #28
    1ae0:	4a420567 	bmi	1083084 <__bss_end+0x106d534>
    1ae4:	6a2e2505 	bvs	b8af00 <__bss_end+0xb753b0>
    1ae8:	05a33005 	streq	r3, [r3, #5]!
    1aec:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
    1af0:	841f0551 	ldrhi	r0, [pc], #-1361	; 1af8 <_start-0x6508>
    1af4:	02680105 	rsbeq	r0, r8, #1073741825	; 0x40000001
    1af8:	0101000c 	tsteq	r1, ip
    1afc:	000000ae 	andeq	r0, r0, lr, lsr #1
    1b00:	00400003 	subeq	r0, r0, r3
    1b04:	01020000 	mrseq	r0, (UNDEF: 2)
    1b08:	000d0efb 	strdeq	r0, [sp], -fp
    1b0c:	01010101 	tsteq	r1, r1, lsl #2
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	2f010000 	svccs	0x00010000
    1b18:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b1c:	2f69702f 	svccs	0x0069702f
    1b20:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1b24:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1b28:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1b2c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1b30:	534f5452 	movtpl	r5, #62546	; 0xf452
    1b34:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1b38:	6d00006f 	stcvs	0, cr0, [r0, #-444]	; 0xfffffe44
    1b3c:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    1b40:	00010063 	andeq	r0, r1, r3, rrx
    1b44:	1a050000 	bne	141b4c <__bss_end+0x12bffc>
    1b48:	00020500 	andeq	r0, r2, r0, lsl #10
    1b4c:	03000143 	movweq	r0, #323	; 0x143
    1b50:	050100c9 	streq	r0, [r1, #-201]	; 0xffffff37
    1b54:	04058406 	streq	r8, [r5], #-1030	; 0xfffffbfa
    1b58:	01040200 	mrseq	r0, R12_usr
    1b5c:	0003054c 	andeq	r0, r3, ip, asr #10
    1b60:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1b64:	01040200 	mrseq	r0, R12_usr
    1b68:	00040567 	andeq	r0, r4, r7, ror #10
    1b6c:	48010402 	stmdami	r1, {r1, sl}
    1b70:	05341a05 	ldreq	r1, [r4, #-2565]!	; 0xfffff5fb
    1b74:	04058406 	streq	r8, [r5], #-1030	; 0xfffffbfa
    1b78:	01040200 	mrseq	r0, R12_usr
    1b7c:	0003054c 	andeq	r0, r3, ip, asr #10
    1b80:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1b84:	01040200 	mrseq	r0, R12_usr
    1b88:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    1b8c:	04056701 	streq	r6, [r5], #-1793	; 0xfffff8ff
    1b90:	01040200 	mrseq	r0, R12_usr
    1b94:	03010547 	movweq	r0, #5447	; 0x1547
    1b98:	02052e0f 	andeq	r2, r5, #15, 28	; 0xf0
    1b9c:	91086867 	tstls	r8, r7, ror #16
    1ba0:	07059208 	streq	r9, [r5, -r8, lsl #4]
    1ba4:	01040200 	mrseq	r0, R12_usr
    1ba8:	000a0234 	andeq	r0, sl, r4, lsr r2
    1bac:	025f0101 	subseq	r0, pc, #1073741824	; 0x40000000
    1bb0:	00030000 	andeq	r0, r3, r0
    1bb4:	0000018f 	andeq	r0, r0, pc, lsl #3
    1bb8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1bbc:	0101000d 	tsteq	r1, sp
    1bc0:	00000101 	andeq	r0, r0, r1, lsl #2
    1bc4:	00000100 	andeq	r0, r0, r0, lsl #2
    1bc8:	2f2e2e01 	svccs	0x002e2e01
    1bcc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1bd0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1bd4:	2f2e2e2f 	svccs	0x002e2e2f
    1bd8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1bdc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1be0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1be4:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 1a64 <_start-0x659c>
    1be8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1bec:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    1bf0:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    1bf4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1bf8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1bfc:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1c00:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1c04:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1c08:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1c0c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1c10:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1c14:	61652d65 	cmnvs	r5, r5, ror #26
    1c18:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1c1c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1c20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1c24:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1c28:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1c2c:	2f646c69 	svccs	0x00646c69
    1c30:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1c34:	6b2d6269 	blvs	b5a5e0 <__bss_end+0xb44a90>
    1c38:	77766747 	ldrbvc	r6, [r6, -r7, asr #14]!
    1c3c:	656e2f45 	strbvs	r2, [lr, #-3909]!	; 0xfffff0bb
    1c40:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1c44:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    1c48:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1c4c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c50:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1c54:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    1c58:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1c5c:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    1c60:	2f007379 	svccs	0x00007379
    1c64:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1c68:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    1c6c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1c70:	67476b2d 	strbvs	r6, [r7, -sp, lsr #22]
    1c74:	2f457776 	svccs	0x00457776
    1c78:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1c7c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    1c80:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1c84:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1c88:	2f62696c 	svccs	0x0062696c
    1c8c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1c90:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    1c94:	00656c61 	rsbeq	r6, r5, r1, ror #24
    1c98:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1c9c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    1ca0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ca4:	476b2d62 	strbmi	r2, [fp, -r2, ror #26]!
    1ca8:	45777667 	ldrbmi	r7, [r7, #-1639]!	; 0xfffff999
    1cac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1cb0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    1cb4:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    1cb8:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    1cbc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1cc0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1cc4:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1cc8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1ccc:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    1cd0:	70636d65 	rsbvc	r6, r3, r5, ror #26
    1cd4:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1cd8:	73000001 	movwvc	r0, #1
    1cdc:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1ce0:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1ce4:	5f000002 	svcpl	0x00000002
    1ce8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1cec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1cf0:	72000003 	andvc	r0, r0, #3
    1cf4:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    1cf8:	0300682e 	movweq	r6, #2094	; 0x82e
    1cfc:	6f6c0000 	svcvs	0x006c0000
    1d00:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1d04:	00000300 	andeq	r0, r0, r0, lsl #6
    1d08:	6c746573 	cfldr64vs	mvdx6, [r4], #-460	; 0xfffffe34
    1d0c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1d10:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1d14:	73000004 	movwvc	r0, #4
    1d18:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    1d1c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1d20:	77000005 	strvc	r0, [r0, -r5]
    1d24:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1d28:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1d2c:	6f6c0000 	svcvs	0x006c0000
    1d30:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1d34:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1d38:	74730000 	ldrbtvc	r0, [r3], #-0
    1d3c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1d40:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1d44:	05000000 	streq	r0, [r0, #-0]
    1d48:	02050001 	andeq	r0, r5, #1
    1d4c:	00014418 	andeq	r4, r1, r8, lsl r4
    1d50:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
    1d54:	010e0303 	tsteq	lr, r3, lsl #6
    1d58:	19060605 	stmdbne	r6, {r0, r2, r9, sl}
    1d5c:	03060305 	movweq	r0, #25349	; 0x6305
    1d60:	13132e7a 	tstne	r3, #1952	; 0x7a0
    1d64:	06060516 			; <UNDEFINED> instruction: 0x06060516
    1d68:	001c0501 	andseq	r0, ip, r1, lsl #10
    1d6c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1d70:	02001805 	andeq	r1, r0, #327680	; 0x50000
    1d74:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    1d78:	4a6b0301 	bmi	1ac2984 <__bss_end+0x1aace34>
    1d7c:	03060b05 	movweq	r0, #27397	; 0x6b05
    1d80:	1a05d61d 	bne	1775fc <__bss_end+0x161aac>
    1d84:	302f0106 	eorcc	r0, pc, r6, lsl #2
    1d88:	05450d05 	strbeq	r0, [r5, #-3333]	; 0xfffff2fb
    1d8c:	0b05301a 	bleq	14ddfc <__bss_end+0x1382ac>
    1d90:	1a052f06 	bne	14d9b0 <__bss_end+0x137e60>
    1d94:	0b050106 	bleq	1421b4 <__bss_end+0x12c664>
    1d98:	1a052f06 	bne	14d9b8 <__bss_end+0x137e68>
    1d9c:	0b051306 	bleq	1469bc <__bss_end+0x130e6c>
    1da0:	01062f06 	tsteq	r6, r6, lsl #30
    1da4:	7a030d05 	bvc	c51c0 <__bss_end+0xaf670>
    1da8:	660a032e 	strvs	r0, [sl], -lr, lsr #6
    1dac:	28054a66 	stmdacs	r5, {r1, r2, r5, r6, r9, fp, lr}
    1db0:	060b0529 	streq	r0, [fp], -r9, lsr #10
    1db4:	061a05a5 	ldreq	r0, [sl], -r5, lsr #11
    1db8:	0b052e01 	bleq	14d5c4 <__bss_end+0x137a74>
    1dbc:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    1dc0:	09050f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp}
    1dc4:	05d60b03 	ldrbeq	r0, [r6, #2819]	; 0xb03
    1dc8:	2e2e2e0e 	cdpcs	14, 2, cr2, cr14, cr14, {0}
    1dcc:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1dd0:	052f0605 	streq	r0, [pc, #-1541]!	; 17d3 <_start-0x682d>
    1dd4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    1dd8:	0c052d09 	stceq	13, cr2, [r5], {9}
    1ddc:	2d09052f 	cfstr32cs	mvfx0, [r9, #-188]	; 0xffffff44
    1de0:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    1de4:	5e034509 	cfsh32pl	mvfx4, mvfx3, #9
    1de8:	030e052e 	movweq	r0, #58670	; 0xe52e
    1dec:	09052e22 	stmdbeq	r5, {r1, r5, r9, sl, fp, sp}
    1df0:	052e2e2e 	streq	r2, [lr, #-3630]!	; 0xfffff1d2
    1df4:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    1df8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    1dfc:	0c052d09 	stceq	13, cr2, [r5], {9}
    1e00:	2d09052f 	cfstr32cs	mvfx0, [r9, #-188]	; 0xffffff44
    1e04:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    1e08:	2e5e0309 	cdpcs	3, 5, cr0, cr14, cr9, {0}
    1e0c:	01000402 	tsteq	r0, r2, lsl #8
    1e10:	00027501 	andeq	r7, r2, r1, lsl #10
    1e14:	7a000300 	bvc	2a1c <_start-0x55e4>
    1e18:	02000001 	andeq	r0, r0, #1
    1e1c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1e20:	01010100 	mrseq	r0, (UNDEF: 17)
    1e24:	00000001 	andeq	r0, r0, r1
    1e28:	01000001 	tsteq	r0, r1
    1e2c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1e30:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1e34:	2f2e2e2f 	svccs	0x002e2e2f
    1e38:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1e3c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1e40:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1e44:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    1e48:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1e4c:	752f0067 	strvc	r0, [pc, #-103]!	; 1ded <_start-0x6213>
    1e50:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1c8c <_start-0x6374>
    1e54:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1e58:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1e5c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1e60:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1e64:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1e68:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    1e6c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1e70:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1e74:	2f006564 	svccs	0x00006564
    1e78:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1e7c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    1e80:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1e84:	67476b2d 	strbvs	r6, [r7, -sp, lsr #22]
    1e88:	2f457776 	svccs	0x00457776
    1e8c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1e90:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    1e94:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1e98:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1e9c:	2f62696c 	svccs	0x0062696c
    1ea0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1ea4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1ea8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1eac:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1eb0:	2f2e2e00 	svccs	0x002e2e00
    1eb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1eb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1ebc:	2f2e2e2f 	svccs	0x002e2e2f
    1ec0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1ec4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1d28 <_start-0x62d8>
    1ec8:	2f636269 	svccs	0x00636269
    1ecc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1ed0:	2e2f676e 	cdpcs	7, 2, cr6, cr15, cr14, {3}
    1ed4:	74632f2e 	strbtvc	r2, [r3], #-3886	; 0xfffff0d2
    1ed8:	2f657079 	svccs	0x00657079
    1edc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 1e2c <_start-0x61d4>
    1ee0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1ee4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    1ee8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1eec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1ef0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    1ef4:	7667476b 	strbtvc	r4, [r7], -fp, ror #14
    1ef8:	6e2f4577 	mcrvs	5, 1, r4, cr15, cr7, {3}
    1efc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1f00:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    1f04:	2f302e33 	svccs	0x00302e33
    1f08:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f0c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1d70 <_start-0x6290>
    1f10:	2f636269 	svccs	0x00636269
    1f14:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1f18:	00656475 	rsbeq	r6, r5, r5, ror r4
    1f1c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1f20:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1f24:	00010063 	andeq	r0, r1, r3, rrx
    1f28:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1f2c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1f30:	00020068 	andeq	r0, r2, r8, rrx
    1f34:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    1f38:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1f3c:	00030068 	andeq	r0, r3, r8, rrx
    1f40:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    1f44:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1f48:	00000300 	andeq	r0, r0, r0, lsl #6
    1f4c:	6b636f6c 	blvs	18ddd04 <__bss_end+0x18c81b4>
    1f50:	0300682e 	movweq	r6, #2094	; 0x82e
    1f54:	65730000 	ldrbvs	r0, [r3, #-0]!
    1f58:	636f6c74 	cmnvs	pc, #116, 24	; 0x7400
    1f5c:	2e656c61 	cdpcs	12, 6, cr6, cr5, cr1, {3}
    1f60:	00040068 	andeq	r0, r4, r8, rrx
    1f64:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1f68:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
    1f6c:	00050068 	andeq	r0, r5, r8, rrx
    1f70:	68637700 	stmdavs	r3!, {r8, r9, sl, ip, sp, lr}^
    1f74:	682e7261 	stmdavs	lr!, {r0, r5, r6, r9, ip, sp, lr}
    1f78:	00000500 	andeq	r0, r0, r0, lsl #10
    1f7c:	61636f6c 	cmnvs	r3, ip, ror #30
    1f80:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    1f84:	00000500 	andeq	r0, r0, r0, lsl #10
    1f88:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1f8c:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1f90:	00000500 	andeq	r0, r0, r0, lsl #10
    1f94:	00010500 	andeq	r0, r1, r0, lsl #10
    1f98:	45340205 	ldrmi	r0, [r4, #-517]!	; 0xfffffdfb
    1f9c:	28030001 	stmdacs	r3, {r0}
    1fa0:	13030501 	movwne	r0, #13569	; 0x3501
    1fa4:	13131315 	tstne	r3, #1409286144	; 0x54000000
    1fa8:	15060905 	strne	r0, [r6, #-2309]	; 0xfffff6fb
    1fac:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1fb0:	01060905 	tsteq	r6, r5, lsl #18
    1fb4:	30060705 	andcc	r0, r6, r5, lsl #14
    1fb8:	01060a05 	tsteq	r6, r5, lsl #20
    1fbc:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    1fc0:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    1fc4:	054a7503 	strbeq	r7, [sl, #-1283]	; 0xfffffafd
    1fc8:	4a0b030c 	bmi	2c2c00 <__bss_end+0x2ad0b0>
    1fcc:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    1fd0:	054a0607 	strbeq	r0, [sl, #-1543]	; 0xfffff9f9
    1fd4:	0e051309 	cdpeq	3, 0, cr1, cr5, cr9, {0}
    1fd8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    1fdc:	0603052b 	streq	r0, [r3], -fp, lsr #10
    1fe0:	06060552 			; <UNDEFINED> instruction: 0x06060552
    1fe4:	03010501 	movweq	r0, #5377	; 0x1501
    1fe8:	10054a6e 	andne	r4, r5, lr, ror #20
    1fec:	06070535 			; <UNDEFINED> instruction: 0x06070535
    1ff0:	162e0e03 	strtne	r0, [lr], -r3, lsl #28
    1ff4:	01060e05 	tsteq	r6, r5, lsl #28
    1ff8:	2f060705 	svccs	0x00060705
    1ffc:	17060d05 	strne	r0, [r6, -r5, lsl #26]
    2000:	05290e05 	streq	r0, [r9, #-3589]!	; 0xfffff1fb
    2004:	052f0607 	streq	r0, [pc, #-1543]!	; 1a05 <_start-0x65fb>
    2008:	2e16060d 	cfmsub32cs	mvax0, mvfx0, mvfx6, mvfx13
    200c:	a0060b05 	andge	r0, r6, r5, lsl #22
    2010:	01061b05 	tsteq	r6, r5, lsl #22
    2014:	2f060b05 	svccs	0x00060b05
    2018:	01061b05 	tsteq	r6, r5, lsl #22
    201c:	2f060b05 	svccs	0x00060b05
    2020:	01061b05 	tsteq	r6, r5, lsl #22
    2024:	2f060b05 	svccs	0x00060b05
    2028:	01061b05 	tsteq	r6, r5, lsl #22
    202c:	2f060b05 	svccs	0x00060b05
    2030:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    2034:	4a2e7a03 	bmi	ba0848 <__bss_end+0xb8acf8>
    2038:	662e0903 	strtvs	r0, [lr], -r3, lsl #18
    203c:	0b052e2e 	bleq	14d8fc <__bss_end+0x137dac>
    2040:	1b056806 	blne	15c060 <__bss_end+0x146510>
    2044:	0b050106 	bleq	142464 <__bss_end+0x12c914>
    2048:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    204c:	054a0f06 	strbeq	r0, [sl, #-3846]	; 0xfffff0fa
    2050:	2e0b0309 	cdpcs	3, 0, cr0, cr11, cr9, {0}
    2054:	05052e4a 	streq	r2, [r5, #-3658]	; 0xfffff1b6
    2058:	0a052f06 	beq	14dc78 <__bss_end+0x138128>
    205c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2060:	4e01052d 	cfsh32mi	mvfx0, mvfx1, #29
    2064:	2a09052e 	bcs	243524 <__bss_end+0x22d9d4>
    2068:	05052e4a 	streq	r2, [r5, #-3658]	; 0xfffff1b6
    206c:	0a052f06 	beq	14dc8c <__bss_end+0x13813c>
    2070:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2074:	0318052d 	tsteq	r8, #188743680	; 0xb400000
    2078:	052e6671 	streq	r6, [lr, #-1649]!	; 0xfffff98f
    207c:	2e5d0309 	cdpcs	3, 5, cr0, cr13, cr9, {0}
    2080:	1e030d05 	cdpne	13, 0, cr0, cr3, cr5, {0}
    2084:	0004024a 	andeq	r0, r4, sl, asr #4
    2088:	01e70101 	mvneq	r0, r1, lsl #2
    208c:	00030000 	andeq	r0, r3, r0
    2090:	00000114 	andeq	r0, r0, r4, lsl r1
    2094:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2098:	0101000d 	tsteq	r1, sp
    209c:	00000101 	andeq	r0, r0, r1, lsl #2
    20a0:	00000100 	andeq	r0, r0, r0, lsl #2
    20a4:	2f2e2e01 	svccs	0x002e2e01
    20a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20b0:	2f2e2e2f 	svccs	0x002e2e2f
    20b4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    20b8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1f1c <_start-0x60e4>
    20bc:	2f636269 	svccs	0x00636269
    20c0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    20c4:	2f00676e 	svccs	0x0000676e
    20c8:	2f727375 	svccs	0x00727375
    20cc:	2f62696c 	svccs	0x0062696c
    20d0:	2f636367 	svccs	0x00636367
    20d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    20d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    20dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    20e0:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    20e4:	2f312e33 	svccs	0x00312e33
    20e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    20ec:	00656475 	rsbeq	r6, r5, r5, ror r4
    20f0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    20f4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    20f8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    20fc:	476b2d62 	strbmi	r2, [fp, -r2, ror #26]!
    2100:	45777667 	ldrbmi	r7, [r7, #-1639]!	; 0xfffff999
    2104:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2108:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    210c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    2110:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    2114:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2118:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    211c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2120:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2124:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    2128:	622f0073 	eorvs	r0, pc, #115	; 0x73
    212c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    2130:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2134:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    2138:	7667476b 	strbtvc	r4, [r7], -fp, ror #14
    213c:	6e2f4577 	mcrvs	5, 1, r4, cr15, cr7, {3}
    2140:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2144:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    2148:	2f302e33 	svccs	0x00302e33
    214c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2150:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1fb4 <_start-0x604c>
    2154:	2f636269 	svccs	0x00636269
    2158:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    215c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2160:	72747300 	rsbsvc	r7, r4, #0, 6
    2164:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2168:	0100632e 	tsteq	r0, lr, lsr #6
    216c:	74730000 	ldrbtvc	r0, [r3], #-0
    2170:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2174:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2178:	745f0000 	ldrbvc	r0, [pc], #-0	; 2180 <_start-0x5e80>
    217c:	73657079 	cmnvc	r5, #121	; 0x79
    2180:	0300682e 	movweq	r6, #2094	; 0x82e
    2184:	65720000 	ldrbvs	r0, [r2, #-0]!
    2188:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    218c:	00030068 	andeq	r0, r3, r8, rrx
    2190:	636f6c00 	cmnvs	pc, #0, 24
    2194:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    2198:	73000003 	movwvc	r0, #3
    219c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    21a0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    21a4:	00000004 	andeq	r0, r0, r4
    21a8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    21ac:	01464c02 	cmpeq	r6, r2, lsl #24
    21b0:	00c00300 	sbceq	r0, r0, r0, lsl #6
    21b4:	03030501 	movweq	r0, #13569	; 0x3501
    21b8:	13130112 	tstne	r3, #-2147483644	; 0x80000004
    21bc:	08051513 	stmdaeq	r5, {r0, r1, r4, r8, sl, ip}
    21c0:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
    21c4:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
    21c8:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
    21cc:	9e680301 	cdpls	3, 6, cr0, cr8, cr1, {0}
    21d0:	12030905 	andne	r0, r3, #81920	; 0x14000
    21d4:	341d052e 	ldrcc	r0, [sp], #-1326	; 0xfffffad2
    21d8:	11030905 	tstne	r3, r5, lsl #18
    21dc:	0607052e 	streq	r0, [r7], -lr, lsr #10
    21e0:	0610054c 	ldreq	r0, [r0], -ip, asr #10
    21e4:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    21e8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    21ec:	07052e13 	smladeq	r5, r3, lr, r2
    21f0:	052f062d 	streq	r0, [pc, #-1581]!	; 1bcb <_start-0x6435>
    21f4:	2e01060a 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx10
    21f8:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    21fc:	07052e0a 	streq	r2, [r5, -sl, lsl #28]
    2200:	13054a06 	movwne	r4, #23046	; 0x5a06
    2204:	0a050106 	beq	142624 <__bss_end+0x12cad4>
    2208:	0607052e 	streq	r0, [r7], -lr, lsr #10
    220c:	0609052d 	streq	r0, [r9], -sp, lsr #10
    2210:	06030510 			; <UNDEFINED> instruction: 0x06030510
    2214:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    2218:	05140601 	ldreq	r0, [r4, #-1537]	; 0xfffff9ff
    221c:	0c054509 	cfstr32eq	mvfx4, [r5], {9}
    2220:	4909052f 	stmdbmi	r9, {r0, r1, r2, r3, r5, r8, sl}
    2224:	2f060505 	svccs	0x00060505
    2228:	01060c05 	tsteq	r6, r5, lsl #24
    222c:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    2230:	054d0603 	strbeq	r0, [sp, #-1539]	; 0xfffff9fd
    2234:	4a140601 	bmi	503a40 <__bss_end+0x4edef0>
    2238:	65031305 	strvs	r1, [r3, #-773]	; 0xfffffcfb
    223c:	332d052e 			; <UNDEFINED> instruction: 0x332d052e
    2240:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
    2244:	4c060104 	stfmis	f0, [r6], {4}
    2248:	01040200 	mrseq	r0, R12_usr
    224c:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
    2250:	01040200 	mrseq	r0, R12_usr
    2254:	0029052c 	eoreq	r0, r9, ip, lsr #10
    2258:	66010402 	strvs	r0, [r1], -r2, lsl #8
    225c:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    2260:	052f0604 	streq	r0, [pc, #-1540]!	; 1c64 <_start-0x639c>
    2264:	050f060d 	streq	r0, [pc, #-1549]	; 1c5f <_start-0x63a1>
    2268:	21053113 	tstcs	r5, r3, lsl r1
    226c:	2b0d052e 	blcs	34372c <__bss_end+0x32dbdc>
    2270:	01000802 	tsteq	r0, r2, lsl #16
    2274:	Address 0x00002274 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x18c4a18>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	70006d61 	andvc	r6, r0, r1, ror #26
      38:	69724f78 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, lr}^
      3c:	616e6967 	cmnvs	lr, r7, ror #18
      40:	534f546c 	movtpl	r5, #62572	; 0xf46c
      44:	43425f00 	movtmi	r5, #12032	; 0x2f00
      48:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
      4c:	49545f35 	ldmdbmi	r4, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      50:	5f52454d 	svcpl	0x0052454d
      54:	53474552 	movtpl	r4, #30034	; 0x7552
      58:	6f687300 	svcvs	0x00687300
      5c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
      60:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      64:	2064656e 	rsbcs	r6, r4, lr, ror #10
      68:	00746e69 	rsbseq	r6, r4, r9, ror #28
      6c:	41546470 	cmpmi	r4, r0, ror r4
      70:	435f4b53 	cmpmi	pc, #84992	; 0x14c00
      74:	0045444f 	subeq	r4, r5, pc, asr #8
      78:	20554e47 	subscs	r4, r5, r7, asr #28
      7c:	20373143 	eorscs	r3, r7, r3, asr #2
      80:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
      84:	30322031 	eorscc	r2, r2, r1, lsr r0
      88:	37303931 			; <UNDEFINED> instruction: 0x37303931
      8c:	28203330 	stmdacs	r0!, {r4, r5, r8, r9, ip, sp}
      90:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
      94:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      98:	63675b20 	cmnvs	r7, #32, 22	; 0x8000
      9c:	2d382d63 	ldccs	13, cr2, [r8, #-396]!	; 0xfffffe74
      a0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      a4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      a8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      ac:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      b0:	30333732 	eorscc	r3, r3, r2, lsr r7
      b4:	205d3732 	subscs	r3, sp, r2, lsr r7
      b8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
      bc:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
      c0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
      c4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
      c8:	616d2d20 	cmnvs	sp, r0, lsr #26
      cc:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
      d0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
      d4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
      d8:	7a36766d 	bvc	d9da94 <__bss_end+0xd87f44>
      dc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      e0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
      e4:	50760067 	rsbspl	r0, r6, r7, rrx
      e8:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
      ec:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
      f0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
      f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
      f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 44 <_start-0x7fbc>
      fc:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     100:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     104:	72656270 	rsbvc	r6, r5, #112, 4
     108:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     10c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     110:	4f545265 	svcmi	0x00545265
     114:	54760053 	ldrbtpl	r0, [r6], #-83	; 0xffffffad
     118:	496b6369 	stmdbmi	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     11c:	6c005253 	sfmvs	f5, 4, [r0], {83}	; 0x53
     120:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     124:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     128:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     12c:	50767000 	rsbspl	r7, r6, r0
     130:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     134:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     138:	52700073 	rsbspl	r0, r0, #115	; 0x73
     13c:	00736765 	rsbseq	r6, r3, r5, ror #14
     140:	6f547870 	svcvs	0x00547870
     144:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
     148:	6b636174 	blvs	18d8720 <__bss_end+0x18c2bd0>
     14c:	6f682f00 	svcvs	0x00682f00
     150:	702f656d 	eorvc	r6, pc, sp, ror #10
     154:	61522f69 	cmpvs	r2, r9, ror #30
     158:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     15c:	50797272 	rsbspl	r7, r9, r2, ror r2
     160:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     164:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     168:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     16c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     170:	2f534f54 	svccs	0x00534f54
     174:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     178:	702f6563 	eorvc	r6, pc, r3, ror #10
     17c:	6174726f 	cmnvs	r4, pc, ror #4
     180:	2f656c62 	svccs	0x00656c62
     184:	2f434347 	svccs	0x00434347
     188:	70736152 	rsbsvc	r6, r3, r2, asr r1
     18c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     190:	2f695079 	svccs	0x00695079
     194:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     198:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
     19c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     1a0:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     1a4:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     1a8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     1ac:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     1b0:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     1b4:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     1b8:	70007265 	andvc	r7, r0, r5, ror #4
     1bc:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     1c0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     1c4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     1c8:	53657369 	cmnpl	r5, #-1543503871	; 0xa4000001
     1cc:	6b636174 	blvs	18d87a4 <__bss_end+0x18c2c54>
     1d0:	436c7500 	cmnmi	ip, #0, 10
     1d4:	61706d6f 	cmnvs	r0, pc, ror #26
     1d8:	614d6572 	hvcvs	54866	; 0xd652
     1dc:	00686374 	rsbeq	r6, r8, r4, ror r3
     1e0:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     1e4:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
     1e8:	72437265 	subvc	r7, r3, #1342177286	; 0x50000006
     1ec:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     1f0:	70006c61 	andvc	r6, r0, r1, ror #24
     1f4:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     1f8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     1fc:	00424354 	subeq	r4, r2, r4, asr r3
     200:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     204:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     208:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xfffff39f
     20c:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     210:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
     214:	2f656d6f 	svccs	0x00656d6f
     218:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
     21c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     220:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     224:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     228:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     22c:	2f534f54 	svccs	0x00534f54
     230:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     234:	534f5452 	movtpl	r5, #62546	; 0xf452
     238:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff11 <_estack+0xf7feff11>
     23c:	2f656372 	svccs	0x00656372
     240:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     244:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     248:	4343472f 	movtmi	r4, #14127	; 0x372f
     24c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     250:	72656270 	rsbvc	r6, r5, #112, 4
     254:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     258:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     25c:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     260:	7600632e 	strvc	r6, [r0], -lr, lsr #6
     264:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     268:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
     26c:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     270:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     274:	6f507600 	svcvs	0x00507600
     278:	53497472 	movtpl	r7, #38002	; 0x9472
     27c:	61745352 	cmnvs	r4, r2, asr r3
     280:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     284:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     288:	006b7361 	rsbeq	r7, fp, r1, ror #6
     28c:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     290:	65695974 	strbvs	r5, [r9, #-2420]!	; 0xfffff68c
     294:	7250646c 	subsvc	r6, r0, #108, 8	; 0x6c000000
     298:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     29c:	00726f73 	rsbseq	r6, r2, r3, ror pc
     2a0:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     2a4:	4f545265 	svcmi	0x00545265
     2a8:	53495f53 	movtpl	r5, #40787	; 0x9f53
     2ac:	5f670052 	svcpl	0x00670052
     2b0:	61745362 	cmnvs	r4, r2, ror #6
     2b4:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
     2b8:	55787000 	ldrbpl	r7, [r8, #-0]!
     2bc:	6f6c626e 	svcvs	0x006c626e
     2c0:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     2c4:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     2c8:	54787000 	ldrbtpl	r7, [r8], #-0
     2cc:	00706d65 	rsbseq	r6, r0, r5, ror #26
     2d0:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     2d4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     2d8:	6441656e 	strbvs	r6, [r1], #-1390	; 0xfffffa92
     2dc:	446f5464 	strbtmi	r5, [pc], #-1124	; 2e4 <_start-0x7d1c>
     2e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     2e4:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     2e8:	70007473 	andvc	r7, r0, r3, ror r4
     2ec:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     2f0:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     2f4:	70007265 	andvc	r7, r0, r5, ror #4
     2f8:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     2fc:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     300:	7546656e 	strbvc	r6, [r6, #-1390]	; 0xfffffa92
     304:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     308:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     30c:	73736150 	cmnvc	r3, #80, 2
     310:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
     314:	00736b63 	rsbseq	r6, r3, r3, ror #22
     318:	6e497870 	mcrvs	8, 2, r7, cr9, cr0, {3}
     31c:	00786564 	rsbseq	r6, r8, r4, ror #10
     320:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     324:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     328:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     32c:	6b636954 	blvs	18da884 <__bss_end+0x18c4d34>
     330:	446f5473 	strbtmi	r5, [pc], #-1139	; 338 <_start-0x7cc8>
     334:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     338:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     33c:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
     340:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
     344:	656e774f 	strbvs	r7, [lr, #-1871]!	; 0xfffff8b1
     348:	4c780072 	ldclmi	0, cr0, [r8], #-456	; 0xfffffe38
     34c:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
     350:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     354:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     358:	6f437800 	svcvs	0x00437800
     35c:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     360:	54656e69 	strbtpl	r6, [r5], #-3689	; 0xfffff197
     364:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     368:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     36c:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     370:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     374:	004d4554 	subeq	r4, sp, r4, asr r5
     378:	764f7870 			; <UNDEFINED> instruction: 0x764f7870
     37c:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
     380:	6544776f 	strbvs	r7, [r4, #-1903]	; 0xfffff891
     384:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     388:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     38c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     390:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     394:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
     398:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     39c:	6f526f43 	svcvs	0x00526f43
     3a0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3a4:	61655265 	cmnvs	r5, r5, ror #4
     3a8:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     3ac:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     3b0:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     3b4:	616c6544 	cmnvs	ip, r4, asr #10
     3b8:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     3bc:	756f526f 	strbvc	r5, [pc, #-623]!	; 155 <_start-0x7eab>
     3c0:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     3c4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     3c8:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     3cc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     3d0:	6f436465 	svcvs	0x00436465
     3d4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     3d8:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     3dc:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     3e0:	726f6300 	rsbvc	r6, pc, #0, 6
     3e4:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3e8:	43787000 	cmnmi	r8, #0
     3ec:	00424352 	subeq	r4, r2, r2, asr r3
     3f0:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     3f4:	6f697665 	svcvs	0x00697665
     3f8:	70007375 	andvc	r7, r0, r5, ror r3
     3fc:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     400:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     404:	6f43656e 	svcvs	0x0043656e
     408:	63006564 	movwvs	r6, #1380	; 0x564
     40c:	6f43726f 	svcvs	0x0043726f
     410:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     414:	43656e69 	cmnmi	r5, #1680	; 0x690
     418:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     41c:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
     420:	006b636f 	rsbeq	r6, fp, pc, ror #6
     424:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     428:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     42c:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0xfffffa92
     430:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     434:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 324 <_start-0x7cdc>
     438:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     43c:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     440:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     444:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     448:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     44c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     450:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     454:	00737473 	rsbseq	r7, r3, r3, ror r4
     458:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
     45c:	00786564 	rsbseq	r6, r8, r4, ror #10
     460:	6e694d78 	mcrvs	13, 3, r4, cr9, cr8, {3}
     464:	73694c69 	cmnvc	r9, #26880	; 0x6900
     468:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     46c:	4378006d 	cmnmi	r8, #109	; 0x6d
     470:	756f526f 	strbvc	r5, [pc, #-623]!	; 209 <_start-0x7df7>
     474:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     478:	61657243 	cmnvs	r5, r3, asr #4
     47c:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     480:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     484:	4f726562 	svcmi	0x00726562
     488:	65744966 	ldrbvs	r4, [r4, #-2406]!	; 0xfffff69a
     48c:	7000736d 	andvc	r7, r0, sp, ror #6
     490:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     494:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     498:	6f526f43 	svcvs	0x00526f43
     49c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4a0:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     4a4:	6f697250 	svcvs	0x00697250
     4a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     4ac:	6f437800 	svcvs	0x00437800
     4b0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     4b4:	48656e69 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     4b8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     4bc:	50780065 	rsbspl	r0, r8, r5, rrx
     4c0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     4c4:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     4c8:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     4cc:	756f526f 	strbvc	r5, [pc, #-623]!	; 265 <_start-0x7d9b>
     4d0:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4d4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     4d8:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     4dc:	00747865 	rsbseq	r7, r4, r5, ror #16
     4e0:	76457870 			; <UNDEFINED> instruction: 0x76457870
     4e4:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     4e8:	00747369 	rsbseq	r7, r4, r9, ror #6
     4ec:	6f437870 	svcvs	0x00437870
     4f0:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
     4f4:	00747369 	rsbseq	r7, r4, r9, ror #6
     4f8:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     4fc:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     500:	4376006d 	cmnmi	r6, #109	; 0x6d
     504:	756f526f 	strbvc	r5, [pc, #-623]!	; 29d <_start-0x7d63>
     508:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     50c:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     510:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     514:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     518:	6f54656d 	svcvs	0x0054656d
     51c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     520:	43787000 	cmnmi	r8, #0
     524:	756f526f 	strbvc	r5, [pc, #-623]!	; 2bd <_start-0x7d43>
     528:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     52c:	53787500 	cmnpl	r8, #0, 10
     530:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     534:	6f682f00 	svcvs	0x00682f00
     538:	702f656d 	eorvc	r6, pc, sp, ror #10
     53c:	61522f69 	cmpvs	r2, r9, ror #30
     540:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     544:	50797272 	rsbspl	r7, r9, r2, ror r2
     548:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     54c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     550:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     554:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     558:	2f534f54 	svccs	0x00534f54
     55c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     560:	632f6563 			; <UNDEFINED> instruction: 0x632f6563
     564:	74756f72 	ldrbtvc	r6, [r5], #-3954	; 0xfffff08e
     568:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     56c:	4d780063 	ldclmi	0, cr0, [r8, #-396]!	; 0xfffffe74
     570:	5f494e49 	svcpl	0x00494e49
     574:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0xfffff6b4
     578:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0xfffff6a1
     57c:	4c78004d 	ldclmi	0, cr0, [r8], #-308	; 0xfffffecc
     580:	00545349 	subseq	r5, r4, r9, asr #6
     584:	65447870 	strbvs	r7, [r4, #-2160]	; 0xfffff790
     588:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     58c:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     590:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     594:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     598:	70007473 	andvc	r7, r0, r3, ror r4
     59c:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     5a0:	506b6365 	rsbpl	r6, fp, r5, ror #6
     5a4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     5a8:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     5ac:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     5b0:	00747369 	rsbseq	r7, r4, r9, ror #6
     5b4:	6e654778 	mcrvs	7, 3, r4, cr5, cr8, {3}
     5b8:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     5bc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     5c0:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     5c4:	76727000 	ldrbtvc	r7, [r2], -r0
     5c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     5cc:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     5d0:	6f436573 	svcvs	0x00436573
     5d4:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     5d8:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     5dc:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     5e0:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     5e4:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     5e8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     5ec:	006d6574 	rsbeq	r6, sp, r4, ror r5
     5f0:	43767270 	cmnmi	r6, #112, 4
     5f4:	6b636568 	blvs	18d9b9c <__bss_end+0x18c404c>
     5f8:	616c6544 	cmnvs	ip, r4, asr #10
     5fc:	4c646579 	cfstr64mi	mvdx6, [r4], #-484	; 0xfffffe1c
     600:	00747369 	rsbseq	r7, r4, r9, ror #6
     604:	4f437263 	svcmi	0x00437263
     608:	54554f52 	ldrbpl	r4, [r5], #-3922	; 0xfffff0ae
     60c:	5f454e49 	svcpl	0x00454e49
     610:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xfffff0bd
     614:	73645f00 	cmnvc	r4, #0, 30
     618:	61685f6f 	cmnvs	r8, pc, ror #30
     61c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     620:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     624:	5f00657a 	svcpl	0x0000657a
     628:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     62c:	5f003834 	svcpl	0x00003834
     630:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     634:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
     638:	645f0079 	ldrbvs	r0, [pc], #-121	; 640 <_start-0x79c0>
     63c:	00617461 	rsbeq	r7, r1, r1, ror #8
     640:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
     644:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     648:	6174735f 	cmnvs	r4, pc, asr r3
     64c:	5f006574 	svcpl	0x00006574
     650:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
     654:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
     658:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     65c:	00657461 	rsbeq	r7, r5, r1, ror #8
     660:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     664:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     668:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     66c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     670:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     674:	5f00746e 	svcpl	0x0000746e
     678:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
     67c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     680:	6f6c5f5f 	svcvs	0x006c5f5f
     684:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     688:	7000745f 	andvc	r7, r0, pc, asr r4
     68c:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     690:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     694:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     698:	626d5f00 	rsbvs	r5, sp, #0, 30
     69c:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
     6a0:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     6a4:	00657461 	rsbeq	r7, r5, r1, ror #8
     6a8:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
     6ac:	5f626d6f 	svcpl	0x00626d6f
     6b0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6b4:	5f5f0065 	svcpl	0x005f0065
     6b8:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
     6bc:	5f006365 	svcpl	0x00006365
     6c0:	66756275 			; <UNDEFINED> instruction: 0x66756275
     6c4:	61625f00 	cmnvs	r2, r0, lsl #30
     6c8:	5f006573 	svcpl	0x00006573
     6cc:	5f6d745f 	svcpl	0x006d745f
     6d0:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
     6d4:	735f5f00 	cmpvc	pc, #0, 30
     6d8:	6f5f0066 	svcvs	0x005f0066
     6dc:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     6e0:	615f7469 	cmpvs	pc, r9, ror #8
     6e4:	00736772 	rsbseq	r6, r3, r2, ror r7
     6e8:	6f6f635f 	svcvs	0x006f635f
     6ec:	0065696b 	rsbeq	r6, r5, fp, ror #18
     6f0:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
     6f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
     6f8:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     6fc:	6c665f00 	stclvs	15, cr5, [r6], #-0
     700:	00736761 	rsbseq	r6, r3, r1, ror #14
     704:	5f73695f 	svcpl	0x0073695f
     708:	00617863 	rsbeq	r7, r1, r3, ror #16
     70c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     710:	5f006e69 	svcpl	0x00006e69
     714:	736b6c62 	cmnvc	fp, #25088	; 0x6200
     718:	00657a69 	rsbeq	r7, r5, r9, ror #20
     71c:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     720:	00667562 	rsbeq	r7, r6, r2, ror #10
     724:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     728:	00746573 	rsbseq	r6, r4, r3, ror r5
     72c:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     730:	76006d65 	strvc	r6, [r0], -r5, ror #26
     734:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     738:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     73c:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     740:	6d5f0064 	ldclvs	0, cr0, [pc, #-400]	; 5b8 <_start-0x7a48>
     744:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
     748:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
     74c:	6174735f 	cmnvs	r4, pc, asr r3
     750:	5f006574 	svcpl	0x00006574
     754:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
     758:	735f6e65 	cmpvc	pc, #1616	; 0x650
     75c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     760:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     764:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     768:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     76c:	4c760073 	ldclmi	0, cr0, [r6], #-460	; 0xfffffe34
     770:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     774:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     778:	73696c61 	cmnvc	r9, #24832	; 0x6100
     77c:	65744965 	ldrbvs	r4, [r4, #-2405]!	; 0xfffff69b
     780:	665f006d 	ldrbvs	r0, [pc], -sp, rrx
     784:	6b636f6c 	blvs	18dc53c <__bss_end+0x18c69ec>
     788:	5f00745f 	svcpl	0x0000745f
     78c:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
     790:	5f007272 	svcpl	0x00007272
     794:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
     798:	5f00746e 	svcpl	0x0000746e
     79c:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
     7a0:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     7a4:	61676e67 	cmnvs	r7, r7, ror #28
     7a8:	725f006d 	subsvc	r0, pc, #109	; 0x6d
     7ac:	00646165 	rsbeq	r6, r4, r5, ror #2
     7b0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     7b4:	5f746c75 	svcpl	0x00746c75
     7b8:	5f5f006b 	svcpl	0x005f006b
     7bc:	5f006d74 	svcpl	0x00006d74
     7c0:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     7c4:	735f0062 	cmpvc	pc, #98	; 0x62
     7c8:	756f6474 	strbvc	r6, [pc, #-1140]!	; 35c <_start-0x7ca4>
     7cc:	635f0074 	cmpvs	pc, #116	; 0x74
     7d0:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     7d4:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
     7d8:	00656c69 	rsbeq	r6, r5, r9, ror #24
     7dc:	6f696e5f 	svcvs	0x00696e5f
     7e0:	5f007362 	svcpl	0x00007362
     7e4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
     7e8:	00307469 	eorseq	r7, r0, r9, ror #8
     7ec:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     7f0:	5f6c616e 	svcpl	0x006c616e
     7f4:	00667562 	rsbeq	r7, r6, r2, ror #10
     7f8:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
     7fc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     800:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     804:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     808:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
     80c:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     810:	77006863 	strvc	r6, [r0, -r3, ror #16]
     814:	5f746e69 	svcpl	0x00746e69
     818:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     81c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     820:	73694c76 	cmnvc	r9, #30208	; 0x7600
     824:	6d655274 	sfmvs	f5, 2, [r5, #-464]!	; 0xfffffe30
     828:	0065766f 	rsbeq	r7, r5, pc, ror #12
     82c:	616c665f 	cmnvs	ip, pc, asr r6
     830:	00327367 	eorseq	r7, r2, r7, ror #6
     834:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     838:	5f006574 	svcpl	0x00006574
     83c:	5f6d745f 	svcpl	0x006d745f
     840:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
     844:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     848:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
     84c:	6d65526f 	sfmvs	f5, 2, [r5, #-444]!	; 0xfffffe44
     850:	0065766f 	rsbeq	r7, r5, pc, ror #12
     854:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     858:	5f006674 	svcpl	0x00006674
     85c:	5f6d745f 	svcpl	0x006d745f
     860:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     864:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
     868:	00746978 	rsbseq	r6, r4, r8, ror r9
     86c:	6f627573 	svcvs	0x00627573
     870:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
     874:	5f5f0067 	svcpl	0x005f0067
     878:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
     87c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     880:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
     884:	00745f66 	rsbseq	r5, r4, r6, ror #30
     888:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     88c:	73696c65 	cmnvc	r9, #25856	; 0x6500
     890:	4c5f0074 	mrrcmi	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     894:	5f4b434f 	svcpl	0x004b434f
     898:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
     89c:	56495352 			; <UNDEFINED> instruction: 0x56495352
     8a0:	00545f45 	subseq	r5, r4, r5, asr #30
     8a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     8a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     8ac:	61686320 	cmnvs	r8, r0, lsr #6
     8b0:	685f0072 	ldmdavs	pc, {r1, r4, r5, r6}^	; <UNPREDICTABLE>
     8b4:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     8b8:	73006f6e 	movwvc	r6, #3950	; 0xf6e
     8bc:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     8c0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     8c4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 8cc <_start-0x7734>
     8c8:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     8cc:	5f007961 	svcpl	0x00007961
     8d0:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
     8d4:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^	; <UNPREDICTABLE>
     8d8:	0073626f 	rsbseq	r6, r3, pc, ror #4
     8dc:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     8e0:	5f00454c 	svcpl	0x0000454c
     8e4:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
     8e8:	5f657461 	svcpl	0x00657461
     8ec:	5f5f0074 	svcpl	0x005f0074
     8f0:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
     8f4:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 7e8 <_start-0x7818>
     8f8:	61747362 	cmnvs	r4, r2, ror #6
     8fc:	5f006574 	svcpl	0x00006574
     900:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     904:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     908:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 740 <_start-0x78c0>
     90c:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
     910:	6174735f 	cmnvs	r4, pc, asr r3
     914:	5f006574 	svcpl	0x00006574
     918:	00636e69 	rsbeq	r6, r3, r9, ror #28
     91c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     920:	635f5f00 	cmpvs	pc, #0, 30
     924:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     928:	5f007075 	svcpl	0x00007075
     92c:	70736e75 	rsbsvc	r6, r3, r5, ror lr
     930:	66696365 	strbtvs	r6, [r9], -r5, ror #6
     934:	5f646569 	svcpl	0x00646569
     938:	61636f6c 	cmnvs	r3, ip, ror #30
     93c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     940:	006f666e 	rsbeq	r6, pc, lr, ror #12
     944:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     948:	00736477 	rsbseq	r6, r3, r7, ror r4
     94c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 898 <_start-0x7768>
     950:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     954:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     958:	72656270 	rsbvc	r6, r5, #112, 4
     95c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     960:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     964:	4f545265 	svcmi	0x00545265
     968:	72462f53 	subvc	r2, r6, #332	; 0x14c
     96c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     970:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     974:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     978:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     97c:	632e7473 			; <UNDEFINED> instruction: 0x632e7473
     980:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     984:	5f006465 	svcpl	0x00006465
     988:	756f635f 	strbvc	r6, [pc, #-863]!	; 631 <_start-0x79cf>
     98c:	5f00746e 	svcpl	0x0000746e
     990:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
     994:	5f006575 	svcpl	0x00006575
     998:	6b656573 	blvs	1959f6c <__bss_end+0x194441c>
     99c:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     9a0:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     9a4:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     9a8:	70665f00 	rsbvc	r5, r6, r0, lsl #30
     9ac:	745f736f 	ldrbvc	r7, [pc], #-879	; 9b4 <_start-0x764c>
     9b0:	4c787000 	ldclmi	0, cr7, [r8], #-0
     9b4:	00747369 	rsbseq	r7, r4, r9, ror #6
     9b8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     9bc:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
     9c0:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
     9c4:	5f00746c 	svcpl	0x0000746c
     9c8:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     9cc:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     9d0:	00747361 	rsbseq	r7, r4, r1, ror #6
     9d4:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     9d8:	73657079 	cmnvc	r5, #121	; 0x79
     9dc:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
     9e0:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     9e4:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
     9e8:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
     9ec:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffffaf4 <_estack+0xf7fefaf4>
     9f0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     9f4:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     9f8:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     9fc:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     a00:	675f0072 			; <UNDEFINED> instruction: 0x675f0072
     a04:	61626f6c 	cmnvs	r2, ip, ror #30
     a08:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     a0c:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
     a10:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     a14:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     a18:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     a1c:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     a20:	4c760064 	ldclmi	0, cr0, [r6], #-400	; 0xfffffe70
     a24:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     a28:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a2c:	73696c61 	cmnvc	r9, #24832	; 0x6100
     a30:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
     a34:	5f007364 	svcpl	0x00007364
     a38:	5f6d745f 	svcpl	0x006d745f
     a3c:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
     a40:	6c675f00 	stclvs	15, cr5, [r7], #-0
     a44:	5f006575 	svcpl	0x00006575
     a48:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
     a4c:	00636f6c 	rsbeq	r6, r3, ip, ror #30
     a50:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
     a54:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
     a58:	735f0066 	cmpvc	pc, #102	; 0x66
     a5c:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
     a60:	00636e75 	rsbeq	r6, r3, r5, ror lr
     a64:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     a68:	664f6575 			; <UNDEFINED> instruction: 0x664f6575
     a6c:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     a70:	6f697472 	svcvs	0x00697472
     a74:	725f006e 	subsvc	r0, pc, #110	; 0x6e
     a78:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     a7c:	626e5f00 	rsbvs	r5, lr, #0, 30
     a80:	5f006675 	svcpl	0x00006675
     a84:	73756e75 	cmnvc	r5, #1872	; 0x750
     a88:	5f006465 	svcpl	0x00006465
     a8c:	5f6d745f 	svcpl	0x006d745f
     a90:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     a94:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     a98:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     a9c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     aa0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     aa4:	6c635f00 	stclvs	15, cr5, [r3], #-0
     aa8:	0065736f 	rsbeq	r7, r5, pc, ror #6
     aac:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
     ab0:	626d5f00 	rsbvs	r5, sp, #0, 30
     ab4:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     ab8:	6174735f 	cmnvs	r4, pc, asr r3
     abc:	5f006574 	svcpl	0x00006574
     ac0:	00733570 	rsbseq	r3, r3, r0, ror r5
     ac4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     ac8:	61646d5f 	cmnvs	r4, pc, asr sp
     acc:	51780079 	cmnpl	r8, r9, ror r0
     ad0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     ad4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     ad8:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     adc:	46646e65 	strbtmi	r6, [r4], -r5, ror #28
     ae0:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     ae4:	75005253 	strvc	r5, [r0, #-595]	; 0xfffffdad
     ae8:	65755163 	ldrbvs	r5, [r5, #-355]!	; 0xfffffe9d
     aec:	79546575 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     af0:	78006570 	stmdavc	r0, {r4, r5, r6, r8, sl, sp, lr}
     af4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     af8:	51734965 	cmnpl	r3, r5, ror #18
     afc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b00:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     b04:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 9f4 <_start-0x760c>
     b08:	00525349 	subseq	r5, r2, r9, asr #6
     b0c:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     b10:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     b14:	61737365 	cmnvs	r3, r5, ror #6
     b18:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     b1c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     b20:	7000676e 	andvc	r6, r0, lr, ror #14
     b24:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     b28:	73006575 	movwvc	r6, #1397	; 0x575
     b2c:	5f657a69 	svcpl	0x00657a69
     b30:	51780074 	cmnpl	r8, r4, ror r0
     b34:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b38:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     b3c:	45657565 	strbmi	r7, [r5, #-1381]!	; 0xfffffa9b
     b40:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b44:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; a34 <_start-0x75cc>
     b48:	00525349 	subseq	r5, r2, r9, asr #6
     b4c:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     b50:	006b636f 	rsbeq	r6, fp, pc, ror #6
     b54:	65755176 	ldrbvs	r5, [r5, #-374]!	; 0xfffffe8a
     b58:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
     b5c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     b60:	61547800 	cmpvs	r4, r0, lsl #16
     b64:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
     b68:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     b6c:	6f54676e 	svcvs	0x0054676e
     b70:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     b74:	00657669 	rsbeq	r7, r5, r9, ror #12
     b78:	43767270 	cmnmi	r6, #112, 4
     b7c:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     b80:	54617461 	strbtpl	r7, [r1], #-1121	; 0xfffffb9f
     b84:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     b88:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     b8c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     b90:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     b94:	52637000 	rsbpl	r7, r3, #0
     b98:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     b9c:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     ba0:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     ba4:	6f6c6672 	svcvs	0x006c6672
     ba8:	756f4377 	strbvc	r4, [pc, #-887]!	; 839 <_start-0x77c7>
     bac:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     bb0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     bb4:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     bb8:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     bbc:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     bc0:	00657669 	rsbeq	r7, r5, r9, ror #12
     bc4:	61537875 	cmpvs	r3, r5, ror r8
     bc8:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     bcc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     bd0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     bd4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     bd8:	70007375 	andvc	r7, r0, r5, ror r3
     bdc:	61654863 	cmnvs	r5, r3, ror #16
     be0:	4a780064 	bmi	1e00d78 <__bss_end+0x1deb228>
     be4:	50747375 	rsbspl	r7, r4, r5, ror r3
     be8:	696b6565 	stmdbvs	fp!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     bec:	7000676e 	andvc	r6, r0, lr, ror #14
     bf0:	73497672 	movtvc	r7, #38514	; 0x9672
     bf4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     bf8:	706d4565 	rsbvc	r4, sp, r5, ror #10
     bfc:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     c00:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c04:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     c08:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     c0c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     c10:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     c14:	754f656d 	strbvc	r6, [pc, #-1389]	; 6af <_start-0x7951>
     c18:	70795474 	rsbsvc	r5, r9, r4, ror r4
     c1c:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     c20:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
     c24:	78006e72 	stmdavc	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
     c28:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c2c:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     c30:	00656c64 	rsbeq	r6, r5, r4, ror #24
     c34:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     c38:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0xfffffa8b
     c3c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     c40:	6f724665 	svcvs	0x00724665
     c44:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     c48:	76727000 	ldrbtvc	r7, [r2], -r0
     c4c:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     c50:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     c54:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     c58:	654c7875 	strbvs	r7, [ip, #-2165]	; 0xfffff78b
     c5c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     c60:	4f637000 	svcmi	0x00637000
     c64:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c68:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
     c6c:	50646165 	rsbpl	r6, r4, r5, ror #2
     c70:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     c74:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     c78:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     c7c:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     c80:	6f697250 	svcvs	0x00697250
     c84:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c88:	6b736154 	blvs	1cd91e0 <__bss_end+0x1cc3690>
     c8c:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xfffff0a9
     c90:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
     c94:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c98:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     c9c:	00687467 	rsbeq	r7, r8, r7, ror #8
     ca0:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     ca4:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     ca8:	61737365 	cmnvs	r3, r5, ror #6
     cac:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     cb0:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     cb4:	7246676e 	subvc	r6, r6, #28835840	; 0x1b80000
     cb8:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     cbc:	76700052 			; <UNDEFINED> instruction: 0x76700052
     cc0:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     cc4:	75516f54 	ldrbvc	r6, [r1, #-3924]	; 0xfffff0ac
     cc8:	00657565 	rsbeq	r7, r5, r5, ror #10
     ccc:	45555178 	ldrbmi	r5, [r5, #-376]	; 0xfffffe88
     cd0:	78004555 	stmdavc	r0, {r0, r2, r4, r6, r8, sl, lr}
     cd4:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
     cd8:	6d695479 	cfstrdvs	mvd5, [r9, #-484]!	; 0xfffffe1c
     cdc:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
     ce0:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0xffffff00
     ce4:	65446575 	strbvs	r6, [r4, #-1397]	; 0xfffffa8b
     ce8:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     cec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     cf0:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     cf4:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
     cf8:	00657565 	rsbeq	r7, r5, r5, ror #10
     cfc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c48 <_start-0x73b8>
     d00:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     d04:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     d08:	72656270 	rsbvc	r6, r5, #112, 4
     d0c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     d10:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     d14:	4f545265 	svcmi	0x00545265
     d18:	72462f53 	subvc	r2, r6, #332	; 0x14c
     d1c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     d20:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     d24:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d28:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
     d2c:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     d30:	51780063 	cmnpl	r8, r3, rrx
     d34:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     d38:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     d3c:	43636972 	cmnmi	r3, #1867776	; 0x1c8000
     d40:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     d44:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     d48:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     d4c:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     d50:	6f724661 	svcvs	0x00724661
     d54:	6575516d 	ldrbvs	r5, [r5, #-365]!	; 0xfffffe93
     d58:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
     d5c:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
     d60:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     d64:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     d68:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     d6c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     d70:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     d74:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     d78:	65526369 	ldrbvs	r6, [r2, #-873]	; 0xfffffc97
     d7c:	00746573 	rsbseq	r6, r4, r3, ror r5
     d80:	706f4378 	rsbvc	r4, pc, r8, ror r3	; <UNPREDICTABLE>
     d84:	736f5079 	cmnvc	pc, #121	; 0x79
     d88:	6f697469 	svcvs	0x00697469
     d8c:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     d90:	6c6e5576 	cfstr64vs	mvdx5, [lr], #-472	; 0xfffffe28
     d94:	516b636f 	cmnpl	fp, pc, ror #6
     d98:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     d9c:	78527800 	ldmdavc	r2, {fp, ip, sp, lr}^
     da0:	6b636f4c 	blvs	18dcad8 <__bss_end+0x18c6f88>
     da4:	54637000 	strbtpl	r7, [r3], #-0
     da8:	006c6961 	rsbeq	r6, ip, r1, ror #18
     dac:	736f5078 	cmnvc	pc, #120	; 0x78
     db0:	6f697469 	svcvs	0x00697469
     db4:	5478006e 	ldrbtpl	r0, [r8], #-110	; 0xffffff92
     db8:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     dbc:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     dc0:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
     dc4:	6e65536f 	cdpvs	3, 6, cr5, cr5, cr15, {3}
     dc8:	51780064 	cmnpl	r8, r4, rrx
     dcc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     dd0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
     dd4:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
     dd8:	00736574 	rsbseq	r6, r3, r4, ror r5
     ddc:	72576370 	subsvc	r6, r7, #112, 6	; 0xc0000001
     de0:	54657469 	strbtpl	r7, [r5], #-1129	; 0xfffffb97
     de4:	7875006f 	ldmdavc	r5!, {r0, r1, r2, r3, r5, r6}^
     de8:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     dec:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
     df0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     df4:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
     df8:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
     dfc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     e00:	42767000 	rsbsmi	r7, r6, #0
     e04:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     e08:	63700072 	cmnvs	r0, #114	; 0x72
     e0c:	6b736154 	blvs	1cd9364 <__bss_end+0x1cc3814>
     e10:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     e14:	61547600 	cmpvs	r4, r0, lsl #12
     e18:	6e456b73 	vmovvs.8	d5[3], r6
     e1c:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
     e20:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     e24:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     e28:	61546b73 	cmpvs	r4, r3, ror fp
     e2c:	6f436b73 	svcvs	0x00436b73
     e30:	6f72746e 	svcvs	0x0072746e
     e34:	6f6c426c 	svcvs	0x006c426c
     e38:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     e3c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     e40:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
     e44:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     e48:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     e4c:	6b736154 	blvs	1cd93a4 <__bss_end+0x1cc3854>
     e50:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
     e54:	52706f54 	rsbspl	r6, r0, #84, 30	; 0x150
     e58:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     e5c:	6f697250 	svcvs	0x00697250
     e60:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e64:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     e68:	506b7361 	rsbpl	r7, fp, r1, ror #6
     e6c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     e70:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     e74:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     e78:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     e7c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     e80:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
     e84:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     e88:	52787000 	rsbspl	r7, r8, #0
     e8c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     e90:	6b736154 	blvs	1cd93e8 <__bss_end+0x1cc3898>
     e94:	73694c73 	cmnvc	r9, #29440	; 0x7300
     e98:	2f007374 	svccs	0x00007374
     e9c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ea0:	2f69702f 	svccs	0x0069702f
     ea4:	70736152 	rsbsvc	r6, r3, r2, asr r1
     ea8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     eac:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     eb0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     eb4:	534f5452 	movtpl	r5, #62546	; 0xf452
     eb8:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     ebc:	4f545265 	svcmi	0x00545265
     ec0:	6f532f53 	svcvs	0x00532f53
     ec4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     ec8:	7361742f 	cmnvc	r1, #788529152	; 0x2f000000
     ecc:	632e736b 			; <UNDEFINED> instruction: 0x632e736b
     ed0:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     ed4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     ed8:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     edc:	54760073 	ldrbtpl	r0, [r6], #-115	; 0xffffff8d
     ee0:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     ee4:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ee8:	754f656d 	strbvc	r6, [pc, #-1389]	; 983 <_start-0x767d>
     eec:	61745374 	cmnvs	r4, r4, ror r3
     ef0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     ef4:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     ef8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     efc:	6f697250 	svcvs	0x00697250
     f00:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f04:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     f08:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     f0c:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     f10:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     f14:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     f18:	616c6544 	cmnvs	ip, r4, asr #10
     f1c:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
     f20:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
     f24:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     f28:	61547600 	cmpvs	r4, r0, lsl #12
     f2c:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xfffff48d
     f30:	70704174 	rsbsvc	r4, r0, r4, ror r1
     f34:	6163696c 	cmnvs	r3, ip, ror #18
     f38:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     f3c:	6b736154 	blvs	1cd9494 <__bss_end+0x1cc3944>
     f40:	00676154 	rsbeq	r6, r7, r4, asr r1
     f44:	694d7875 	stmdbvs	sp, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
     f48:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     f4c:	6b636954 	blvs	18db4a4 <__bss_end+0x18c5954>
     f50:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     f54:	6b736154 	blvs	1cd94ac <__bss_end+0x1cc395c>
     f58:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     f5c:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
     f60:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     f64:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
     f68:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     f6c:	00646572 	rsbeq	r6, r4, r2, ror r5
     f70:	63537875 	cmpvs	r3, #7667712	; 0x750000
     f74:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     f78:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
     f7c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     f80:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     f84:	55787000 	ldrbpl	r7, [r8, #-0]!
     f88:	6f6c626e 	svcvs	0x006c626e
     f8c:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     f90:	00424354 	subeq	r4, r2, r4, asr r3
     f94:	41767270 	cmnmi	r6, r0, ror r2
     f98:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     f9c:	54657461 	strbtpl	r7, [r5], #-1121	; 0xfffffb9f
     fa0:	6e414243 	cdpvs	2, 4, cr4, cr1, cr3, {2}
     fa4:	61745364 	cmnvs	r4, r4, ror #6
     fa8:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     fac:	70737553 	rsbsvc	r7, r3, r3, asr r5
     fb0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     fb4:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     fb8:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     fbc:	54780074 	ldrbtpl	r0, [r8], #-116	; 0xffffff8c
     fc0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     fc4:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fc8:	6f436b63 	svcvs	0x00436b63
     fcc:	46746e75 			; <UNDEFINED> instruction: 0x46746e75
     fd0:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     fd4:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
     fd8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     fdc:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     fe0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     fe4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     fe8:	61547800 	cmpvs	r4, r0, lsl #16
     fec:	73496b73 	movtvc	r6, #39795	; 0x9b73
     ff0:	6b736154 	blvs	1cd9548 <__bss_end+0x1cc39f8>
     ff4:	70737553 	rsbsvc	r7, r3, r3, asr r5
     ff8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     ffc:	72700064 	rsbsvc	r0, r0, #100	; 0x64
    1000:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    1004:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1008:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
    100c:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1010:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    1014:	61547800 	cmpvs	r4, r0, lsl #16
    1018:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    101c:	70704174 	rsbsvc	r4, r0, r4, ror r1
    1020:	6163696c 	cmnvs	r3, ip, ror #18
    1024:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1028:	6b736154 	blvs	1cd9580 <__bss_end+0x1cc3a30>
    102c:	00676154 	rsbeq	r6, r7, r4, asr r1
    1030:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1034:	6157736b 	cmpvs	r7, fp, ror #6
    1038:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    103c:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    1040:	616e696d 	cmnvs	lr, sp, ror #18
    1044:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1048:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
    104c:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    1050:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    1054:	54760064 	ldrbtpl	r0, [r6], #-100	; 0xffffff9c
    1058:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    105c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
    1060:	6c41646e 	cfstrdvs	mvd6, [r1], {110}	; 0x6e
    1064:	5478006c 	ldrbtpl	r0, [r8], #-108	; 0xffffff94
    1068:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    106c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1070:	73740065 	cmnvc	r4, #101	; 0x65
    1074:	4243546b 	submi	r5, r3, #1795162112	; 0x6b000000
    1078:	54787000 	ldrbtpl	r7, [r8], #-0
    107c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    1080:	61576f54 	cmpvs	r7, r4, asr pc
    1084:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
    1088:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    108c:	6544736b 	strbvs	r7, [r4, #-875]	; 0xfffffc95
    1090:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    1094:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
    1098:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    109c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    10a0:	4f787000 	svcmi	0x00787000
    10a4:	66726576 			; <UNDEFINED> instruction: 0x66726576
    10a8:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xfffff094
    10ac:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    10b0:	61546465 	cmpvs	r4, r5, ror #8
    10b4:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    10b8:	76007473 			; <UNDEFINED> instruction: 0x76007473
    10bc:	6b736154 	blvs	1cd9614 <__bss_end+0x1cc3ac4>
    10c0:	63616c50 	cmnvs	r1, #80, 24	; 0x5000
    10c4:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xfffff09b
    10c8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    10cc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    10d0:	61547600 	cmpvs	r4, r0, lsl #12
    10d4:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
    10d8:	0079616c 	rsbseq	r6, r9, ip, ror #2
    10dc:	61547870 	cmpvs	r4, r0, ror r8
    10e0:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    10e4:	6b736154 	blvs	1cd963c <__bss_end+0x1cc3aec>
    10e8:	6f6d6552 	svcvs	0x006d6552
    10ec:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    10f0:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
    10f4:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    10f8:	00747369 	rsbseq	r7, r4, r9, ror #6
    10fc:	6f685378 	svcvs	0x00685378
    1100:	44646c75 	strbtmi	r6, [r4], #-3189	; 0xfffff38b
    1104:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1108:	76727000 	ldrbtvc	r7, [r2], -r0
    110c:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    1110:	6b736154 	blvs	1cd9668 <__bss_end+0x1cc3b18>
    1114:	54647000 	strbtpl	r7, [r4], #-0
    1118:	5f4b5341 	svcpl	0x004b5341
    111c:	4b4f4f48 	blmi	13d4e44 <__bss_end+0x13bf2f4>
    1120:	444f435f 	strbmi	r4, [pc], #-863	; 1128 <_start-0x6ed8>
    1124:	4c780045 	ldclmi	0, cr0, [r8], #-276	; 0xfffffeec
    1128:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    112c:	706d4573 	rsbvc	r4, sp, r3, ror r5
    1130:	70007974 	andvc	r7, r0, r4, ror r9
    1134:	6f6f4878 	svcvs	0x006f4878
    1138:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
    113c:	6f697463 	svcvs	0x00697463
    1140:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
    1144:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
    1148:	70004243 	andvc	r4, r0, r3, asr #4
    114c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1150:	646f436b 	strbtvs	r4, [pc], #-875	; 1158 <_start-0x6ea8>
    1154:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
    1158:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    115c:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1160:	6f436b63 	svcvs	0x00436b63
    1164:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1168:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
    116c:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    1170:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
    1174:	6b636f6c 	blvs	18dcf2c <__bss_end+0x18c73dc>
    1178:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    117c:	53737500 	cmnpl	r3, #0, 10
    1180:	6b636174 	blvs	18d9758 <__bss_end+0x18c3c08>
    1184:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
    1188:	54780068 	ldrbtpl	r0, [r8], #-104	; 0xffffff98
    118c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    1190:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
    1194:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    1198:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    119c:	70007974 	andvc	r7, r0, r4, ror r9
    11a0:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
    11a4:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    11a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    11ac:	0074754f 	rsbseq	r7, r4, pc, asr #10
    11b0:	61547875 	cmpvs	r4, r5, ror r8
    11b4:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
    11b8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    11bc:	61547600 	cmpvs	r4, r0, lsl #12
    11c0:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
    11c4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    11c8:	65537974 	ldrbvs	r7, [r3, #-2420]	; 0xfffff68c
    11cc:	4d780074 	ldclmi	0, cr0, [r8, #-464]!	; 0xfffffe30
    11d0:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    11d4:	67655279 			; <UNDEFINED> instruction: 0x67655279
    11d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    11dc:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    11e0:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
    11e4:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    11e8:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    11ec:	70006b63 	andvc	r6, r0, r3, ror #22
    11f0:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    11f4:	61697469 	cmnvs	r9, r9, ror #8
    11f8:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    11fc:	56424354 			; <UNDEFINED> instruction: 0x56424354
    1200:	61697261 	cmnvs	r9, r1, ror #4
    1204:	73656c62 	cmnvc	r5, #25088	; 0x6200
    1208:	454d7800 	strbmi	r7, [sp, #-2048]	; 0xfffff800
    120c:	59524f4d 	ldmdbpl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, lr}^
    1210:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    1214:	004e4f49 	subeq	r4, lr, r9, asr #30
    1218:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    121c:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    1220:	00657465 	rsbeq	r7, r5, r5, ror #8
    1224:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1228:	6c61436b 	stclvs	3, cr4, [r1], #-428	; 0xfffffe54
    122c:	7070416c 	rsbsvc	r4, r0, ip, ror #2
    1230:	6163696c 	cmnvs	r3, ip, ror #18
    1234:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1238:	6b736154 	blvs	1cd9790 <__bss_end+0x1cc3c40>
    123c:	6b6f6f48 	blvs	1bdcf64 <__bss_end+0x1bc7414>
    1240:	61547800 	cmpvs	r4, r0, lsl #16
    1244:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    1248:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    124c:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
    1250:	00657461 	rsbeq	r7, r5, r1, ror #8
    1254:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1258:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
    125c:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
    1260:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    1264:	78007478 	stmdavc	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
    1268:	4f6d754e 	svcmi	0x006d754e
    126c:	65764f66 	ldrbvs	r4, [r6, #-3942]!	; 0xfffff09a
    1270:	6f6c6672 	svcvs	0x006c6672
    1274:	70007377 	andvc	r7, r0, r7, ror r3
    1278:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    127c:	6761546b 	strbvs	r5, [r1, -fp, ror #8]!
    1280:	53787000 	cmnpl	r8, #0
    1284:	6b636174 	blvs	18d985c <__bss_end+0x18c3d0c>
    1288:	61547800 	cmpvs	r4, r0, lsl #16
    128c:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    1290:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    1294:	006c6c41 	rsbeq	r6, ip, r1, asr #24
    1298:	65447870 	strbvs	r7, [r4, #-2160]	; 0xfffff790
    129c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    12a0:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    12a4:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    12a8:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    12ac:	55706f54 	ldrbpl	r6, [r0, #-3924]!	; 0xfffff0ac
    12b0:	50646573 	rsbpl	r6, r4, r3, ror r5
    12b4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    12b8:	00797469 	rsbseq	r7, r9, r9, ror #8
    12bc:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    12c0:	6568436b 	strbvs	r4, [r8, #-875]!	; 0xfffffc95
    12c4:	6f466b63 	svcvs	0x00466b63
    12c8:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    12cc:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
    12d0:	54787000 	ldrbtpl	r7, [r8], #-0
    12d4:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    12d8:	7375536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    12dc:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    12e0:	50787000 	rsbspl	r7, r8, r0
    12e4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    12e8:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
    12ec:	54656b61 	strbtpl	r6, [r5], #-2913	; 0xfffff49f
    12f0:	00656d69 	rsbeq	r6, r5, r9, ror #26
    12f4:	61547870 	cmpvs	r4, r0, ror r8
    12f8:	6f546b73 	svcvs	0x00546b73
    12fc:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    1300:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    1304:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
    1308:	49687467 	stmdbmi	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
    130c:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
    1310:	78007365 	stmdavc	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1314:	6b736154 	blvs	1cd986c <__bss_end+0x1cc3d1c>
    1318:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    131c:	7246656d 	subvc	r6, r6, #457179136	; 0x1b400000
    1320:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    1324:	54760052 	ldrbtpl	r0, [r6], #-82	; 0xffffffae
    1328:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	; 0xfffffe7c
    132c:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0xfffffc97
    1330:	65695964 	strbvs	r5, [r9, #-2404]!	; 0xfffff69c
    1334:	7000646c 	andvc	r6, r0, ip, ror #8
    1338:	74537875 	ldrbvc	r7, [r3], #-2165	; 0xfffff78b
    133c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    1340:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1344:	54760072 	ldrbtpl	r0, [r6], #-114	; 0xffffff8e
    1348:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
    134c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1350:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
    1354:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    1358:	72700072 	rsbsvc	r0, r0, #114	; 0x72
    135c:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
    1360:	61546b63 	cmpvs	r4, r3, ror #22
    1364:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    1368:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    136c:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
    1370:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    1374:	6f697461 	svcvs	0x00697461
    1378:	7670006e 	ldrbtvc	r0, [r0], -lr, rrx
    137c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    1380:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1384:	00737365 	rsbseq	r7, r3, r5, ror #6
    1388:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    138c:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    1390:	6e557961 	vnmlavs.f16	s15, s10, s3	; <UNPREDICTABLE>
    1394:	006c6974 	rsbeq	r6, ip, r4, ror r9
    1398:	44767270 	ldrbtmi	r7, [r6], #-624	; 0xfffffd90
    139c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    13a0:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
    13a4:	61547600 	cmpvs	r4, r0, lsl #12
    13a8:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    13ac:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    13b0:	41780064 	cmnmi	r8, r4, rrx
    13b4:	6165726c 	cmnvs	r5, ip, ror #4
    13b8:	69597964 	ldmdbvs	r9, {r2, r5, r6, r8, fp, ip, sp, lr}^
    13bc:	65646c65 	strbvs	r6, [r4, #-3173]!	; 0xfffff39b
    13c0:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
    13c4:	61726150 	cmnvs	r2, r0, asr r1
    13c8:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
    13cc:	52780072 	rsbspl	r0, r8, #114	; 0x72
    13d0:	6f696765 	svcvs	0x00696765
    13d4:	7000736e 	andvc	r7, r0, lr, ror #6
    13d8:	64417672 	strbvs	r7, [r1], #-1650	; 0xfffff98e
    13dc:	72754364 	rsbsvc	r4, r5, #100, 6	; 0x90000001
    13e0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    13e4:	6b736154 	blvs	1cd993c <__bss_end+0x1cc3dec>
    13e8:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
    13ec:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    13f0:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
    13f4:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    13f8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    13fc:	4e746e65 	cdpmi	14, 7, cr6, cr4, cr5, {3}
    1400:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    1404:	54664f72 	strbtpl	r4, [r6], #-3954	; 0xfffff08e
    1408:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    140c:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1410:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    1414:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
    1418:	00746e65 	rsbseq	r6, r4, r5, ror #28
    141c:	43547870 	cmpmi	r4, #112, 16	; 0x700000
    1420:	54760042 	ldrbtpl	r0, [r6], #-66	; 0xffffffbe
    1424:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1428:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    142c:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    1430:	61657243 	cmnvs	r5, r3, asr #4
    1434:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    1438:	006b7361 	rsbeq	r7, fp, r1, ror #6
    143c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1440:	31676e69 	cmncc	r7, r9, ror #28
    1444:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    1448:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    144c:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    1450:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1454:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    1458:	42006369 	andmi	r6, r0, #-1543503871	; 0xa4000001
    145c:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    1460:	495f3533 	ldmdbmi	pc, {r0, r1, r4, r5, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1464:	5f43544e 	svcpl	0x0043544e
    1468:	53474552 	movtpl	r4, #30034	; 0x7552
    146c:	51494600 	cmppl	r9, r0, lsl #12
    1470:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1474:	71726900 	cmnvc	r2, r0, lsl #18
    1478:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    147c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1480:	71726900 	cmnvc	r2, r0, lsl #18
    1484:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1488:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
    148c:	6b73614d 	blvs	1cd99c8 <__bss_end+0x1cc3e78>
    1490:	74536465 	ldrbvc	r6, [r3], #-1125	; 0xfffffb9b
    1494:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1498:	616e6500 	cmnvs	lr, r0, lsl #10
    149c:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    14a0:	6f682f00 	svcvs	0x00682f00
    14a4:	702f656d 	eorvc	r6, pc, sp, ror #10
    14a8:	61522f69 	cmpvs	r2, r9, ror #30
    14ac:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    14b0:	50797272 	rsbspl	r7, r9, r2, ror r2
    14b4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    14b8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    14bc:	442f534f 	strtmi	r5, [pc], #-847	; 14c4 <_start-0x6b3c>
    14c0:	2f6f6d65 	svccs	0x006f6d65
    14c4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    14c8:	2f737265 	svccs	0x00737265
    14cc:	2e717269 	cdpcs	2, 7, cr7, cr1, cr9, {3}
    14d0:	61680063 	cmnvs	r8, r3, rrx
    14d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    14d8:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    14dc:	616d0065 	cmnvs	sp, r5, rrx
    14e0:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    14e4:	69447172 	stmdbvs	r4, {r1, r4, r5, r6, r8, ip, sp, lr}^
    14e8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    14ec:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
    14f0:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    14f4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    14f8:	71726900 	cmnvc	r2, r0, lsl #18
    14fc:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1500:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1504:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1508:	0032656c 	eorseq	r6, r2, ip, ror #10
    150c:	61736944 	cmnvs	r3, r4, asr #18
    1510:	31656c62 	cmncc	r5, r2, ror #24
    1514:	73694400 	cmnvc	r9, #0, 8
    1518:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    151c:	5f670032 	svcpl	0x00670032
    1520:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    1524:	6154726f 	cmpvs	r4, pc, ror #4
    1528:	00656c62 	rsbeq	r6, r5, r2, ror #24
    152c:	45717269 	ldrbmi	r7, [r1, #-617]!	; 0xfffffd97
    1530:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1534:	4e460065 	cdpmi	0, 4, cr0, cr6, cr5, {3}
    1538:	544e495f 	strbpl	r4, [lr], #-2399	; 0xfffff6a1
    153c:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    1540:	485f5450 	ldmdami	pc, {r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1544:	4c444e41 	mcrrmi	14, 4, r4, r4, cr1
    1548:	49005245 	stmdbmi	r0, {r0, r2, r6, r9, ip, lr}
    154c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1550:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    1554:	4345565f 	movtmi	r5, #22111	; 0x565f
    1558:	00524f54 	subseq	r4, r2, r4, asr pc
    155c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1560:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1564:	42515249 	subsmi	r5, r1, #-1879048188	; 0x90000004
    1568:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    156c:	71726900 	cmnvc	r2, r0, lsl #18
    1570:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1574:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1578:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    157c:	6142656c 	cmpvs	r2, ip, ror #10
    1580:	00636973 	rsbeq	r6, r3, r3, ror r9
    1584:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1588:	0031656c 	eorseq	r6, r1, ip, ror #10
    158c:	566e6970 			; <UNDEFINED> instruction: 0x566e6970
    1590:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1594:	54455350 	strbpl	r5, [r5], #-848	; 0xfffffcb0
    1598:	4d434200 	sfmmi	f4, 2, [r3, #-0]
    159c:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0xfffff7ce
    15a0:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    15a4:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xfffff0b1
    15a8:	69005347 	stmdbvs	r0, {r0, r1, r2, r6, r8, r9, ip, lr}
    15ac:	006d6574 	rsbeq	r6, sp, r4, ror r5
    15b0:	4e6e6970 			; <UNDEFINED> instruction: 0x4e6e6970
    15b4:	52006d75 	andpl	r6, r0, #7488	; 0x1d40
    15b8:	47646165 	strbmi	r6, [r4, -r5, ror #2]!
    15bc:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    15c0:	47746553 			; <UNDEFINED> instruction: 0x47746553
    15c4:	446f6970 	strbtmi	r6, [pc], #-2416	; 15cc <_start-0x6a34>
    15c8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    15cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    15d0:	43504700 	cmpmi	r0, #0, 14
    15d4:	4700524c 	strmi	r5, [r0, -ip, asr #4]
    15d8:	4e454850 	mcrmi	8, 2, r4, cr5, cr0, {2}
    15dc:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    15e0:	5f544345 	svcpl	0x00544345
    15e4:	49534952 	ldmdbmi	r3, {r1, r4, r6, r8, fp, lr}^
    15e8:	415f474e 	cmpmi	pc, lr, asr #14
    15ec:	434e5953 	movtmi	r5, #59731	; 0xe953
    15f0:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    15f4:	5f544345 	svcpl	0x00544345
    15f8:	4c4c4146 	stfmie	f4, [ip], {70}	; 0x46
    15fc:	5f474e49 	svcpl	0x00474e49
    1600:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    1604:	6c430043 	mcrrvs	0, 4, r0, r3, cr3
    1608:	47726165 	ldrbmi	r6, [r2, -r5, ror #2]!
    160c:	496f6970 	stmdbmi	pc!, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    1610:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1614:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    1618:	41504700 	cmpmi	r0, r0, lsl #14
    161c:	004e4546 	subeq	r4, lr, r6, asr #10
    1620:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1624:	7047656c 	subvc	r6, r7, ip, ror #10
    1628:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    162c:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1630:	50504700 	subspl	r4, r0, r0, lsl #14
    1634:	2f004455 	svccs	0x00004455
    1638:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    163c:	2f69702f 	svccs	0x0069702f
    1640:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1644:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1648:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    164c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1650:	534f5452 	movtpl	r5, #62546	; 0xf452
    1654:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1658:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    165c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1660:	70672f73 	rsbvc	r2, r7, r3, ror pc
    1664:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1668:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    166c:	5f544345 	svcpl	0x00544345
    1670:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    1674:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    1678:	47005645 	strmi	r5, [r0, -r5, asr #12]
    167c:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    1680:	6553004e 	ldrbvs	r0, [r3, #-78]	; 0xffffffb2
    1684:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    1688:	6e75466f 	cdpvs	6, 7, cr4, cr5, cr15, {3}
    168c:	6f697463 	svcvs	0x00697463
    1690:	5047006e 	subpl	r0, r7, lr, rrx
    1694:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 169c <_start-0x6964>
    1698:	47005249 	strmi	r5, [r0, -r9, asr #4]
    169c:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
    16a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    16a4:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    16a8:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    16ac:	5f544345 	svcpl	0x00544345
    16b0:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    16b4:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    16b8:	5f544345 	svcpl	0x00544345
    16bc:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    16c0:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    16c4:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    16c8:	44555050 	ldrbmi	r5, [r5], #-80	; 0xffffffb0
    16cc:	004b4c43 	subeq	r4, fp, r3, asr #24
    16d0:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    16d4:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    16d8:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    16dc:	45440047 	strbmi	r0, [r4, #-71]	; 0xffffffb9
    16e0:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    16e4:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
    16e8:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
    16ec:	6d754e63 	ldclvs	14, cr4, [r5, #-396]!	; 0xfffffe74
    16f0:	52504700 	subspl	r4, r0, #0, 14
    16f4:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    16f8:	53444550 	movtpl	r4, #17744	; 0x4550
    16fc:	73694400 	cmnvc	r9, #0, 8
    1700:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1704:	6f697047 	svcvs	0x00697047
    1708:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    170c:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
    1710:	00657079 	rsbeq	r7, r5, r9, ror r0
    1714:	53465047 	movtpl	r5, #24647	; 0x6047
    1718:	52004c45 	andpl	r4, r0, #17664	; 0x4500
    171c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1720:	5f646576 	svcpl	0x00646576
    1724:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    1728:	76726573 			; <UNDEFINED> instruction: 0x76726573
    172c:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
    1730:	73655200 	cmnvc	r5, #0, 4
    1734:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1738:	00335f64 	eorseq	r5, r3, r4, ror #30
    173c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1740:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1744:	5200345f 	andpl	r3, r0, #1593835520	; 0x5f000000
    1748:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    174c:	5f646576 	svcpl	0x00646576
    1750:	65520035 	ldrbvs	r0, [r2, #-53]	; 0xffffffcb
    1754:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1758:	365f6465 	ldrbcc	r6, [pc], -r5, ror #8
    175c:	73655200 	cmnvc	r5, #0, 4
    1760:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1764:	00375f64 	eorseq	r5, r7, r4, ror #30
    1768:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    176c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1770:	5200385f 	andpl	r3, r0, #6225920	; 0x5f0000
    1774:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1778:	5f646576 	svcpl	0x00646576
    177c:	45440039 	strbmi	r0, [r4, #-57]	; 0xffffffc7
    1780:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1784:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    1788:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    178c:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1790:	6f697047 	svcvs	0x00697047
    1794:	73655200 	cmnvc	r5, #0, 4
    1798:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    179c:	00415f64 	subeq	r5, r1, r4, ror #30
    17a0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    17a4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    17a8:	4700425f 	smlsdmi	r0, pc, r2, r4	; <UNPREDICTABLE>
    17ac:	5f4f4950 	svcpl	0x004f4950
    17b0:	0054554f 	subseq	r5, r4, pc, asr #10
    17b4:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
    17b8:	6f697665 	svcvs	0x00697665
    17bc:	6c427375 	mcrrvs	3, 7, r7, r2, cr5
    17c0:	006b636f 	rsbeq	r6, fp, pc, ror #6
    17c4:	746f5478 	strbtvc	r5, [pc], #-1144	; 17cc <_start-0x6834>
    17c8:	65486c61 	strbvs	r6, [r8, #-3169]	; 0xfffff39f
    17cc:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    17d0:	7000657a 	andvc	r6, r0, sl, ror r5
    17d4:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    17d8:	4278006b 	rsbsmi	r0, r8, #107	; 0x6b
    17dc:	6b636f6c 	blvs	18dd594 <__bss_end+0x18c7a44>
    17e0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    17e4:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    17e8:	46747865 	ldrbtmi	r7, [r4], -r5, ror #16
    17ec:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    17f0:	6b636f6c 	blvs	18dd5a8 <__bss_end+0x18c7a58>
    17f4:	42787000 	rsbsmi	r7, r8, #0
    17f8:	6b636f6c 	blvs	18dd5b0 <__bss_end+0x18c7a60>
    17fc:	54527800 	ldrbpl	r7, [r2], #-2048	; 0xfffff800
    1800:	485f534f 	ldmdami	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    1804:	00504145 	subseq	r4, r0, r5, asr #2
    1808:	61745378 	cmnvs	r4, r8, ror r3
    180c:	70007472 	andvc	r7, r0, r2, ror r4
    1810:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    1814:	6c614d74 	stclvs	13, cr4, [r1], #-464	; 0xfffffe30
    1818:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    181c:	48767270 	ldmdami	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    1820:	49706165 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sp, lr}^
    1824:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1828:	6e615778 	mcrvs	7, 3, r5, cr1, cr8, {3}
    182c:	53646574 	cmnpl	r4, #116, 10	; 0x1d000000
    1830:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1834:	6d754464 	cfldrdvs	mvd4, [r5, #-400]!	; 0xfffffe70
    1838:	7000796d 	andvc	r7, r0, sp, ror #18
    183c:	65486375 	strbvs	r6, [r8, #-885]	; 0xfffffc8b
    1840:	6e457061 	cdpvs	0, 4, cr7, cr5, cr1, {3}
    1844:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
    1848:	2f656d6f 	svccs	0x00656d6f
    184c:	522f6970 	eorpl	r6, pc, #112, 18	; 0x1c0000
    1850:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1854:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1858:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    185c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1860:	2f534f54 	svccs	0x00534f54
    1864:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
    1868:	4f545265 	svcmi	0x00545265
    186c:	6f532f53 	svcvs	0x00532f53
    1870:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1874:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    1878:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    187c:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xfffff09b
    1880:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    1884:	65682f67 	strbvs	r2, [r8, #-3943]!	; 0xfffff099
    1888:	345f7061 	ldrbcc	r7, [pc], #-97	; 1890 <_start-0x6770>
    188c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    1890:	61654863 	cmnvs	r5, r3, ror #16
    1894:	78700070 	ldmdavc	r0!, {r4, r5, r6}^
    1898:	73726946 	cmnvc	r2, #1146880	; 0x118000
    189c:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    18a0:	6f6c4265 	svcvs	0x006c4265
    18a4:	70006b63 	andvc	r6, r0, r3, ror #22
    18a8:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    18ac:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    18b0:	6e694c6b 	cdpvs	12, 6, cr4, cr9, cr11, {3}
    18b4:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
    18b8:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    18bc:	41006e72 	tstmi	r0, r2, ror lr
    18c0:	4f4c425f 	svcmi	0x004c425f
    18c4:	4c5f4b43 	mrrcmi	11, 4, r4, pc, cr3	; <UNPREDICTABLE>
    18c8:	004b4e49 	subeq	r4, fp, r9, asr #28
    18cc:	726f5078 	rsbvc	r5, pc, #120	; 0x78
    18d0:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    18d4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    18d8:	70616548 	rsbvc	r6, r1, r8, asr #10
    18dc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    18e0:	76727000 	ldrbtvc	r7, [r2], -r0
    18e4:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
    18e8:	6c427472 	cfstrdvs	mvd7, [r2], {114}	; 0x72
    18ec:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    18f0:	466f746e 	strbtmi	r7, [pc], -lr, ror #8
    18f4:	4c656572 	cfstr64mi	mvdx6, [r5], #-456	; 0xfffffe38
    18f8:	00747369 	rsbseq	r7, r4, r9, ror #6
    18fc:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    1900:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1904:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1908:	42657369 	rsbmi	r7, r5, #-1543503871	; 0xa4000001
    190c:	6b636f6c 	blvs	18dd6c4 <__bss_end+0x18c7b74>
    1910:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
    1914:	54537061 	ldrbpl	r7, [r3], #-97	; 0xffffff9f
    1918:	54435552 	strbpl	r5, [r3], #-1362	; 0xfffffaae
    191c:	5a49535f 	bpl	12566a0 <__bss_end+0x1240b50>
    1920:	50760045 	rsbspl	r0, r6, r5, asr #32
    1924:	4674726f 	ldrbtmi	r7, [r4], -pc, ror #4
    1928:	00656572 	rsbeq	r6, r5, r2, ror r5
    192c:	65724678 	ldrbvs	r4, [r2, #-1656]!	; 0xfffff988
    1930:	74794265 	ldrbtvc	r4, [r9], #-613	; 0xfffffd9b
    1934:	65527365 	ldrbvs	r7, [r2, #-869]	; 0xfffffc9b
    1938:	6e69616d 	powvsez	f6, f1, #5.0
    193c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1940:	6f6c6c61 	svcvs	0x006c6c61
    1944:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    1948:	42780064 	rsbsmi	r0, r8, #100	; 0x64
    194c:	6b636f6c 	blvs	18dd704 <__bss_end+0x18c7bb4>
    1950:	6b6e694c 	blvs	1b9be88 <__bss_end+0x1b86338>
    1954:	45787000 	ldrbmi	r7, [r8, #-0]!
    1958:	7000646e 	andvc	r6, r0, lr, ror #8
    195c:	6f6c4278 	svcvs	0x006c4278
    1960:	6f546b63 	svcvs	0x00546b63
    1964:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
    1968:	78007472 	stmdavc	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
    196c:	70616548 	rsbvc	r6, r1, r8, asr #10
    1970:	73617400 	cmnvc	r1, #0, 8
    1974:	6d00326b 	sfmvs	f3, 4, [r0, #-428]	; 0xfffffe54
    1978:	006e6961 	rsbeq	r6, lr, r1, ror #18
    197c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18c8 <_start-0x6738>
    1980:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1984:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1988:	72656270 	rsbvc	r6, r5, #112, 4
    198c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1990:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1994:	4f545265 	svcmi	0x00545265
    1998:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    199c:	6d2f6f6d 	stcvs	15, cr6, [pc, #-436]!	; 17f0 <_start-0x6810>
    19a0:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    19a4:	61740063 	cmnvs	r4, r3, rrx
    19a8:	00316b73 	eorseq	r6, r1, r3, ror fp
    19ac:	6e5f435f 	mrcvs	3, 2, r4, cr15, cr15, {2}
    19b0:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    19b4:	6c5f6369 	mrrcvs	3, 6, r6, pc, cr9	; <UNPREDICTABLE>
    19b8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    19bc:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    19c0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    19c4:	735f7963 	cmpvc	pc, #1622016	; 0x18c000
    19c8:	6f626d79 	svcvs	0x00626d79
    19cc:	7463006c 	strbtvc	r0, [r3], #-108	; 0xffffff94
    19d0:	5f657079 	svcpl	0x00657079
    19d4:	00727470 	rsbseq	r7, r2, r0, ror r4
    19d8:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    19dc:	64007970 	strvs	r7, [r0], #-2416	; 0xfffff690
    19e0:	00307473 	eorseq	r7, r0, r3, ror r4
    19e4:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    19e8:	5f64656e 	svcpl	0x0064656e
    19ec:	00747364 	rsbseq	r7, r4, r4, ror #6
    19f0:	5f746e69 	svcpl	0x00746e69
    19f4:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    19f8:	79625f70 	stmdbvc	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19fc:	6170735f 	cmnvs	r0, pc, asr r3
    1a00:	6c006563 	cfstr32vs	mvfx6, [r0], {99}	; 0x63
    1a04:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    1a08:	6b6a6300 	blvs	1a9a610 <__bss_end+0x1a84ac0>
    1a0c:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    1a10:	636c0067 	cmnvs	ip, #103	; 0x67
    1a14:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    1a18:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    1a1c:	5f00545f 	svcpl	0x0000545f
    1a20:	69745f43 	ldmdbvs	r4!, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1a24:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    1a28:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    1a2c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1a30:	75635f74 	strbvc	r5, [r3, #-3956]!	; 0xfffff08c
    1a34:	735f7272 	cmpvc	pc, #536870919	; 0x20000007
    1a38:	6f626d79 	svcvs	0x00626d79
    1a3c:	636c006c 	cmnvs	ip, #108	; 0x6c
    1a40:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1a44:	00545f65 	subseq	r5, r4, r5, ror #30
    1a48:	5f746c61 	svcpl	0x00746c61
    1a4c:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    1a50:	5f007374 	svcpl	0x00007374
    1a54:	74635f43 	strbtvc	r5, [r3], #-3907	; 0xfffff0bd
    1a58:	5f657079 	svcpl	0x00657079
    1a5c:	61636f6c 	cmnvs	r3, ip, ror #30
    1a60:	6100656c 	tstvs	r0, ip, ror #10
    1a64:	6d705f6d 	ldclvs	15, cr5, [r0, #-436]!	; 0xfffffe4c
    1a68:	61726500 	cmnvs	r2, r0, lsl #10
    1a6c:	745f645f 	ldrbvc	r6, [pc], #-1119	; 1a74 <_start-0x658c>
    1a70:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    1a74:	2f2e2e00 	svccs	0x002e2e00
    1a78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1a7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a80:	2f2e2e2f 	svccs	0x002e2e2f
    1a84:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1a88:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1a8c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1a90:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 1910 <_start-0x66f0>
    1a94:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1a98:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    1a9c:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; 18dc <_start-0x6724>
    1aa0:	70636d65 	rsbvc	r6, r3, r5, ror #26
    1aa4:	74732d79 	ldrbtvc	r2, [r3], #-3449	; 0xfffff287
    1aa8:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    1aac:	736f6e00 	cmnvc	pc, #0, 28
    1ab0:	6c007274 	sfmvs	f7, 4, [r0], {116}	; 0x74
    1ab4:	6f6d5f63 	svcvs	0x006d5f63
    1ab8:	6174656e 	cmnvs	r4, lr, ror #10
    1abc:	545f7972 	ldrbpl	r7, [pc], #-2418	; 1ac4 <_start-0x653c>
    1ac0:	73656d00 	cmnvc	r5, #0, 26
    1ac4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    1ac8:	646f635f 	strbtvs	r6, [pc], #-863	; 1ad0 <_start-0x6530>
    1acc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1ad0:	74626d00 	strbtvc	r6, [r2], #-3328	; 0xfffff300
    1ad4:	0063776f 	rsbeq	r7, r3, pc, ror #14
    1ad8:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 1964 <_start-0x669c>
    1adc:	61737365 	cmnvs	r3, r5, ror #6
    1ae0:	5f736567 	svcpl	0x00736567
    1ae4:	61636f6c 	cmnvs	r3, ip, ror #30
    1ae8:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    1aec:	705f746e 	subsvc	r7, pc, lr, ror #8
    1af0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1af4:	6f705f6e 	svcvs	0x00705f6e
    1af8:	6d006e73 	stcvs	14, cr6, [r0, #-460]	; 0xfffffe34
    1afc:	675f6e6f 	ldrbvs	r6, [pc, -pc, ror #28]
    1b00:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1b04:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1b08:	6d665f58 	stclvs	15, cr5, [r6, #-352]!	; 0xfffffea0
    1b0c:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1b10:	5f705f74 	svcpl	0x00705f74
    1b14:	705f7363 	subsvc	r7, pc, r3, ror #6
    1b18:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    1b1c:	00736564 	rsbseq	r6, r3, r4, ror #10
    1b20:	5f6e6f6d 	svcpl	0x006e6f6d
    1b24:	69636564 	stmdbvs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    1b28:	5f6c616d 	svcpl	0x006c616d
    1b2c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    1b30:	5f630074 	svcpl	0x00630074
    1b34:	00746d66 	rsbseq	r6, r4, r6, ror #26
    1b38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1b3c:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    1b40:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
    1b44:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    1b48:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b4c:	6d006e67 	stcvs	14, cr6, [r0, #-412]	; 0xfffffe64
    1b50:	75635f62 	strbvc	r5, [r3, #-3938]!	; 0xfffff09e
    1b54:	616d5f72 	smcvs	54770	; 0xd5f2
    1b58:	63770078 	cmnvs	r7, #120	; 0x78
    1b5c:	5f726168 	svcpl	0x00726168
    1b60:	6f700074 	svcvs	0x00700074
    1b64:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1b68:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    1b6c:	006e6769 	rsbeq	r6, lr, r9, ror #14
    1b70:	70797463 	rsbsvc	r7, r9, r3, ror #8
    1b74:	6f635f65 	svcvs	0x00635f65
    1b78:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    1b7c:	6f6e0074 	svcvs	0x006e0074
    1b80:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    1b84:	665f7800 	ldrbvs	r7, [pc], -r0, lsl #16
    1b88:	6900746d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
    1b8c:	705f746e 	subsvc	r7, pc, lr, ror #8
    1b90:	7065735f 	rsbvc	r7, r5, pc, asr r3
    1b94:	5f79625f 	svcpl	0x0079625f
    1b98:	63617073 	cmnvs	r1, #115	; 0x73
    1b9c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1ba0:	5f6e5f74 	svcpl	0x006e5f74
    1ba4:	705f7363 	subsvc	r7, pc, r3, ror #6
    1ba8:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    1bac:	00736564 	rsbseq	r6, r3, r4, ror #10
    1bb0:	6f5f646d 	svcvs	0x005f646d
    1bb4:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    1bb8:	73657900 	cmnvc	r5, #0, 18
    1bbc:	00727473 	rsbseq	r7, r2, r3, ror r4
    1bc0:	65736579 	ldrbvs	r6, [r3, #-1401]!	; 0xfffffa87
    1bc4:	00727078 	rsbseq	r7, r2, r8, ror r0
    1bc8:	5f617265 	svcpl	0x00617265
    1bcc:	6d665f64 	stclvs	15, cr5, [r6, #-400]!	; 0xfffffe70
    1bd0:	636c0074 	cmnvs	ip, #116	; 0x74
    1bd4:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    1bd8:	545f6570 	ldrbpl	r6, [pc], #-1392	; 1be0 <_start-0x6420>
    1bdc:	61726500 	cmnvs	r2, r0, lsl #10
    1be0:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    1be4:	7700746d 	strvc	r7, [r0, -sp, ror #8]
    1be8:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 1a64 <_start-0x659c>
    1bec:	622f0062 	eorvs	r0, pc, #98	; 0x62
    1bf0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1bf4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1bf8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    1bfc:	7667476b 	strbtvc	r4, [r7], -fp, ror #14
    1c00:	6e2f4577 	mcrvs	5, 1, r4, cr15, cr7, {3}
    1c04:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c08:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    1c0c:	2f302e33 	svccs	0x00302e33
    1c10:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1c14:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    1c18:	6f6e2d6d 	svcvs	0x006e2d6d
    1c1c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1c20:	2f696261 	svccs	0x00696261
    1c24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1c28:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1a8c <_start-0x6574>
    1c2c:	2f636269 	svccs	0x00636269
    1c30:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1c34:	2f656e69 	svccs	0x00656e69
    1c38:	006d7261 	rsbeq	r7, sp, r1, ror #4
    1c3c:	5f6e6f6d 	svcpl	0x006e6f6d
    1c40:	756f6874 	strbvc	r6, [pc, #-2164]!	; 13d4 <_start-0x6c2c>
    1c44:	646e6173 	strbtvs	r6, [lr], #-371	; 0xfffffe8d
    1c48:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    1c4c:	6d610070 	stclvs	0, cr0, [r1, #-448]!	; 0xfffffe40
    1c50:	665f6d70 			; <UNDEFINED> instruction: 0x665f6d70
    1c54:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    1c58:	656d5f63 	strbvs	r5, [sp, #-3939]!	; 0xfffff09d
    1c5c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    1c60:	545f7365 	ldrbpl	r7, [pc], #-869	; 1c68 <_start-0x6398>
    1c64:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    1c68:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    1c6c:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
    1c70:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    1c74:	30393130 	eorscc	r3, r9, r0, lsr r1
    1c78:	20333037 	eorscs	r3, r3, r7, lsr r0
    1c7c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    1c80:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    1c84:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
    1c88:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1c8c:	6172622d 	cmnvs	r2, sp, lsr #4
    1c90:	2068636e 	rsbcs	r6, r8, lr, ror #6
    1c94:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1c98:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    1c9c:	33373220 	teqcc	r7, #32, 4
    1ca0:	5d373230 	lfmpl	f3, 4, [r7, #-192]!	; 0xffffff40
    1ca4:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    1ca8:	613d7570 	teqvs	sp, r0, ror r5
    1cac:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    1cb0:	20696d64 	rsbcs	r6, r9, r4, ror #26
    1cb4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    1cb8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    1cbc:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    1cc0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    1cc4:	616d2d20 	cmnvs	sp, r0, lsr #26
    1cc8:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
    1ccc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    1cd0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    1cd4:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    1cd8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    1cdc:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    1ce0:	6f6e662d 	svcvs	0x006e662d
    1ce4:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    1ce8:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    1cec:	65657700 	strbvs	r7, [r5, #-1792]!	; 0xfffff900
    1cf0:	7961646b 	stmdbvc	r1!, {r0, r1, r3, r5, r6, sl, sp, lr}^
    1cf4:	5f435f00 	svcpl	0x00435f00
    1cf8:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    1cfc:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    1d00:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    1d04:	00656c61 	rsbeq	r6, r5, r1, ror #24
    1d08:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    1d0c:	69726f67 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    1d10:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1d14:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    1d18:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    1d1c:	6f705f6e 	svcvs	0x00705f6e
    1d20:	61006e73 	tstvs	r0, r3, ror lr
    1d24:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    1d28:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    1d2c:	6c006372 	stcvs	3, cr6, [r0], {114}	; 0x72
    1d30:	00306e65 	eorseq	r6, r0, r5, ror #28
    1d34:	5f746e69 	svcpl	0x00746e69
    1d38:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    1d3c:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    1d40:	00737469 	rsbseq	r7, r3, r9, ror #8
    1d44:	30637273 	rsbcc	r7, r3, r3, ror r2
    1d48:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    1d4c:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    1d50:	2e006874 	mcrcs	8, 0, r6, cr0, cr4, {3}
    1d54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d58:	2f2e2e2f 	svccs	0x002e2e2f
    1d5c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1d60:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    1d64:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1d68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1d6c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    1d70:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1d74:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    1d78:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1d7c:	6c610063 	stclvs	0, cr0, [r1], #-396	; 0xfffffe74
    1d80:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    1d84:	64615f64 	strbtvs	r5, [r1], #-3940	; 0xfffff09c
    1d88:	2f007264 	svccs	0x00007264
    1d8c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1d90:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    1d94:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1d98:	67476b2d 	strbvs	r6, [r7, -sp, lsr #22]
    1d9c:	2f457776 	svccs	0x00457776
    1da0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1da4:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    1da8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1dac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1db0:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    1db4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1db8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1dbc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1dc0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1dc4:	2f62696c 	svccs	0x0062696c
    1dc8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1dcc:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1dd0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1dd4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1dd8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
    1ddc:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    1de0:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    1de4:	70636e72 	rsbvc	r6, r3, r2, ror lr
    1de8:	2e2e0079 	mcrcs	0, 1, r0, cr14, cr9, {3}
    1dec:	2f2e2e2f 	svccs	0x002e2e2f
    1df0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1df4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1df8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1dfc:	2f62696c 	svccs	0x0062696c
    1e00:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1e04:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1e08:	2f676e69 	svccs	0x00676e69
    1e0c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    1e10:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    1e14:	Address 0x00001e14 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10bb1d4>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d383a 	eorcc	r3, sp, #3801088	; 0x3a0000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	312d3371 			; <UNDEFINED> instruction: 0x312d3371
  14:	2931622b 	ldmdbcs	r1!, {r0, r1, r3, r5, r9, sp, lr}
  18:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
  1c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  20:	30393130 	eorscc	r3, r9, r0, lsr r1
  24:	20333037 	eorscs	r3, r3, r7, lsr r0
  28:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  2c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  30:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
  34:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
  38:	6172622d 	cmnvs	r2, sp, lsr #4
  3c:	2068636e 	rsbcs	r6, r8, lr, ror #6
  40:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  44:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  48:	33373220 	teqcc	r7, #32, 4
  4c:	5d373230 	lfmpl	f3, 4, [r7, #-192]!	; 0xffffff40
  50:	43434700 	movtmi	r4, #14080	; 0x3700
  54:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  58:	2d383a35 	vldmdbcs	r8!, {s6-s58}
  5c:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  60:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
  64:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  68:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  6c:	31303220 	teqcc	r0, r0, lsr #4
  70:	30373039 	eorscc	r3, r7, r9, lsr r0
  74:	72282033 	eorvc	r2, r8, #51	; 0x33
  78:	61656c65 	cmnvs	r5, r5, ror #24
  7c:	20296573 	eorcs	r6, r9, r3, ror r5
  80:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
  84:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
  88:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  8c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  90:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  94:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  98:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
  9c:	Address 0x0000009c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xedde0>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x33ace0>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00010240 	andeq	r0, r1, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ede00>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0001025c 	andeq	r0, r1, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xede1c>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x33ad1c>
  64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00010274 	andeq	r0, r1, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ede3c>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000102ac 	andeq	r0, r1, ip, lsr #5
  98:	00000098 	muleq	r0, r8, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1ede5c>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
  a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00010344 	andeq	r0, r1, r4, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xede8c>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x33ad8c>
  d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000103dc 	ldrdeq	r0, [r1], -ip
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00010490 	muleq	r1, r0, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00010540 	andeq	r0, r1, r0, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xedecc>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x33adcc>
 114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00010584 	andeq	r0, r1, r4, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xedeec>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x33adec>
 134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1edf1c>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	00010758 	andeq	r0, r1, r8, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1edf3c>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	0001083c 	andeq	r0, r1, ip, lsr r8
 198:	000000ec 	andeq	r0, r0, ip, ror #1
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1edf5c>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	00010928 	andeq	r0, r1, r8, lsr #18
 1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1edf7c>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00010af8 	strdeq	r0, [r1], -r8
 1d8:	00000128 	andeq	r0, r0, r8, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1edf9c>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1e8:	080d0c88 	stmdaeq	sp, {r3, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00010c20 	andeq	r0, r1, r0, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1edfbc>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00010cc8 	andeq	r0, r1, r8, asr #25
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1edfdc>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00010d54 	andeq	r0, r1, r4, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xee00c>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x33af0c>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xee02c>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x33af2c>
 274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00010de8 	andeq	r0, r1, r8, ror #27
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xee04c>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x33af4c>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00010e80 	andeq	r0, r1, r0, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xee06c>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x33af6c>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00010f58 	andeq	r0, r1, r8, asr pc
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xee08c>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x33af8c>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1ee0bc>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	00011104 	andeq	r1, r1, r4, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1ee0dc>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000111cc 	andeq	r1, r1, ip, asr #3
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1ee0fc>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00011370 	andeq	r1, r1, r0, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1ee11c>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	0001144c 	andeq	r1, r1, ip, asr #8
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1ee13c>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00011650 	andeq	r1, r1, r0, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1ee15c>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00011730 	andeq	r1, r1, r0, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1ee17c>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	00011764 	andeq	r1, r1, r4, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xee19c>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x33b09c>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	00011794 	muleq	r1, r4, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1ee1bc>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000117c8 	andeq	r1, r1, r8, asr #15
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1ee1dc>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000118f4 	strdeq	r1, [r1], -r4
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1ee1fc>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	00011984 	andeq	r1, r1, r4, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1ee21c>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00011a88 	andeq	r1, r1, r8, lsl #21
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1ee23c>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00011acc 	andeq	r1, r1, ip, asr #21
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xee25c>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x33b15c>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00011b0c 	andeq	r1, r1, ip, lsl #22
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1ee27c>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00011b58 	andeq	r1, r1, r8, asr fp
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xee29c>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x33b19c>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00011ba0 	andeq	r1, r1, r0, lsr #23
 508:	0000024c 	andeq	r0, r0, ip, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1ee2cc>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 518:	0d0c0112 	stfeqs	f0, [ip, #-72]	; 0xffffffb8
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00011dec 	andeq	r1, r1, ip, ror #27
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1ee2f0>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00011eec 	andeq	r1, r1, ip, ror #29
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1ee310>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00011ffc 	strdeq	r1, [r1], -ip
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1ee330>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	00012080 	andeq	r2, r1, r0, lsl #1
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1ee350>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000120d8 	ldrdeq	r2, [r1], -r8
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1ee370>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	00012280 	andeq	r2, r1, r0, lsl #5
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1ee390>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	00012384 	andeq	r2, r1, r4, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xee3b0>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x33b2b0>
 5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	00012400 	andeq	r2, r1, r0, lsl #8
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1ee3d0>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	000124f8 	strdeq	r2, [r1], -r8
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1ee3f0>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	00012614 	andeq	r2, r1, r4, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1ee410>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000126b0 			; <UNDEFINED> instruction: 0x000126b0
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1ee430>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000126e8 	andeq	r2, r1, r8, ror #13
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xee44c>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x33b34c>
 694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	00012718 	andeq	r2, r1, r8, lsl r7
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2fb370>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000128bc 			; <UNDEFINED> instruction: 0x000128bc
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1ee490>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000128f0 	strdeq	r2, [r1], -r0
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xee4b0>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x33b3b0>
 6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	00012928 	andeq	r2, r1, r8, lsr #18
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xee4d0>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x33b3d0>
 718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	0001294c 	andeq	r2, r1, ip, asr #18
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1ee4f0>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00012b68 	andeq	r2, r1, r8, ror #22
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1ee510>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00012bc4 	andeq	r2, r1, r4, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1ee530>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00012c20 	andeq	r2, r1, r0, lsr #24
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1ee550>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00012c9c 	muleq	r1, ip, ip
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xee570>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x33b470>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00012da4 	andeq	r2, r1, r4, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1ee590>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00012e40 	andeq	r2, r1, r0, asr #28
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1ee5b0>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00012f58 	andeq	r2, r1, r8, asr pc
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xee5d0>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x33b4d0>
 818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00012fa0 	andeq	r2, r1, r0, lsr #31
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1ee5f0>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	00013094 	muleq	r1, r4, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xee610>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x33b510>
 858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000130bc 	strheq	r3, [r1], -ip
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1ee630>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000130ec 	andeq	r3, r1, ip, ror #1
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1ee64c>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000131ac 	andeq	r3, r1, ip, lsr #3
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1ee66c>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	0001326c 	andeq	r3, r1, ip, ror #4
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1ee68c>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	00013328 	andeq	r3, r1, r8, lsr #6
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1ee6ac>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000133e0 	andeq	r3, r1, r0, ror #7
 908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1ee6cc>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	00013490 	muleq	r1, r0, r4
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1ee6ec>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000134c4 	andeq	r3, r1, r4, asr #9
 958:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1ee71c>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 968:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	00013574 	andeq	r3, r1, r4, ror r5
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xcc248>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	00013614 	andeq	r3, r1, r4, lsl r6
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xee75c>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x33b65c>
 9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	00013630 	andeq	r3, r1, r0, lsr r6
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xee77c>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x33b67c>
 9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	0001364c 	andeq	r3, r1, ip, asr #12
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1ee79c>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xedacc>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000136b0 			; <UNDEFINED> instruction: 0x000136b0
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xee7bc>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x33b6bc>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	00013784 	andeq	r3, r1, r4, lsl #15
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xee7dc>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x33b6dc>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	00013864 	andeq	r3, r1, r4, ror #16
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xee80c>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x33b70c>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	00013940 	andeq	r3, r1, r0, asr #18
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1ee82c>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	00013974 	andeq	r3, r1, r4, ror r9
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xee84c>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x33b74c>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00013a2c 	andeq	r3, r1, ip, lsr #20
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xee86c>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x33b76c>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00013a7c 	andeq	r3, r1, ip, ror sl
 ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xee88c>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x33b78c>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00013c2c 	andeq	r3, r1, ip, lsr #24
 ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xee8ac>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x33b7ac>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00013de4 	andeq	r3, r1, r4, ror #27
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xee8cc>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x33b7cc>
 b14:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00013e3c 	andeq	r3, r1, ip, lsr lr
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1ee8fc>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	00014004 	andeq	r4, r1, r4
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1ee91c>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	00014080 	andeq	r4, r1, r0, lsl #1
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xee93c>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x33b83c>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000140a4 	andeq	r4, r1, r4, lsr #1
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xee95c>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x33b85c>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000140bc 	strheq	r4, [r1], -ip
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xee97c>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x33b87c>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	00014194 	muleq	r1, r4, r1
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xee99c>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x33b89c>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	00014300 	andeq	r4, r1, r0, lsl #6
 c08:	0000003c 	andeq	r0, r0, ip, lsr r0
 c0c:	8b080e42 	blhi	20451c <__bss_end+0x1ee9cc>
 c10:	42018e02 	andmi	r8, r1, #2, 28
 c14:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	0001433c 	andeq	r4, r1, ip, lsr r3
 c24:	00000044 	andeq	r0, r0, r4, asr #32
 c28:	8b080e42 	blhi	204538 <__bss_end+0x1ee9e8>
 c2c:	42018e02 	andmi	r8, r1, #2, 28
 c30:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c34:	00000018 	andeq	r0, r0, r8, lsl r0
 c38:	00000bec 	andeq	r0, r0, ip, ror #23
 c3c:	00014380 	andeq	r4, r1, r0, lsl #7
 c40:	00000098 	muleq	r0, r8, r0
 c44:	8b080e42 	blhi	204554 <__bss_end+0x1eea04>
 c48:	42018e02 	andmi	r8, r1, #2, 28
 c4c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c50:	0000000c 	andeq	r0, r0, ip
 c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c58:	7c020001 	stcvc	0, cr0, [r2], {1}
 c5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c60:	00000028 	andeq	r0, r0, r8, lsr #32
 c64:	00000c50 	andeq	r0, r0, r0, asr ip
 c68:	00014418 	andeq	r4, r1, r8, lsl r4
 c6c:	0000011c 	andeq	r0, r0, ip, lsl r1
 c70:	84180e4c 	ldrhi	r0, [r8], #-3660	; 0xfffff1b4
 c74:	86058506 	strhi	r8, [r5], -r6, lsl #10
 c78:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 c7c:	02018e02 	andeq	r8, r1, #2, 28
 c80:	c7c8ce62 	strbgt	ip, [r8, r2, ror #28]
 c84:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 c88:	00000000 	andeq	r0, r0, r0
 c8c:	0000000c 	andeq	r0, r0, ip
 c90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c94:	7c020001 	stcvc	0, cr0, [r2], {1}
 c98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c9c:	00000034 	andeq	r0, r0, r4, lsr r0
 ca0:	00000c8c 	andeq	r0, r0, ip, lsl #25
 ca4:	00014534 	andeq	r4, r1, r4, lsr r5
 ca8:	00000118 	andeq	r0, r0, r8, lsl r1
 cac:	840c0e62 	strhi	r0, [ip], #-3682	; 0xfffff19e
 cb0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cb4:	ce4c0201 	cdpgt	2, 4, cr0, cr12, cr1, {0}
 cb8:	000ec4c5 	andeq	ip, lr, r5, asr #9
 cbc:	840c0e52 	strhi	r0, [ip], #-3666	; 0xfffff1ae
 cc0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cc4:	000e4401 	andeq	r4, lr, r1, lsl #8
 cc8:	44cec5c4 	strbmi	ip, [lr], #1476	; 0x5c4
 ccc:	03840c0e 	orreq	r0, r4, #3584	; 0xe00
 cd0:	018e0285 	orreq	r0, lr, r5, lsl #5
 cd4:	0000000c 	andeq	r0, r0, ip
 cd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 cdc:	7c020001 	stcvc	0, cr0, [r2], {1}
 ce0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ce4:	0000002c 	andeq	r0, r0, ip, lsr #32
 ce8:	00000cd4 	ldrdeq	r0, [r0], -r4
 cec:	0001464c 	andeq	r4, r1, ip, asr #12
 cf0:	000000e8 	andeq	r0, r0, r8, ror #1
 cf4:	84100e52 	ldrhi	r0, [r0], #-3666	; 0xfffff1ae
 cf8:	86038504 	strhi	r8, [r3], -r4, lsl #10
 cfc:	6a018e02 	bvs	6450c <__bss_end+0x4e9bc>
 d00:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
 d04:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
 d08:	ce0a500b 	cdpgt	0, 0, cr5, cr10, cr11, {0}
 d0c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 d10:	000b4200 	andeq	r4, fp, r0, lsl #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
   c:	006c0000 	rsbeq	r0, ip, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00006c51 	andeq	r6, r0, r1, asr ip
  18:	0000e000 	andeq	lr, r0, r0
  1c:	f3000400 	vshl.u8	d0, d0, d0
  20:	e09f5101 	adds	r5, pc, r1, lsl #2
  24:	fc000000 	stc2	0, cr0, [r0], {-0}
  28:	01000000 	mrseq	r0, (UNDEF: 0)
  2c:	00fc5100 	rscseq	r5, ip, r0, lsl #2
  30:	01100000 	tsteq	r0, r0
  34:	00040000 	andeq	r0, r4, r0
  38:	9f5101f3 	svcls	0x005101f3
  3c:	00000110 	andeq	r0, r0, r0, lsl r1
  40:	0000011c 	andeq	r0, r0, ip, lsl r1
  44:	00510001 	subseq	r0, r1, r1
	...
  5c:	00003000 	andeq	r3, r0, r0
  60:	52000100 	andpl	r0, r0, #0, 2
  64:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  68:	000000bc 	strheq	r0, [r0], -ip
  6c:	e0520001 	subs	r0, r2, r1
  70:	f4000000 	vst4.8	{d0-d3}, [r0], r0
  74:	01000000 	mrseq	r0, (UNDEF: 0)
  78:	00f45200 	rscseq	r5, r4, r0, lsl #4
  7c:	00fc0000 	rscseq	r0, ip, r0
  80:	00030000 	andeq	r0, r3, r0
  84:	109f7f72 	addsne	r7, pc, r2, ror pc	; <UNPREDICTABLE>
  88:	1c000001 	stcne	0, cr0, [r0], {1}
  8c:	01000001 	tsteq	r0, r1
  90:	00005200 	andeq	r5, r0, r0, lsl #4
	...
  a4:	00000004 	andeq	r0, r0, r4
  a8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  ac:	b0500001 	subslt	r0, r0, r1
  b0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00e05c00 	rsceq	r5, r0, r0, lsl #24
  bc:	00e80000 	rsceq	r0, r8, r0
  c0:	00010000 	andeq	r0, r1, r0
  c4:	0000e850 	andeq	lr, r0, r0, asr r8
  c8:	0000f000 	andeq	pc, r0, r0
  cc:	5c000100 	stfpls	f0, [r0], {-0}
  d0:	000000fc 	strdeq	r0, [r0], -ip
  d4:	0000011c 	andeq	r0, r0, ip, lsl r1
  d8:	00500001 	subseq	r0, r0, r1
  dc:	00000000 	andeq	r0, r0, r0
  e0:	01000000 	mrseq	r0, (UNDEF: 0)
	...
  f0:	00000400 	andeq	r0, r0, r0, lsl #8
  f4:	00006c00 	andeq	r6, r0, r0, lsl #24
  f8:	51000100 	mrspl	r0, (UNDEF: 16)
  fc:	0000006c 	andeq	r0, r0, ip, rrx
 100:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 104:	01f30004 	mvnseq	r0, r4
 108:	00b09f51 	adcseq	r9, r0, r1, asr pc
 10c:	00cc0000 	sbceq	r0, ip, r0
 110:	00010000 	andeq	r0, r1, r0
 114:	0000cc51 	andeq	ip, r0, r1, asr ip
 118:	0000d400 	andeq	sp, r0, r0, lsl #8
 11c:	71000300 	mrsvc	r0, LR_irq
 120:	00d49f7f 	sbcseq	r9, r4, pc, ror pc
 124:	01000000 	mrseq	r0, (UNDEF: 0)
 128:	00010000 	andeq	r0, r1, r0
 12c:	00010051 	andeq	r0, r1, r1, asr r0
 130:	00010800 	andeq	r0, r1, r0, lsl #16
 134:	71000300 	mrsvc	r0, LR_irq
 138:	01089f7f 	tsteq	r8, pc, ror pc
 13c:	011c0000 	tsteq	ip, r0
 140:	00010000 	andeq	r0, r1, r0
 144:	00000051 	andeq	r0, r0, r1, asr r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	74000000 	strvc	r0, [r0], #-0
 150:	8c000000 	stchi	0, cr0, [r0], {-0}
 154:	01000000 	mrseq	r0, (UNDEF: 0)
 158:	00005c00 	andeq	r5, r0, r0, lsl #24
 15c:	00000000 	andeq	r0, r0, r0
 160:	01000000 	mrseq	r0, (UNDEF: 0)
 164:	01000001 	tsteq	r0, r1
 168:	01010101 	tsteq	r1, r1, lsl #2
 16c:	00000000 	andeq	r0, r0, r0
 170:	00010100 	andeq	r0, r1, r0, lsl #2
 174:	00000030 	andeq	r0, r0, r0, lsr r0
 178:	00000030 	andeq	r0, r0, r0, lsr r0
 17c:	70730003 	rsbsvc	r0, r3, r3
 180:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 184:	00004000 	andeq	r4, r0, r0
 188:	73000300 	movwvc	r0, #768	; 0x300
 18c:	00409f74 	subeq	r9, r0, r4, ror pc
 190:	00480000 	subeq	r0, r8, r0
 194:	00030000 	andeq	r0, r3, r0
 198:	489f6473 	ldmmi	pc, {r0, r1, r4, r5, r6, sl, sp, lr}	; <UNPREDICTABLE>
 19c:	4c000000 	stcmi	0, cr0, [r0], {-0}
 1a0:	03000000 	movweq	r0, #0
 1a4:	9f687300 	svcls	0x00687300
 1a8:	0000004c 	andeq	r0, r0, ip, asr #32
 1ac:	00000050 	andeq	r0, r0, r0, asr r0
 1b0:	6c730003 	ldclvs	0, cr0, [r3], #-12
 1b4:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 1b8:	00008c00 	andeq	r8, r0, r0, lsl #24
 1bc:	51000100 	mrspl	r0, (UNDEF: 16)
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	00000090 	muleq	r0, r0, r0
 1c8:	90540001 	subsls	r0, r4, r1
 1cc:	94000000 	strls	r0, [r0], #-0
 1d0:	03000000 	movweq	r0, #0
 1d4:	9f7c7400 	svcls	0x007c7400
 1d8:	00000094 	muleq	r0, r4, r0
 1dc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e0:	00540001 	subseq	r0, r4, r1
	...
 1f8:	0000c800 	andeq	ip, r0, r0, lsl #16
 1fc:	51000100 	mrspl	r0, (UNDEF: 16)
 200:	000000c8 	andeq	r0, r0, r8, asr #1
 204:	000000e0 	andeq	r0, r0, r0, ror #1
 208:	01f30004 	mvnseq	r0, r4
 20c:	00e09f51 	rsceq	r9, r0, r1, asr pc
 210:	00ec0000 	rsceq	r0, ip, r0
 214:	00010000 	andeq	r0, r1, r0
 218:	0000ec51 	andeq	lr, r0, r1, asr ip
 21c:	00010000 	andeq	r0, r1, r0
 220:	f3000400 	vshl.u8	d0, d0, d0
 224:	009f5101 	addseq	r5, pc, r1, lsl #2
 228:	18000001 	stmdane	r0, {r0}
 22c:	01000001 	tsteq	r0, r1
 230:	00005100 	andeq	r5, r0, r0, lsl #2
	...
 240:	00010000 	andeq	r0, r1, r0
	...
 24c:	00100000 	andseq	r0, r0, r0
 250:	00010000 	andeq	r0, r1, r0
 254:	00001052 	andeq	r1, r0, r2, asr r0
 258:	00002000 	andeq	r2, r0, r0
 25c:	52000100 	andpl	r0, r0, #0, 2
 260:	00000020 	andeq	r0, r0, r0, lsr #32
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	7f720003 	svcvc	0x00720003
 26c:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 270:	00002c00 	andeq	r2, r0, r0, lsl #24
 274:	52000100 	andpl	r0, r0, #0, 2
 278:	0000002c 	andeq	r0, r0, ip, lsr #32
 27c:	00000038 	andeq	r0, r0, r8, lsr r0
 280:	7f720003 	svcvc	0x00720003
 284:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 288:	00009c00 	andeq	r9, r0, r0, lsl #24
 28c:	52000100 	andpl	r0, r0, #0, 2
 290:	000000bc 	strheq	r0, [r0], -ip
 294:	000000cc 	andeq	r0, r0, ip, asr #1
 298:	7f720003 	svcvc	0x00720003
 29c:	0001009f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
 2a0:	00011000 	andeq	r1, r1, r0
 2a4:	52000100 	andpl	r0, r0, #0, 2
	...
 2b0:	00000002 	andeq	r0, r0, r2
	...
 2bc:	00200000 	eoreq	r0, r0, r0
 2c0:	00010000 	andeq	r0, r1, r0
 2c4:	00002050 	andeq	r2, r0, r0, asr r0
 2c8:	0000a000 	andeq	sl, r0, r0
 2cc:	53000100 	movwpl	r0, #256	; 0x100
 2d0:	000000bc 	strheq	r0, [r0], -ip
 2d4:	00000104 	andeq	r0, r0, r4, lsl #2
 2d8:	08530001 	ldmdaeq	r3, {r0}^
 2dc:	10000001 	andne	r0, r0, r1
 2e0:	01000001 	tsteq	r0, r1
 2e4:	01105000 	tsteq	r0, r0
 2e8:	01180000 	tsteq	r8, r0
 2ec:	00010000 	andeq	r0, r1, r0
 2f0:	00000053 	andeq	r0, r0, r3, asr r0
 2f4:	00000000 	andeq	r0, r0, r0
 2f8:	00000100 	andeq	r0, r0, r0, lsl #2
 2fc:	54000000 	strpl	r0, [r0], #-0
 300:	e0000000 	and	r0, r0, r0
 304:	03000000 	movweq	r0, #0
 308:	9f200800 	svcls	0x00200800
 30c:	00000100 	andeq	r0, r0, r0, lsl #2
 310:	00000108 	andeq	r0, r0, r8, lsl #2
 314:	20080003 	andcs	r0, r8, r3
 318:	0001109f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
 31c:	00011800 	andeq	r1, r1, r0, lsl #16
 320:	08000300 	stmdaeq	r0, {r8, r9}
 324:	00009f20 	andeq	r9, r0, r0, lsr #30
	...
 334:	004c0000 	subeq	r0, ip, r0
 338:	00dc0000 	sbcseq	r0, ip, r0
 33c:	00010000 	andeq	r0, r1, r0
 340:	0000dc5e 	andeq	sp, r0, lr, asr ip
 344:	0000e000 	andeq	lr, r0, r0
 348:	f3002200 	vhsub.u8	d2, d0, d0
 34c:	ff085101 			; <UNDEFINED> instruction: 0xff085101
 350:	5101f31a 	tstpl	r1, sl, lsl r3	; <UNPREDICTABLE>
 354:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
 358:	01f32124 	mvnseq	r2, r4, lsr #2
 35c:	1aff0851 	bne	fffc24a8 <_estack+0xf7fb24a8>
 360:	085101f3 	ldmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8}^
 364:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xfffff501
 368:	21244021 			; <UNDEFINED> instruction: 0x21244021
 36c:	0001009f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
 370:	00010800 	andeq	r0, r1, r0, lsl #16
 374:	5e000100 	adfpls	f0, f0, f0
 378:	00000110 	andeq	r0, r0, r0, lsl r1
 37c:	00000118 	andeq	r0, r0, r8, lsl r1
 380:	005e0001 	subseq	r0, lr, r1
 384:	00000000 	andeq	r0, r0, r0
 388:	01000000 	mrseq	r0, (UNDEF: 0)
 38c:	01010100 	mrseq	r0, (UNDEF: 17)
 390:	01010101 	tsteq	r1, r1, lsl #2
 394:	00000000 	andeq	r0, r0, r0
 398:	01010000 	mrseq	r0, (UNDEF: 1)
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	00004800 	andeq	r4, r0, r0, lsl #16
 3a4:	00006c00 	andeq	r6, r0, r0, lsl #24
 3a8:	53000100 	movwpl	r0, #256	; 0x100
 3ac:	0000006c 	andeq	r0, r0, ip, rrx
 3b0:	00000070 	andeq	r0, r0, r0, ror r0
 3b4:	747c0003 	ldrbtvc	r0, [ip], #-3
 3b8:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 3bc:	00007400 	andeq	r7, r0, r0, lsl #8
 3c0:	7c000300 	stcvc	3, cr0, [r0], {-0}
 3c4:	00749f78 	rsbseq	r9, r4, r8, ror pc
 3c8:	00780000 	rsbseq	r0, r8, r0
 3cc:	00030000 	andeq	r0, r3, r0
 3d0:	789f7c7c 	ldmvc	pc, {r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
 3d4:	80000000 	andhi	r0, r0, r0
 3d8:	01000000 	mrseq	r0, (UNDEF: 0)
 3dc:	00805c00 	addeq	r5, r0, r0, lsl #24
 3e0:	008c0000 	addeq	r0, ip, r0
 3e4:	00030000 	andeq	r0, r3, r0
 3e8:	989f707c 	ldmls	pc, {r2, r3, r4, r5, r6, ip, sp, lr}	; <UNPREDICTABLE>
 3ec:	b0000000 	andlt	r0, r0, r0
 3f0:	01000000 	mrseq	r0, (UNDEF: 0)
 3f4:	00b05c00 	adcseq	r5, r0, r0, lsl #24
 3f8:	00b00000 	adcseq	r0, r0, r0
 3fc:	00030000 	andeq	r0, r3, r0
 400:	b09f7c7c 	addslt	r7, pc, ip, ror ip	; <UNPREDICTABLE>
 404:	e0000000 	and	r0, r0, r0
 408:	01000000 	mrseq	r0, (UNDEF: 0)
 40c:	01005c00 	tsteq	r0, r0, lsl #24
 410:	01080000 	mrseq	r0, (UNDEF: 8)
 414:	00010000 	andeq	r0, r1, r0
 418:	0001105c 	andeq	r1, r1, ip, asr r0
 41c:	00011800 	andeq	r1, r1, r0, lsl #16
 420:	53000100 	movwpl	r0, #256	; 0x100
	...
 434:	00040000 	andeq	r0, r4, r0
 438:	00c80000 	sbceq	r0, r8, r0
 43c:	00060000 	andeq	r0, r6, r0
 440:	ff080071 			; <UNDEFINED> instruction: 0xff080071
 444:	00c89f1a 	sbceq	r9, r8, sl, lsl pc
 448:	00e00000 	rsceq	r0, r0, r0
 44c:	00070000 	andeq	r0, r7, r0
 450:	085101f3 	ldmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8}^
 454:	e09f1aff 			; <UNDEFINED> instruction: 0xe09f1aff
 458:	ec000000 	stc	0, cr0, [r0], {-0}
 45c:	06000000 	streq	r0, [r0], -r0
 460:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
 464:	ec9f1aff 	vldmia	pc, {s2-s256}
 468:	00000000 	andeq	r0, r0, r0
 46c:	07000001 	streq	r0, [r0, -r1]
 470:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 474:	9f1aff08 	svcls	0x001aff08
 478:	00000100 	andeq	r0, r0, r0, lsl #2
 47c:	00000118 	andeq	r0, r0, r8, lsl r1
 480:	00710006 	rsbseq	r0, r1, r6
 484:	9f1aff08 	svcls	0x001aff08
	...
 49c:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a0:	2c510001 	mrrccs	0, 0, r0, r1, cr1
 4a4:	a0000000 	andge	r0, r0, r0
 4a8:	04000000 	streq	r0, [r0], #-0
 4ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 4b0:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 4b4:	0000b000 	andeq	fp, r0, r0
 4b8:	51000100 	mrspl	r0, (UNDEF: 16)
 4bc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 4c0:	000000e8 	andeq	r0, r0, r8, ror #1
 4c4:	01f30004 	mvnseq	r0, r4
 4c8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
 4e4:	002c0000 	eoreq	r0, ip, r0
 4e8:	00010000 	andeq	r0, r1, r0
 4ec:	00002c52 	andeq	r2, r0, r2, asr ip
 4f0:	00003400 	andeq	r3, r0, r0, lsl #8
 4f4:	52000100 	andpl	r0, r0, #0, 2
 4f8:	00000048 	andeq	r0, r0, r8, asr #32
 4fc:	00000058 	andeq	r0, r0, r8, asr r0
 500:	645e0001 	ldrbvs	r0, [lr], #-1
 504:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 508:	06000000 	streq	r0, [r0], -r0
 50c:	73007400 	movwvc	r7, #1024	; 0x400
 510:	689f1c00 	ldmvs	pc, {sl, fp, ip}	; <UNPREDICTABLE>
 514:	6c000000 	stcvs	0, cr0, [r0], {-0}
 518:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 51c:	73007400 	movwvc	r7, #1024	; 0x400
 520:	01231c00 			; <UNDEFINED> instruction: 0x01231c00
 524:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 528:	0000b000 	andeq	fp, r0, r0
 52c:	52000100 	andpl	r0, r0, #0, 2
 530:	000000b4 	strheq	r0, [r0], -r4
 534:	000000cc 	andeq	r0, r0, ip, asr #1
 538:	7c720003 	ldclvc	0, cr0, [r2], #-12
 53c:	0000cc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 540:	0000e800 	andeq	lr, r0, r0, lsl #16
 544:	52000100 	andpl	r0, r0, #0, 2
	...
 550:	01000002 	tsteq	r0, r2
 554:	00000000 	andeq	r0, r0, r0
 558:	00000001 	andeq	r0, r0, r1
 55c:	00000000 	andeq	r0, r0, r0
 560:	002c0000 	eoreq	r0, ip, r0
 564:	00010000 	andeq	r0, r1, r0
 568:	00002c50 	andeq	r2, r0, r0, asr ip
 56c:	00004800 	andeq	r4, r0, r0, lsl #16
 570:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
 574:	00000058 	andeq	r0, r0, r8, asr r0
 578:	00000068 	andeq	r0, r0, r8, rrx
 57c:	68530001 	ldmdavs	r3, {r0}^
 580:	6c000000 	stcvs	0, cr0, [r0], {-0}
 584:	03000000 	movweq	r0, #0
 588:	9f7f7300 	svcls	0x007f7300
 58c:	0000006c 	andeq	r0, r0, ip, rrx
 590:	00000074 	andeq	r0, r0, r4, ror r0
 594:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
 598:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 59c:	01000000 	mrseq	r0, (UNDEF: 0)
 5a0:	00a05300 	adceq	r5, r0, r0, lsl #6
 5a4:	00e80000 	rsceq	r0, r8, r0
 5a8:	00010000 	andeq	r0, r1, r0
 5ac:	00000050 	andeq	r0, r0, r0, asr r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	01010300 	mrseq	r0, SP_irq
 5b8:	01010000 	mrseq	r0, (UNDEF: 1)
 5bc:	00000000 	andeq	r0, r0, r0
 5c0:	00004800 	andeq	r4, r0, r0, lsl #16
 5c4:	51000100 	mrspl	r0, (UNDEF: 16)
 5c8:	00000048 	andeq	r0, r0, r8, asr #32
 5cc:	00000058 	andeq	r0, r0, r8, asr r0
 5d0:	01710003 	cmneq	r1, r3
 5d4:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 5d8:	0000cc00 	andeq	ip, r0, r0, lsl #24
 5dc:	51000100 	mrspl	r0, (UNDEF: 16)
 5e0:	000000cc 	andeq	r0, r0, ip, asr #1
 5e4:	000000e8 	andeq	r0, r0, r8, ror #1
 5e8:	00530001 	subseq	r0, r3, r1
	...
 5f8:	0000b400 	andeq	fp, r0, r0, lsl #8
 5fc:	0000d400 	andeq	sp, r0, r0, lsl #8
 600:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
 604:	000000d4 	ldrdeq	r0, [r0], -r4
 608:	000000d8 	ldrdeq	r0, [r0], -r8
 60c:	7c740003 	ldclvc	0, cr0, [r4], #-12
 610:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 614:	0000e800 	andeq	lr, r0, r0, lsl #16
 618:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
 624:	00010100 	andeq	r0, r1, r0, lsl #2
 628:	000000b4 	strheq	r0, [r0], -r4
 62c:	000000cc 	andeq	r0, r0, ip, asr #1
 630:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
 634:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 638:	01000000 	mrseq	r0, (UNDEF: 0)
 63c:	00005300 	andeq	r5, r0, r0, lsl #6
 640:	00000000 	andeq	r0, r0, r0
	...
